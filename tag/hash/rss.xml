<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 해시_베스트앨범</title>
	  <link>/blog//algo-prog42579</link>
	  <author></author>
	  <pubDate>2019-10-17T05:12:00+09:00</pubDate>
	  <guid>/blog//algo-prog42579</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42579">https://programmers.co.kr/learn/courses/30/lessons/42579</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>해시에 장르별로 plays 계산한다.</li>
  <li>해시 사이즈(장르 개수)만큼 ArrayList 생성, 장르별로 노래(고유번호, 재생)저장한다.</li>
  <li>해시와 ArrayList를 내림차순으로 정렬한다.</li>
  <li>해시 순서대로 장르의 0, 1번의 고유 번호를 리턴한다.</li>
</ol>

<p>=&gt;ArrayList를 동적 생성할 수 없어서 불가.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>장르별로 총 재생 횟수를 계산하는 해시를 생성한다.</li>
  <li>재생 횟수를 내림차순으로 정렬하기 위해 배열을 사용한다.</li>
  <li>해시맵(장르, 노래들)형태로 생성한다.</li>
  <li>노래들의 1, 2위를 뽑기 위해 ArrayList에 저장, 내림차순으로 정렬한다.</li>
  <li>장르별 두 개(또는 하나)를 뽑아 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Music</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">play</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Music</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">idx</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">=</span><span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Music</span> <span class="n">m</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">&gt;</span><span class="n">m</span><span class="o">.</span><span class="na">play</span><span class="o">){</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">&lt;</span><span class="n">m</span><span class="o">.</span><span class="na">play</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">idx</span><span class="o">&gt;</span><span class="n">m</span><span class="o">.</span><span class="na">idx</span><span class="o">){</span>
                <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">genres</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">plays</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="c1">//장르별 총 재생 횟수 계산</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">genres</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="mi">0</span><span class="o">)+</span><span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="c1">//재생횟수보고 장르를 찾기위해 바꿔서 해시에 저장</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">reverseMap</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span><span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">),</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">//재생횟수 내림차순 정렬</span>
        <span class="n">Integer</span><span class="o">[]</span> <span class="n">rankGenres</span><span class="o">=</span><span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">key:</span><span class="n">reverseMap</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="n">rankGenres</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">key</span><span class="o">;</span>
            <span class="n">j</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankGenres</span><span class="o">);</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankGenres</span><span class="o">,</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>

        <span class="c1">//해시맵(장르, 노래들)으로 각 1,2위 뽑기</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;&gt;</span> <span class="n">rankMusic</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">plays</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                <span class="n">rankMusic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>
            <span class="o">}</span>
            <span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Music</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="c1">//장르별 value인 ArrayList 내림차순 정렬</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">answerArray</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span><span class="c1">//값이 2개이상이라면</span>
                <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
                <span class="c1">//Collections.reverse(rankMusic.get(key));</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">answerArray</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">answerArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>    
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>HashMap&lt;String, Integer&gt; map: 장르별로 총 재생횟수를 계산한다.</li>
  <li>HashMap&lt;Integer, String&gt; reverseMap: 총 재생횟수를 내림차순으로 정렬한 후, 재생횟수를 통해 장르를 알 수 있도록 key, value를 바꾼다.</li>
  <li>Integer[] rankGenres: 총 재생횟수를 내림차순으로 정렬한다. 내림차순을 만드는 메소드가 없으므로, 오름차순으로 정렬 후 reverse함수를 사용한다.</li>
  <li>HashMap&lt;String, ArrayList<Music>&gt; rankMusic: key는 장르를, value는 해당 장르의 노래들을 ArrayList로 저장한다. 이때 재생횟수(play)와 고유번호(idx)를 가지는 Music이라는 클래스를 생성하여 ArrayList에 Music 형태로 저장한다.</Music></li>
  <li>ArrayList<Integer> answerArray: rankMusic을 내림차순으로 정렬하여 0, 1번을 장르 순서대로 저장한다.</Integer></li>
  <li>int[] answer: answerArray의 값을 카피하여 리턴한다.</li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191016_2.PNG" alt="실행결과" />
실패¯_( ͡° ͜ʖ ͡°)/¯
어디서 틀렸는지 알고 싶은데 테스트케이스를 몰라서 알 수 없는게 함정</p>
<h2 id="보류"><span style="color:navy">보류</span></h2>

<p>위의 코드도 <a href="https://developerdk.tistory.com/13">https://developerdk.tistory.com/13</a>의 풀이법을 99%참고하여 작성하였다. 일단 다른 사람의 코드를 이해하고 다른 문제로 넘어가도록 하겠다…</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 해시_위장: 종류별로 카운트하기</title>
	  <link>/blog//algo-prog42578</link>
	  <author></author>
	  <pubDate>2019-10-01T06:09:00+09:00</pubDate>
	  <guid>/blog//algo-prog42578</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42578">https://programmers.co.kr/learn/courses/30/lessons/42578</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>key는 의상의 종류(clothes[i][1]), value는 종류의 갯수를 가지는 해쉬맵을 선언한다.</li>
  <li>(의상종류A+1)x(B+1)x…x(N+1)-1이 answer이다.
이때 각 종류에 +1은 해당 의상 종류를 선택하지 않는 경우(null)이며, 마지막 -1은 모든 종류가 없는 경우(null)이다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[][]</span> <span class="n">clothes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="o">;</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">clothes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">])){</span>
                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">temp</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">map</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span><span class="n">temp</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span><span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">*=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">--;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/190930_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<p>map의 값을 변경할 때 replace를 사용하였는데, put 역시 replace와 같은 기능을 한다는 것을 기억해두자!</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 해시_전화번호 목록: 링크드리스트와 해시의 효율성 차이</title>
	  <link>/blog//algo-prog42577</link>
	  <author></author>
	  <pubDate>2019-09-28T03:22:00+09:00</pubDate>
	  <guid>/blog//algo-prog42577</guid>
	  <description><![CDATA[
	     <h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>이중 for문을 사용하여 배열 phone_book의 원소를 두 개씩 비교한다.</li>
  <li>String 라이브러리의 startsWith메소드로 원소 i가 j의 접두사인지 확인한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">phone_book</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">answer</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">phone_book</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">phone_book</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">phone_book</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">startsWith</span><span class="o">(</span><span class="n">phone_book</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/190927_1.PNG" alt="실행결과" />
테스트 8, 9에서 실패하였다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>phone_book=[“98765”,…,”98”]일 때, 위 코드를 실행했을 경우 마지막 원소 “98”이 0번째 원소인 “98765”의 접두사임을 찾지 못한다.
따라서 배열을 길이에 따라 오름차순으로 정렬한 후 if문을 체크해야한다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>phone_book을 sort한다.</li>
  <li>이중 for문으로 접두사인지 체크한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">phone_book</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">answer</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">phone_book</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">phone_book</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">phone_book</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">phone_book</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">startsWith</span><span class="o">(</span><span class="n">phone_book</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/190927_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<p>문제가 해시 카테고리에 있는데도 구글링한 결과 해시로 푼 사람은 한명밖에 찾지 못했다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 해시_완주하지 못한 선수: 링크드리스트와 해시의 효율성 차이</title>
	  <link>/blog//algo-prog42576</link>
	  <author></author>
	  <pubDate>2019-09-25T06:26:00+09:00</pubDate>
	  <guid>/blog//algo-prog42576</guid>
	  <description><![CDATA[
	     <h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>전체 마라톤 선수 participant를 링크드리스트에 저장한다.</li>
  <li>완주한 선수들의 배열 completion을 처음부터 순회하며 링크드리스트에 동일한 값을 삭제한다.</li>
  <li>마지막 남은 하나를 answer로 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">participant</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">completion</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">LinkedList</span> <span class="n">people</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">participant</span><span class="o">){</span>
            <span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">completion</span><span class="o">){</span>
            <span class="n">people</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">people</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">=(</span><span class="n">String</span><span class="o">)</span><span class="n">people</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/190924_1.PNG" alt="실행결과" />
효율성에서 모두 실패를 얻었다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>링크드리스트보다 더 효율적인 자료구조를 적용해야한다.</p>

<h2 id="ʃƪ‿-두-번째-도전"><span style="color:navy">(ʃƪ¬‿¬) 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>해시맵을 선언하여 key는 participant의 이름, value는 기본값이 1이고, 동명이인이 존재할 경우 +1한다.</li>
  <li>completion을 순회하며 해쉬맵에 존재할 경우 삭제한다. 이때 동명이인이 있다면 value를 -1하여 한 명만 지운다.</li>
  <li>해쉬맵에 남은 단 한명을 리턴한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">participant</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">completion</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hash</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">participant</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)==</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">hash</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">hash</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">completion</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">hash</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">hash</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">hash</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/190924_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<p>문제를 보자마자 익숙한 링크드리스트가 먼저 떠올랐는데, 앞으로는 해쉬도 염두해두도록 하자.</p>

	  ]]></description>
	</item>


</channel>
</rss>
