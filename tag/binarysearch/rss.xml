<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] 이분 탐색: K번째 수</title>
	  <link>/blog//algo-boj1300</link>
	  <author></author>
	  <pubDate>2020-04-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1300</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1300">https://www.acmicpc.net/problem/1300</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>B[k]를 x라 할 때, x를 이분 탐색으로 구한다.</li>
  <li>x가 k번째 큰 수 인지 체크하면서 구한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="n">k</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">mid</span><span class="o">=(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
				<span class="n">cnt</span><span class="o">+=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">mid</span><span class="o">/</span><span class="n">i</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;=</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">answer</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
				<span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">else</span>
				<span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200411_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">이분 탐색을 사용한다</span></strong>
    <ul>
      <li>B[k]=x라 할 때, x를 이분 탐색으로 구한다.</li>
      <li>이분 탐색으로 x가 k번째 수인 것을 찾는다.</li>
      <li>몇 번째 큰 수 인지 확인하는 방법은, 각 i행에서 x이하의 개수는 min(x/i, n)임을 이용한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>어렵다T_T</p>

<h3 id="참고">참고</h3>
<ul>
  <li>알고리즘 풀이(JAVA) - [이분 탐색] 백준 알고리즘-1300(K번째 수) <a href="https://parkhyeokjin.github.io/algorithm/2019/10/15/baekjoon-1300.html">https://parkhyeokjin.github.io/algorithm/2019/10/15/baekjoon-1300.html</a></li>
  <li>BOJ#1300 K번째 수 <a href="https://stack07142.tistory.com/298">https://stack07142.tistory.com/298</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 이분 탐색: 나무 자르기</title>
	  <link>/blog//algo-boj2805</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2805</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2805">https://www.acmicpc.net/problem/2805</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>절단기의 높이를 이분 탐색으로 구한다.</li>
  <li>설정한 높이로 최소 m미터를 자를 수 있다면 그 값들 중 최댓값을 출력한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
		
		<span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
			<span class="kt">long</span> <span class="n">meter</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="n">mid</span><span class="o">=(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">mid</span><span class="o">&lt;</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
					<span class="n">meter</span><span class="o">+=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">mid</span><span class="o">;</span>
			<span class="o">}</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">meter</span><span class="o">&gt;=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
				<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">else</span>
				<span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>		
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">이분 탐색을 사용한다</span></strong>
    <ul>
      <li>절단기의 높이(mid)를 이분 탐색으로 구한다.</li>
      <li>설정한 mid로 나무를 벨 수 있다면 그 총 값을 meter에 저장한다.</li>
      <li>meter&gt;=m이면 조건에 만족하였으므로 mid들 중 최댓값을 max에 저장한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 이분 탐색: 공유기 설치</title>
	  <link>/blog//algo-boj2110</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2110</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2110">https://www.acmicpc.net/problem/2110</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>두 공유기 사이의 거리를 mid로 하여 이분 탐색으로 구한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
		
		<span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]-</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">mid</span><span class="o">=(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
			
			<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">install</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">install</span><span class="o">+</span><span class="n">mid</span><span class="o">&lt;=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">cnt</span><span class="o">++;</span>
					<span class="n">install</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;=</span><span class="n">c</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
				<span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">else</span> 
				<span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_6.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">이분 탐색을 사용한다</span></strong>
    <ul>
      <li>두 공유기 사이의 거리를 mid로 놓고 이분 탐색으로 구한다.</li>
      <li>첫 번째 집에는 무조건 설치한다고 하고, 현재 마지막 설치 집+mid가 현재 순회 중인 array[i]에 설치할 수 있다면 설치한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제 이해하는 것이 어려웠다. 예시에서 1 4 9 설치하면 최댓값은 5라고 생각했는데, 그게 아니라 mid=3일때 1 4에 설치하면 8 9에 설치할 수 있으므로 mid는 3개가 되는 것이었다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 2110 공유기 설치 Java <a href="https://dundung.tistory.com/54">https://dundung.tistory.com/54</a></li>
  <li>백준 2110 문제. 공유기 설치 <a href="https://romanceboong.tistory.com/entry/%EB%B0%B1%EC%A4%80-2110%EB%B2%88-%EB%AC%B8%EC%A0%9C-%EA%B3%B5%EC%9C%A0%EA%B8%B0-%EC%84%A4%EC%B9%98">https://romanceboong.tistory.com/entry/%EB%B0%B1%EC%A4%80-2110%EB%B2%88-%EB%AC%B8%EC%A0%9C-%EA%B3%B5%EC%9C%A0%EA%B8%B0-%EC%84%A4%EC%B9%98</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 이분 탐색: 수 찾기</title>
	  <link>/blog//algo-boj1920</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1920</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1920">https://www.acmicpc.net/problem/1920</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>n개의 정수를 array에 저장한 후, 이분 탐색을 위해 오름차순 정렬한다.</li>
  <li>m개의 수는 input에 저장하여 이분 탐색을 통해 array에 값이 있는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
		
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">last</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">while</span><span class="o">(</span><span class="n">first</span><span class="o">&lt;=</span><span class="n">last</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">mid</span><span class="o">=(</span><span class="n">first</span><span class="o">+</span><span class="n">last</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
					<span class="k">break</span><span class="o">;</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="o">{</span>
					<span class="k">if</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> 
						<span class="n">last</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
					<span class="k">else</span>
						<span class="n">first</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">first</span><span class="o">&gt;</span><span class="n">last</span><span class="o">)</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">이분 탐색을 사용한다</span></strong>
    <ul>
      <li>이분탐색을 사용하기 위해서는 정렬된 오름차순이어야 한다. 따라서 array를 오름차순으로 정렬한다.</li>
      <li>m개의 정수를 input 배열에 저장하고, for문을 이용해 하나씩 순회한다.</li>
      <li>for문안에서 while문을 돌려 이분탐색을 진행한다. 이분탐색은 시작 인덱스 first와 마지막 인덱스 last를 반씩 줄여가면서 진행한다. 둘이 만나면 while문을 종료한다. while문이 끝날 때 까지 1을 출력하지 못한다면 input[i]가 없다는 뜻이므로 0을 출력한다.</li>
      <li>first와 last의 중간 인덱스인 mid를 구한 후, array[mid]가 input[i]와 같다면 1을 출력한다.</li>
      <li>input[i]가 array[mid]보다 작다면 last를 조정하여 범위를 줄이고, 크다면 first를 조정한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 이분 탐색: 랜선 자르기</title>
	  <link>/blog//algo-boj1654</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1654</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1920">https://www.acmicpc.net/problem/1920</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>랜선 길이를 이분 탐색으로 찾는다.</li>
  <li>구한 mid가 k개의 랜선을 만들 수 있는 경우들 중 최댓값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
		
		<span class="kt">long</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
		<span class="kt">long</span> <span class="n">right</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
		<span class="kt">long</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">long</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">mid</span><span class="o">=(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
			<span class="kt">long</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> 
				<span class="n">cnt</span><span class="o">+=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]/</span><span class="n">mid</span><span class="o">;</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
				<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">이분탐색 변수들은 long형이어야한다</span></strong>
    <ul>
      <li>랜선의 길이가 2^31-1이하이므로 랜선 두 개를 더하는 과정에서 int형을 초과한다. 따라서 long형이 필요하다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">이분 탐색을 이용한다</span></strong>
    <ul>
      <li>만들 수 있는 랜선 길이를 이분 탐색으로 구한다.</li>
      <li>이미 가지고 있는 랜선의 배열 array를 오름차순 정렬한다.</li>
      <li>구한 mid로 k개의 랜선을 만들 수 있는 지 확인한 후, 맞다면 그 중 최댓값을 max에 저장한다.</li>
      <li>이분 탐색이 끝나면 max를 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 이분 탐색: 숫자 카드 2</title>
	  <link>/blog//algo-boj10816</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj10816</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1920">https://www.acmicpc.net/problem/1920</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>카드 별 갯수도 세어야하므로 해쉬맵을 사용한다.</li>
  <li>key는 숫자, value는 카드 갯수로 하여 n개의 숫자 카드를 저장한다.</li>
  <li>m개의 카드를 배열에 저장한 후, 해쉬맵에 있으면 해당 value를 리턴하고, 없으면 0을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">temp</span><span class="o">))</span>
				<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">temp</span><span class="o">,</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
			<span class="k">else</span>
				<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">temp</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="s">" "</span><span class="o">);</span>
			<span class="k">else</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"0 "</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">해쉬맵을 사용한다</span></strong>
    <ul>
      <li>n개의 카드와 그 갯수를 모두 저장해야하므로 처음에는 클래스를 하나 만들거나, 인덱스를 카드 번호로 하고 원소값을 카드 숫자로 하여 계산할까 하다가, 그러면 n개의 카드를 저장하는 과정에서 해당 숫자가 이전에 저장되었는지 또 확인하는 것이 번거로워 해쉬맵을 사용하기로 했다.</li>
      <li>해쉬맵은 key가 중복되지 않게 저장하고 value에 해당 갯수를 저장할 수 있다.</li>
      <li>m개의 숫자 카드를 array에 저장한 후, 해쉬맵에 해당 key가 존재하면 그 value를 출력하고, 없으면 0을 출력한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<ul>
  <li>문제 분류는 이분 탐색이었기 때문에 다른 사람들이 짠 코드를 확인해보았는데, 인덱스를 카드 번호로 하여 구현한 경우가 많았다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 이분탐색_징검다리</title>
	  <link>/blog//algo-prog43236</link>
	  <author></author>
	  <pubDate>2019-12-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43236</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43236">https://programmers.co.kr/learn/courses/30/lessons/43236</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>바위 사이의 최소거리를 이분탐색으로 찾는다.</li>
  <li>바위 간의 거리가 mid보다 작으면 제거(카운트), 크다면 마지막 바위값을 저장하여 다음 바위와 거리 비교가 가능하게 한다.</li>
  <li>카운트&gt;n이면 mid가 큰 것이므로 줄이고, 반대면 늘린다.</li>
  <li>answer에는 mid들 중 최댓값을 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">distance</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">rocks</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rocks</span><span class="o">);</span><span class="c1">//이분탐색할 때는 정렬을 해야함</span>
         <span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">right</span><span class="o">=</span><span class="n">distance</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">remove</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//제거한 바위갯수</span>
         <span class="kt">int</span> <span class="n">mid</span><span class="o">;</span><span class="c1">//바위사이의 최소 거리</span>
         <span class="kt">int</span> <span class="n">lastRock</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//마지막 바위</span>
         <span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">){</span>
             <span class="n">mid</span><span class="o">=(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">rocks</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">mid</span><span class="o">&gt;</span><span class="n">rocks</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">lastRock</span><span class="o">)</span> <span class="n">remove</span><span class="o">++;</span>
                 <span class="k">else</span> <span class="n">lastRock</span><span class="o">=</span><span class="n">rocks</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
             <span class="o">}</span>
             <span class="k">if</span><span class="o">(</span><span class="n">distance</span><span class="o">-</span><span class="n">lastRock</span><span class="o">&lt;</span><span class="n">mid</span><span class="o">)</span> <span class="n">remove</span><span class="o">++;</span><span class="c1">//마지막바위와 도착지간의 거리 체크</span>

             <span class="k">if</span><span class="o">(</span><span class="n">remove</span><span class="o">&gt;</span><span class="n">n</span><span class="o">)</span> <span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
             <span class="k">else</span><span class="o">{</span>
                 <span class="n">answer</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">answer</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
                 <span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="n">remove</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
             <span class="n">lastRock</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191210_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">바위 사이의 최소 거리를 이분탐색으로 구한다.</span></strong>
    <ul>
      <li>이분탐색을 하기 위해서는 배열 정렬은 필수다.</li>
      <li>바위 사이의 최소 거리를 mid로 정해놓고, 이보다 작다면 최소 거리라 가정한 mid에 반례이므로 제거한다.</li>
      <li>바위를 제거할 경우 다음 바위에서 비교할 이전 바위의 값을 알고 있어야하므로 lastRock을 두어 제거하지 않았을 경우 현재까지 중에서 마지막인 바위값을 저장한다.</li>
      <li>마지막 바위와 도착지까지의 거리도 mid와 비교해야하므로 for문 다음에 if문을 추가한다.</li>
      <li>제거한 바위 갯수 remove가 n보다 크다면 거리 mid가 크다는 뜻이므로 줄이고, 반대라면 늘린다.</li>
      <li>answer에는 remove&lt;=n일때 최댓값을 저장한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>remove==n일때만 저장해야하는거 아닌가, 근데 그러면 테스트에서 틀린다. 아직 이유를 모르겠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>이분탐색 &gt; 징검다리 <a href="https://dokrsky.tistory.com/81">https://dokrsky.tistory.com/81</a></li>
  <li>이분탐색(binary search) <a href="https://webfirewood.tistory.com/108">https://webfirewood.tistory.com/108</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 이분탐색_예산</title>
	  <link>/blog//algo-prog43237</link>
	  <author></author>
	  <pubDate>2019-12-08T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43237</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43237">https://programmers.co.kr/learn/courses/30/lessons/43237</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>budgets를 오름차순 정렬한다.</li>
  <li>배열의 요청금액 합&lt;=M이면 제일 큰 값(최대의 예산을 리턴해야하므로)을 리턴한다.</li>
  <li>아니라면 이분탐색을 통해 중간값을 찾는다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">budgets</span><span class="o">,</span> <span class="kt">int</span> <span class="n">M</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">budgets</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="n">budgets</span><span class="o">[</span><span class="n">budgets</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">preMid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">bgt:</span><span class="n">budgets</span><span class="o">){</span>
            <span class="n">sum</span><span class="o">+=</span><span class="n">bgt</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">&lt;=</span><span class="n">M</span><span class="o">)</span> <span class="k">return</span> <span class="n">budgets</span><span class="o">[</span><span class="n">budgets</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span><span class="c1">//요청금액 그대로 배정 가능하므로 제일 큰 예산 리턴</span>

        <span class="c1">//모든 요청이 배정될 수 없는 경우</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
            <span class="n">mid</span><span class="o">=(</span><span class="n">min</span><span class="o">+</span><span class="n">max</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">preMid</span><span class="o">==</span><span class="n">mid</span><span class="o">){</span><span class="c1">//중간값 변동이 없다면</span>
                <span class="n">answer</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">bgt:</span><span class="n">budgets</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">bgt</span><span class="o">&gt;</span><span class="n">mid</span><span class="o">)</span> <span class="n">sum</span><span class="o">+=</span><span class="n">mid</span><span class="o">;</span><span class="c1">//상한값보다 요청금액이 크면 상한값을 배정</span>
                <span class="k">else</span> <span class="n">sum</span><span class="o">+=</span><span class="n">bgt</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">&gt;</span><span class="n">M</span><span class="o">)</span> <span class="n">max</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
            <span class="k">else</span> <span class="n">min</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
            <span class="n">preMid</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191208_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">모든 예산요청을 배정할 수 있다면 최댓값을 리턴한다.</span></strong>
    <ul>
      <li>요청한 금액을 그대로 배정하므로 제일 큰 예산인 budgets[마지막]을 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">이분탐색을 통해 상한액을 찾는다.</span></strong>
    <ul>
      <li>중간값을 계산하고, 배열을 순회하며 중간값보다 금액이 크다면 중간값을 부여한다.</li>
      <li>총액이 M을 넘어간다면 max를 mid으로 조정, 반대라면 min을 mid로 조정한다.</li>
      <li>mid의 값 변동이 없을 때까지 반복한다.</li>
      <li><span style="color:red">이때 min의 초기값은 0 또는 배열총액/갯수로 해야한다.</span> 배열의 첫 번째 값(최솟값)으로 초기화했더니 테스트9에서 실패했다. 최저예산&gt;(총예산/도시수)일 경우라는데 무슨 말인지 잘 모르겠고 그냥 최솟값이니까 0으로 초기화하는게 제일 깔끔한 것 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>이분탐색 코드는 어렵지 않은데 문제를 보면 이게 이분탐색 문제라는게 감이 안온다. 문제 유형 없었으면 전혀 몰랐을 듯.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 이분탐색_입국심사</title>
	  <link>/blog//algo-prog43238</link>
	  <author></author>
	  <pubDate>2019-12-08T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43238</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43238">https://programmers.co.kr/learn/courses/30/lessons/43238</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>심사관들에게 주어지는 시간을 이분탐색으로 찾는다.</li>
  <li>어떤 시간이 주어졌을 때, 심사관들이 몇 명을 심사할 수 있는지 계산하여 n보다 크면 시간을 줄이고, n보다 작으면 시간을 늘린다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">long</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">times</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">times</span><span class="o">);</span>
         <span class="kt">long</span> <span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="c1">//최적의 경우 1초로 초기화</span>
         <span class="kt">long</span> <span class="n">max</span><span class="o">=(</span><span class="kt">long</span><span class="o">)</span><span class="n">times</span><span class="o">[</span><span class="n">times</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]*</span><span class="n">n</span><span class="o">;</span><span class="c1">//최악의 경우로 초기화</span>
         <span class="kt">long</span> <span class="n">mid</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="kt">long</span> <span class="n">sum</span><span class="o">;</span>
         <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span>
         <span class="k">while</span><span class="o">(</span><span class="n">min</span><span class="o">&lt;=</span><span class="n">max</span><span class="o">){</span>
             <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
             <span class="n">mid</span><span class="o">=(</span><span class="n">min</span><span class="o">+</span><span class="n">max</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">time:</span><span class="n">times</span><span class="o">){</span>
                 <span class="n">sum</span><span class="o">+=</span><span class="n">mid</span><span class="o">/</span><span class="n">time</span><span class="o">;</span><span class="c1">//심사관 당 맡을 수 있는 입국자 수</span>
             <span class="o">}</span>
             <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">){</span><span class="c1">//더 맡을 수 있으므로 시간 줄임</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">mid</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">){</span>
                     <span class="n">answer</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
                 <span class="o">}</span>
                 <span class="n">max</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>                
             <span class="o">}</span>
             <span class="k">else</span><span class="o">{</span><span class="c1">//불가하므로 시간 늘림</span>
                 <span class="n">min</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191208_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">long max의 초기화에서 (long)으로 형변환이 필요하다.</span></strong>
    <ul>
      <li>이것 때문에 테스트3,5,7,8에서 실패했다.</li>
      <li>배열 times와 n은 모두 int형이고 두 곱이 int형을 초과할 수 있으므로 long 형변환이 필요하다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">mid가 주어졌을 때, 심사관 당 맡을 수 있는 입국자 수를 계산한다.</span></strong>
    <ul>
      <li>심사관 당 맡을 수 있는 입국자 수=추정시간 값/심사관 당 심사시간.</li>
      <li>모든 사람이 심사를 받는데 걸리는 시간을 mid라 할 때, mid당 심사위원들의 심사인원 수가 n보다 크다면 시간을 줄이고, 작다면 시간을 늘린다.</li>
      <li>이때 mid안에 n명 심사가 가능하다면 answer과 mid 중 최솟값을 저장한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>아직 이분탐색 문제의 유형을 잘 모르겠다. 언젠가는 감이 오겠지…?</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 입국심사 <a href="https://greenapple16.tistory.com/49">https://greenapple16.tistory.com/49</a></li>
  <li>프로그래머스_입국심사 <a href="https://woongsin94.tistory.com/185">https://woongsin94.tistory.com/185</a></li>
  <li>이분탐색(binary search) <a href="https://webfirewood.tistory.com/108">https://webfirewood.tistory.com/108</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
