<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>세넓코잘많</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] 백트래킹: 스타트와 링크</title>
	  <link>/blog//algo-boj14889</link>
	  <author></author>
	  <pubDate>2020-03-12T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14889</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14889">https://www.acmicpc.net/problem/14889</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>조합을 이용하여 만들 수 있는 팀의 경우의 수를 구한다.</li>
  <li>팀의 능력치 차를 계산하여 작은 값을 min에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">team</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sum</span><span class="o">(){</span>
		<span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">link</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
				<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
					<span class="n">start</span><span class="o">+=</span><span class="n">team</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
					<span class="n">start</span><span class="o">+=</span><span class="n">team</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]&amp;&amp;!</span><span class="n">visit</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
					<span class="n">link</span><span class="o">+=</span><span class="n">team</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
					<span class="n">link</span><span class="o">+=</span><span class="n">team</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="kt">int</span> <span class="n">gap</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">start</span><span class="o">-</span><span class="n">link</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="n">min</span><span class="o">&gt;</span><span class="n">gap</span><span class="o">)</span> <span class="n">min</span><span class="o">=</span><span class="n">gap</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">combination</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">r</span><span class="o">==</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">){</span>
			<span class="n">sum</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
				<span class="n">combination</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">team</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
				<span class="n">team</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">combination</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200312_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
처음에 시간초과가 발생하여 sum()에서의 2중for문 범위가 커서 그런가 했는데, combination()을 재귀호출하는 부분의 파라미터를 combination(idx, r+1)로 했기 때문이다. 그래서 체크했던 사람을 또 확인하는 경우가 생겨 시간초과가 발생했었다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>팀을 나누는 방법은 순서 상관없이 뽑으면 되므로 조합과 같다.</li>
      <li>따라서 팀을 나누기 위해 visit[]를 두어 true인 경우 start팀, false인 경우 link팀이라 가정한다.</li>
      <li>combination()에서 파라미터로 idx와 r을 넘긴다. 이때 idx는 이제 체크할 사람의 인덱스이고, r은 팀에 속한 사람 수이다. r이 n/2와 같아질 때, 두 팀이 짜여진 것이므로 sum()을 통해 두 팀의 능력치를 구하면 된다.</li>
      <li>이때 파라미터로 넘기는 idx가 시간초과를 방지하는 역할을 하는데, 그 이유는 팀을 구성하는 사람의 순서에 상관없이 뽑기만 하면 되는 것이므로(1,2나 2,1이나 같다) 이전에 체크했던 사람을 또 확인하는 일은 없도록 하기 위함이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준] 14889번 스타트와 링크 <a href="https://whereisusb.tistory.com/139">https://whereisusb.tistory.com/139</a></li>
  <li>백준 14889 스타트와 링크 Java <a href="https://dundung.tistory.com/100">https://dundung.tistory.com/100</a></li>
  <li>백준 14889. 스타트와 링크 :: 돼지개발자 <a href="https://jaejin89.tistory.com/73">https://jaejin89.tistory.com/73</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: 연산자 끼워넣기</title>
	  <link>/blog//algo-boj14888</link>
	  <author></author>
	  <pubDate>2020-03-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14888</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14888">https://www.acmicpc.net/problem/14888</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>배열을 이용하여 숫자와 연산자의 갯수를 저장한다.</li>
  <li>DFS를 이용하여 모든 경우의 수의 합을 구한다.</li>
  <li>이중 최댓값과 최솟값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">number</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">operator</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">min</span><span class="o">&gt;</span><span class="n">sum</span><span class="o">)</span> <span class="n">min</span><span class="o">=</span><span class="n">sum</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">max</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">)</span> <span class="n">max</span><span class="o">=</span><span class="n">sum</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">operator</span><span class="o">[</span><span class="mi">0</span><span class="o">]&gt;</span><span class="mi">0</span><span class="o">){</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">0</span><span class="o">]--;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">+</span><span class="n">number</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">0</span><span class="o">]++;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">operator</span><span class="o">[</span><span class="mi">1</span><span class="o">]&gt;</span><span class="mi">0</span><span class="o">){</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">1</span><span class="o">]--;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">-</span><span class="n">number</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">1</span><span class="o">]++;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">operator</span><span class="o">[</span><span class="mi">2</span><span class="o">]&gt;</span><span class="mi">0</span><span class="o">){</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">2</span><span class="o">]--;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">*</span><span class="n">number</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">2</span><span class="o">]++;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">operator</span><span class="o">[</span><span class="mi">3</span><span class="o">]&gt;</span><span class="mi">0</span><span class="o">){</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">3</span><span class="o">]--;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">/</span><span class="n">number</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
			<span class="n">operator</span><span class="o">[</span><span class="mi">3</span><span class="o">]++;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">number</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="n">operator</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">number</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">operator</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">number</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200311_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>연산자를 사용할 수 있다면 operator–하고 해당 연산자에 대한 결과값을 파라미터로 넘겨 다시 dfs()를 재귀호출한다.</li>
      <li>이때 결과값과 함께 다음 사용할 숫자 인덱스 번호도 같이 넘겨준다.</li>
      <li>하나의 식이 완성된다면 그 결과값이 max, min 조건에 만족하는지 확인한다.</li>
      <li>계산이 끝나 return되어 다시 재귀를 호출한 곳으로 복귀된 다음에는, 해당 연산자를 다음 식에서도 사용할 수 있게 하기 위해 연산자 갯수를 원상복구시킨다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 14888 연산자 끼워넣기 Java <a href="https://dundung.tistory.com/106">https://dundung.tistory.com/106</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (4)</title>
	  <link>/blog//algo-boj15652</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15652</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15652">https://www.acmicpc.net/problem/15652</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열이 없도록, 하지만 수열안에서는 숫자가 중복되어도 되므로 visit는 필요없다.</li>
  <li>시간 제한에 유의하여 Scanner 대신 BufferedReader, BufferedWriter를 이용한다.</li>
  <li>수열안에서 숫자는 앞에보다 같거나 큰 값이 나와야하므로 조건을 추가한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">bw</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">!=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">-</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">i</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		
		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_4.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>visit[]를 사용하지 않음으로써 같은 숫자도 다시 한 번 방문할 수 있게 한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">시간 제한에 유의하여 BufferedReader, BufferedWriter를 이용한다.</span></strong>
    <ul>
      <li>이때 bw.flush()로 버퍼의 값을 제대로 출력할 수 있게 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">수열은 비내림차순이어야 한다.</span></strong>
    <ul>
      <li>따라서 DFS()안의 for문에서 현재 array에 넣으려는 i의 값이 앞의 값보다 작다면 continue로 패스하도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15652] N과 M(4) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/39">https://fbtmdwhd33.tistory.com/39</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (3)</title>
	  <link>/blog//algo-boj15651</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15651</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15651">https://www.acmicpc.net/problem/15651</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열이 없도록, 하지만 수열안에서는 숫자가 중복되어도 되므로 visit는 필요없다.</li>
  <li>시간 제한에 유의하여 Scanner 대신 BufferedReader, BufferedWriter를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">bw</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		
		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_3.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>visit[]를 사용하지 않음으로써 같은 숫자도 다시 한 번 방문할 수 있게 한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">시간 제한에 유의하여 BufferedReader, BufferedWriter를 이용한다.</span></strong>
    <ul>
      <li>이때 bw.flush()로 버퍼의 값을 제대로 출력할 수 있게 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15651] N과 M(3) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/38">https://fbtmdwhd33.tistory.com/38</a></li>
  <li>백준 N과M(3) 15651 java <a href="https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM3-15651-java">https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM3-15651-java</a></li>
  <li>백준 15651 <a href="https://info-tech.netlify.com/posts/%EB%B0%B1%EC%A4%80-15651/">https://info-tech.netlify.com/posts/%EB%B0%B1%EC%A4%80-15651/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (2)</title>
	  <link>/blog//algo-boj15650</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15650</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15650">https://www.acmicpc.net/problem/15650</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 중복 없이 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열을 여러 번 출력하면 안되고, 오름차순 정렬해야하므로 다음 출력할 자리의 숫자는 이전에 출력한 자리 숫자보다 크도록 하면 된다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>중복을 제외하기 위해 visit[]를 이용하여 이미 사용한(방문한) 숫자는 true로 저장한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
      <li>재귀가 종료되면 해당 깊이에서의 계산이 끝났고, 다음 사용을 위해 visit[]를 false로 바꾸어 이후에 다시 방문 가능하도록 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS()의 for문 범위를 조정하여 중복없는 오름차순을 구현한다.</span></strong>
    <ul>
      <li>1 2를 출력하고 2 1을 출력하기 전에 1 2가 출력되었다는 것을 확안히가보다는, 다음에 출력할 자리의 숫자는 이전에 출력할 자리 숫자보다 크도록 조정하면 된다.</li>
      <li>따라서 마지막으로 넣은 숫자 i 다음 값을 파라미터로 넘기면서 재귀를 호출하면, 그 수부터 순열을 만들면 중복이 없는 오름차순을 출력할 수 있다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 N과 M(2) 15650 java <a href="https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM2-15650-java">https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM2-15650-java</a></li>
  <li>[백준,BOJ 15649] N과 M(2) (JAVA 구현) (N과M) <a href="https://fbtmdwhd33.tistory.com/37">https://fbtmdwhd33.tistory.com/37</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (1)</title>
	  <link>/blog//algo-boj15649</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15649</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15649">https://www.acmicpc.net/problem/15649</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 중복 없이 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>중복을 제외하기 위해 visit[]를 이용하여 이미 사용한(방문한) 숫자는 true로 저장한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
      <li>재귀가 종료되면 해당 깊이에서의 계산이 끝났고, 다음 사용을 위해 visit[]를 false로 바꾸어 이후에 다시 방문 가능하도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15649] N과 M(1) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/36">https://fbtmdwhd33.tistory.com/36</a></li>
  <li>[JAVA] 백준 알고리즘 15649번 문제풀이 (N과M) <a href="https://choseongho93.tistory.com/155">https://choseongho93.tistory.com/155</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N-Queen</title>
	  <link>/blog//algo-boj9663</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj9663</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/9663">https://www.acmicpc.net/problem/9663</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>체스판 위에 퀸의 위치를 저장할 이차원배열 visit를 생성한다.</li>
  <li>DFS를 이용하여 모든 경우의 수를 찾되, 퀸의 조건에 맞게 앞 뒤 좌우 대각선에 퀸이 존재할 경우 탐색을 종료한다.</li>
  <li>퀸을 놓을 수 있는 방법의 수를 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">answer</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span> <span class="n">visit</span><span class="o">[][];</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">==</span><span class="n">n</span><span class="o">){</span>
			<span class="n">answer</span><span class="o">++;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">check</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">i</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">y</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//행</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">x</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//열</span>
            <span class="c1">//오른쪽 아래로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//왼쪽 위로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//왼쪽 아래로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//오른쪽 위로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
		<span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_5.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>퀸을 놓을 수 있는 곳은 true로 바꾸고 퀸을 놓는다.</li>
      <li>퀸을 놓기 전에, check()를 통해 놓을 수 있는 곳인지 체크한다.</li>
      <li>한 행, 열에는 하나의 퀸만 놓을 수 있다.</li>
      <li>말을 놓은 후에는 다음 행에서 놓을 수 있는 위치를 찾기 위해 재귀를 호출한다. 이때 파라미터는 다음 행인 x+1이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">check()에서 해당 위치에 퀸을 놓을 수 있는지 확인한다.</span></strong>
    <ul>
      <li>파라미터로 받은 (x,y)를 기준으로 같은 행, 열, 대각선에 true로 표시되어 퀸이 존재하는 곳이 있다면 false를 리턴하여 (x,y)에는 퀸을 놓을 수 없다고 알려준다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 9663번 N-Queen :: 마이구미 <a href="https://mygumi.tistory.com/199">https://mygumi.tistory.com/199</a></li>
  <li>[백준] 9663번 N-Queen <a href="https://whereisusb.tistory.com/142">https://whereisusb.tistory.com/142</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
