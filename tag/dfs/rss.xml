<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_여행경로 (보류)</title>
	  <link>/blog//algo-prog43164</link>
	  <author></author>
	  <pubDate>2019-12-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43164</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43164">https://programmers.co.kr/learn/courses/30/lessons/43164</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>배열 tickets을 tickets[i][0]오름차순으로, 같다면 tickets[i][1]오름차순으로 정렬한다.</li>
  <li>“ICN”에서 시작해서 갈 수 있는 도착지를 따라 모든 항공권을 이용한다.</li>
  <li>중간에서 끝나면 -1을 리턴하고, 방문했던 곳을 다시 false로 초기화하면서 모든 곳을 방문하는 루트를 찾는다(재귀이용).</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span><span class="c1">//방문 체크</span>
    <span class="kt">int</span> <span class="n">answerIdx</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="c1">//answer순회 인덱스</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[][]</span> <span class="n">tickets</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">tickets</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">tickets</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>

        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">tickets</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">[]&gt;(){</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">s2</span><span class="o">){</span><span class="c1">//[i][0]오름차순 정렬, 같다면 [i][1]오름차순 정렬</span>
                <span class="kt">int</span> <span class="n">result</span><span class="o">=</span><span class="n">s1</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="n">s1</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">:</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">tickets</span><span class="o">));</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="s">"ICN"</span><span class="o">;</span><span class="c1">//출발지</span>
        <span class="n">dfs</span><span class="o">(</span><span class="s">"ICN"</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">tickets</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">answer</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">String</span> <span class="n">depart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="n">String</span><span class="o">[][]</span> <span class="n">tickets</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">error</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">tickets</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//모든 티켓 체크</span>
            <span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
            <span class="c1">//방문하지 않았다면</span>
            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">depart</span><span class="o">)){</span><span class="c1">//현재 위치에서 갈 수 있는 곳이라면</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">answerIdx</span><span class="o">++]=</span><span class="n">tickets</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span><span class="c1">//도착지 저장</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">answer</span><span class="o">));</span>
                <span class="n">error</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">tickets</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">tickets</span><span class="o">);</span><span class="c1">//재귀호출</span>
                <span class="k">if</span><span class="o">(</span><span class="n">error</span><span class="o">==-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//재귀리턴값이 -1이라면 중간에 길이 끊긴것</span>
                    <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span><span class="c1">//사용 취소</span>
                    <span class="n">answerIdx</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">tickets</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//방문하지 않은 곳이 있는데 티켓순회가 끝났을 경우(중간에서 루트가 끊겼다는 의미)</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191207_1.PNG" alt="실행결과" />
실패٩(T◊T)۶</p>

<h3 id="4-설명">4. 설명</h3>

<h2 id="보류"><span style="color:navy">보류</span></h2>
<p>테스트1에서 틀린다. 4개중에 하나만 패스 못하니까 이 코드를 쉽게 놓을 수가 없다. 일단 보류하고 넘어간다.나 이거 처음으로 DFS 스스로 생각해서 푼 거란 말이야 미련을 버릴 수가 없어…</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_단어 변환</title>
	  <link>/blog//algo-prog43163</link>
	  <author></author>
	  <pubDate>2019-12-06T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43163</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43163">https://programmers.co.kr/learn/courses/30/lessons/43163</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>words에 target이 없다면 변환은 불가하다.</li>
  <li>있을 경우 변환 과정을 DFS(재귀함수)로 찾는다.</li>
  <li>words를 순회하며 방문하지 않은 words[i]라면, begin에서 words[i]로 갈 수 있는지 확인한다.</li>
  <li>갈 수 있다면 words[i]로 재귀함수를 호출한다.</li>
  <li>모든 변환 과정을 계산, 가장 최솟값을 answer에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">begin</span><span class="o">,</span> <span class="n">String</span> <span class="n">target</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">target</span><span class="o">)){</span><span class="c1">//words에 target이 있을때만 변환가능</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">words</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">String</span> <span class="n">begin</span><span class="o">,</span> <span class="n">String</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//words 순회</span>
            <span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span><span class="c1">//방문한 곳이라면 패스</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">//방문하지 않았다면</span>
            <span class="k">if</span><span class="o">(</span><span class="n">begin</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">target</span><span class="o">)){</span><span class="c1">//변환 완료했다면</span>
                <span class="n">answer</span><span class="o">=</span><span class="n">answer</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="n">cnt</span> <span class="o">:</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">answer</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span><span class="c1">//최솟값 저장</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">compareWords</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span><span class="c1">//begin-&gt;words[i]가능하다면</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">target</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">words</span><span class="o">);</span><span class="c1">//words[i]로 변환, 재귀호출</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">compareWords</span><span class="o">(</span><span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">){</span><span class="c1">//변환가능한지 확인</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)){</span>
                <span class="n">cnt</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">//변환할 수 있는 경우는 한 개의 알파벳만 다를 때임</span>
        <span class="k">return</span> <span class="n">cnt</span><span class="o">==</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191206_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">words에 target이 있어야 변환할 수 있다.</span></strong>
    <ul>
      <li>없다면 0을 리턴하고 끝낸다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS이므로 재귀함수를 이용한다.</span></strong><br />
<img src="./assets/images/191206_2.PNG" alt="실행결과" width="300" height="300" />
    <ul>
      <li>hit에서 cog까지 깊이탐색이므로 DFS를 사용한다.</li>
      <li>cog로 갈 수 있는 모든 경우의 수를 cnt를 이용해 찾고, 이 중 최솟값을 전역변수 answer에 저장한다.</li>
      <li>visit[i]는 words[i]가 방문한 곳인지를 저장한다.</li>
      <li>방문한 곳이라면 다음 단어로 넘어간다.</li>
      <li>방문하지 않은 곳이라면 현재 begin에서 words[i]로 변환할 수 있는지 compareWords()로 체크한다. true를 리턴받았다면 해당 visit[i]를 변경하고, 이제 begin은 words[i]가 되어 다시 재귀함수를 호출한다. 이때 변환이 일어났으므로 파라미터 cnt+1한다.</li>
      <li>최종적으로 target에 도달하면 현재 answer의 값을 체크한 후 아직 값 저장이 안되었다면 cnt를, 기존 값이 있다면 더 작은 값을 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">변환이 가능한 경우는 단 한개의 알파벳만 다를 경우이다.</span></strong>
    <ul>
      <li>이를 체크하기 위한 compareWords()함수를 두어 각 자리에 대해 같은 알파벳을 가지고 있는지 확인한다.</li>
      <li>최종 cnt값이 s1.length-1(단 하나만 다르므로.)이라면 true, 아니라면 false를 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>많은 사람들의 코드를 참고했다. 대부분 풀이 방식은 비슷했다. 처음에는 dot에서 dog, lot중 어떤 것을 선택해야할 지에 대한 코딩이 필요하다고 생각했는데, 둘 중 선택하는 코드를 쓰지 않고 그냥 모든 방법을 택해서 그 중 작은 값을 리턴하게 한다는 게 뭔가 띵했다.<br />
그리고 재귀함수에서 리턴은 아직도 어렵다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 단어 변환 (DFS) <a href="https://artineer.tistory.com/123">https://artineer.tistory.com/123</a></li>
  <li>DFS programmers 프로그래머스 알고리즘 자바 ‘단어 변환’ 문제풀이 <a href="https://geehye.github.io/programmers-dfs-bfs-03/#">https://geehye.github.io/programmers-dfs-bfs-03/#</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_네트워크</title>
	  <link>/blog//algo-prog43162</link>
	  <author></author>
	  <pubDate>2019-12-05T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43162</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43162">https://programmers.co.kr/learn/courses/30/lessons/43162</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>연결된 노드를 끝까지 찾아가야하므로 DFS이다. 따라서 재귀함수를 사용한다.</li>
  <li>solution()에서 n개의 노드들을 확인한다. 아직 방문하지 않았다면 방문한다.</li>
  <li>재귀로 현재 노드와 연결된 것들도 모두 방문한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">computers</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//n개의 노드 체크</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span><span class="c1">//아직 방문하지 않았다면</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">computers</span><span class="o">);</span><span class="c1">// 현재노드와 연결된 노드들도 찾아서 방문</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">me</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">computers</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//나와 연결된 노드들을 모두 확인</span>
            <span class="k">if</span><span class="o">(</span><span class="n">computers</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]==</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="n">visit</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span><span class="c1">//나와 연결되어있는데 방문하지 않았다면</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//방문</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">computers</span><span class="o">);</span><span class="c1">//방문한 곳을 기준으로 재귀호출</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191205_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">메인문에서 모든 노드들을 체크한다.</span></strong>
    <ul>
      <li>1부터 n까지 노드들을 확인한다.</li>
      <li>아직 방문하지 않았다면 그 노드를 기준으로 연결된 노드들을 확인한다.</li>
      <li>현재 노드와 연결된 노드들을 찾는 것은 네트워크 하나를 찾는 것과 같으므로 answer++한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">연결된 노드를 확인하기 위해 재귀함수를 사용한다.</span></strong>
    <ul>
      <li>특정 노드와 연결된 노드들을 모두 찾아야 하므로 DFS이다(나와 연결된 노드의 끝까지 방문해야하기때문).</li>
      <li>solution()에서 i번째 노드와 연결된 것들을 찾기위해 dfs를 호출하면, computers[i]행의 원소들을 순회하며 연결된 노드들을 찾고 방문한다.</li>
      <li>연결된 노드를 찾으면 그 노드를 기준으로 다시 dfs를 재귀호출하여 그 노드와 연결된 노드들을 또 찾는다.</li>
      <li>이렇게 하면 마지막까지 도달하게 되고, 그 과정에서 방문한 노드들은 true가 되어 중복 방문을 피할 수 있게 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제가 노드들의 방문이길래 당연히 BFS인줄 알았다. 분발하자T_T</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][JAVA] 네트워크 <a href="https://jayrightthere.tistory.com/entry/DFSJAVA-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">https://jayrightthere.tistory.com/entry/DFSJAVA-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_타겟 넘버</title>
	  <link>/blog//algo-prog43165</link>
	  <author></author>
	  <pubDate>2019-12-05T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43165</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43165">https://programmers.co.kr/learn/courses/30/lessons/43165</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS문제이므로 재귀를 이용한다.</li>
  <li>덧셈이나 뺄셈을 이용해 숫자를 계산하므로 이 두가지의 경우에 따라 재귀를 호출하면 된다.</li>
  <li>배열 numbers의 값을 모두 사용하면 숫자가 target과 맞는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">){</span><span class="c1">//numbers숫자를 모두 사용했다면</span>
            <span class="k">return</span> <span class="n">sum</span><span class="o">==</span><span class="n">target</span><span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//target과 같은지에 따라 값 리턴</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span><span class="c1">//덧셈 또는 뺄셈으로 재귀호출. 두 호출 끝의 리턴값을 더해서 answer세야하므로 +</span>
            <span class="k">return</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">+</span><span class="n">numbers</span><span class="o">[</span><span class="n">idx</span><span class="o">])+</span><span class="n">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">-</span><span class="n">numbers</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191205_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">모든 인덱스를 방문해야하므로 DFS를 사용한다.</span></strong>
    <ul>
      <li>배열 numbers의 원소을 더하거나 빼서 target이 되는 모든 수를 찾아야하므로 DFS를 이용한다.</li>
      <li>DFS는 재귀나 스택을 사용하는데, 이 문제에서는 재귀를 썼다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">인덱스가 마지막 노드까지 방문했느냐에 따라서 다음 재귀를 호출할지 결정한다.</span></strong>
    <ul>
      <li>숫자를 모두 사용했다면 지금까지 계산한 sum이 target과 맞는지 확인한다. 맞다면 answer++하기위해 1을 리턴, 아니라면 0을 리턴한다.</li>
      <li>아직 다음 노드가 존재할 경우 현재 원소의 값을 sum에 더하거나 뺀다(4번째 파라미터). 그리고 다음 방문을 위해 idx를 하나 증가(3번째 파라미터)시킨다.</li>
      <li>이때 재귀호출한 두 함수 사이의 +는, 각 경우에 따른 재귀 리턴값을 모두 더해서 방법의 수를 계산하기 위함이다. 최종적으로 solution함수에서 호출한 dfs(numbers, target, 0, 0)에 총 방법의 수가 리턴된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>재귀로 풀어야겠다고 느낌은 왔는데, 안에 파라미터를 어떻게 사용할지, 점화식은 어떻게 작성해야할지 헷갈린다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스 알고리즘] 타켓넘버 - 깊이탐색 DFS <a href="https://lkhlkh23.tistory.com/74">https://lkhlkh23.tistory.com/74</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_N으로 표현</title>
	  <link>/blog//algo-prog42895</link>
	  <author></author>
	  <pubDate>2019-11-29T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42895</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42895">https://programmers.co.kr/learn/courses/30/lessons/42895</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<p>=&gt;DFS를 이용한다.</p>
<ol>
  <li>재귀함수를 통해 사칙연산을 수행한다.</li>
  <li>cnt(숫자N을 사용한 횟수)가 8보다 크면 -1을 리턴한다.</li>
  <li>숫자 만들기에 성공하면 answer에 최솟값을 저장한다(처음이라면 그냥 저장, 값이 있다면 비교 후 더 작은 값을 저장).</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//전역변수로 설정</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prev</span><span class="o">){</span>
         <span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="mi">8</span><span class="o">){</span><span class="c1">//8번안에 끝내야한다</span>
             <span class="n">answer</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>
             <span class="k">return</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">if</span><span class="o">(</span><span class="n">prev</span><span class="o">==</span><span class="n">number</span><span class="o">){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">answer</span><span class="o">==-</span><span class="mi">1</span><span class="o">||</span><span class="n">cnt</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">){</span><span class="c1">//처음이거나 기존answer보다 더 최솟값을 발견했다면</span>
                 <span class="n">answer</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
                 <span class="k">return</span><span class="o">;</span>
             <span class="o">}</span>            
         <span class="o">}</span>
         <span class="kt">int</span> <span class="n">NN</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">-</span><span class="n">cnt</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//8번안에 끝내야하므로</span>
             <span class="n">NN</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="n">NN</span><span class="o">+</span><span class="n">N</span><span class="o">;</span><span class="c1">//숫자 N으로 만들 수 있는 수</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">+</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">-</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">*</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">/</span><span class="n">NN</span><span class="o">);</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191129_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">answer은 전역변수여야하고, 0으로 초기화하면 안된다.</span></strong>
    <ul>
      <li>answer을 solution()과 dfs()함수에서 사용해야하므로 전역변수로 설정한다. 재귀호출이 이루어지므로 메소드의 파라미터에 넣어 사용하면 값이 재귀를 호출한 곳에 따라서 달라지므로 안된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">for문과 재귀함수를 통해 가능한 모든 사칙연산을 수행한다.</span></strong>
    <ul>
      <li>일의자리숫자 N을 가지고 할 수 있는 사칙연산을 모두 수행한다.</li>
      <li>그 다음은 십의자리숫자를 가지고 사칙연산이 가능하다. 따라서 NN이라는 변수에 숫자 N으로 만들 수 있는 수를 저장하여 사용한다.</li>
      <li>이때 for문의 범위는 8-cnt번으로 제한한다. 위 문제는 cnt가 8번 안에 만족시켜야한다(그 이상이면 맨 위에서 -1을 리턴한다). i&lt;8로 작성하면 i는 사용횟수를 나타내는 것이 아니므로 cnt가 재귀를 통해 8번이 넘게 반복하게 된다. 따라서 8-cnt로 N의 사요이 8번을 넘어가지 않게 해야한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">prev&gt;number일때 return하는 코드는 작성하면 안된다.</span></strong>
    <ul>
      <li>무심결에 prev가 number보다 커지면 number를 만족시킬 수 있는 방법은 없다고 생각하여 예외처리 코드를 작성했었는데, prev에서 뺄셈이나 나눗셈으로 다시 number에 가까워(같아)질 수 있는 방법이 있으므로 작성하면 안된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드를 봤을때는 되게 간단해보이는데 문제는 그렇지 않았다. 그냥 문제를 주고 풀어라 해도 노가다로 뛸 판에 코딩하라니까 더 어려웠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][JAVA] N으로 표현 <a href="https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84">https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84</a></li>
  <li>[Lv3] N으로 표현 <a href="https://ydeer.tistory.com/42">https://ydeer.tistory.com/42</a></li>
  <li>[그래프] DFS와 BFS 구현하기 :: 마이구미 <a href="https://mygumi.tistory.com/102">https://mygumi.tistory.com/102</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
