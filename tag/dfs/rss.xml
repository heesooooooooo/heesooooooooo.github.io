<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>세넓코잘많</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS): 여행경로</title>
	  <link>/blog//algo-prog43164</link>
	  <author></author>
	  <pubDate>2020-10-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43164</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43164">https://programmers.co.kr/learn/courses/30/lessons/43164</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용하여 티켓 경로를 찾는다</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="o">;</span> <span class="c1">// 티켓 수</span>
    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span> <span class="c1">// 최종 경로 저장</span>
    <span class="n">String</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span> <span class="c1">// 티켓 참조 변수</span>
    
    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[][]</span> <span class="n">tickets</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        
        <span class="n">n</span><span class="o">=</span><span class="n">tickets</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">=</span><span class="n">tickets</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">tickets</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"ICN"</span><span class="o">)){</span> <span class="c1">// 시작</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> <span class="c1">// 티켓 사용</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">tickets</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">,</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="s">"ICN "</span><span class="o">));</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span> <span class="c1">// 사용 안 할 경우</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">);</span> <span class="c1">// 알파벳기준 오름차순 정렬</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 첫번째 값 리턴</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">String</span> <span class="n">dept</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">){</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">dept</span><span class="o">+</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 방문</span>
        <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">n</span><span class="o">){</span> <span class="c1">// 경로 생성 완료</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span> <span class="c1">// 티켓들 체크</span>
            <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">dept</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span> <span class="c1">// 다음 티켓 찾음</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> <span class="c1">// 티켓 사용</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sb</span><span class="o">);</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span> <span class="c1">// 사용 안 할 경우</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">4</span><span class="o">,</span> <span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201022_2.PNG" alt="실행결과" />
🤟 성공 🤟<br />
가능한 경우가 여러 개이면 알파벳 순서로 움직여라길래 미리 comparator를 이용하여 sort후 사용하려고 했으나 잘 안됐다.<br />
그리고 dfs 호출 전 visit 여부를 관리해야 하는지, 들어가서 해야 하는지 헷갈린다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">for문을 돌며 시작점을 체크한다</span></strong>
    <ul>
      <li>ICN인 곳을 찾아서 순회를 시작한다.</li>
      <li>해당 티켓을 썼으므로 visit[i]는 true로 바꾸고, dfs()를 이용하여 dest를 다시 dept로 가지는 곳을 찾는다.</li>
      <li>ICN을 찾았지만 사용하지 않을 수도 있다. 따라서 dfs()후에 false로 처리하여 사용하지 않는다.</li>
      <li>dfs()를 다 돌고 나면 모든 경우가 list에 저장된다. 이를 알파벳 순 오름차순으로 정렬하면 0번째 값이 정답이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS</span></strong>
    <ul>
      <li>파라미터 dept는 이전에 dest였으므로 sb에 넣는다.</li>
      <li>idx는 sb에 저장된 갯수로, n개가 되면 모든 곳을 다 방문한 것이므로 list에 넣고 종료한다.</li>
      <li>아니라면, tickets를 다시 돌며 다음 티켓을 찾는다.</li>
      <li>해당 티켓을 쓸 경우와 아닐 경우를 나눠서 짠다.</li>
      <li>dfs로 방문 호출하고 난 뒤에 sb에서 삭제해야 한다. for문 밖에서 지우면 지금 위치는 방문하지 않았다는 것인데, 그러면 지금 위치 이전의 출발지는 방문하고 지금 위치는 방문하지 않는다는 모순이 생기기 때문이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 여행경로 (java)(43164) <a href="https://youjourney.tistory.com/111">https://youjourney.tistory.com/111</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/LeetCode] Top 100 Liked Question: 79. Word Search</title>
	  <link>/blog//algo-leet79</link>
	  <author></author>
	  <pubDate>2020-09-26T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-leet79</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://leetcode.com/problems/word-search/">https://leetcode.com/problems/word-search/</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용한다.</li>
  <li>시작 지점을 찾고, 거기서 DFS를 돌린다. 만족하면 종료, 아니라면 다른 시작점이 있는지 찾는다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">m</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">w</span><span class="o">;</span>
    <span class="kt">char</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">exist</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">,</span> <span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">m</span><span class="o">=</span><span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="c1">// 행</span>
        <span class="n">n</span><span class="o">=</span><span class="n">board</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="c1">// 열</span>
        <span class="n">w</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="c1">// 문자열 길이</span>
        
        <span class="n">array</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span> <span class="c1">// word를 문자 하나하나 쪼개기</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="c1">// 시작점을 찾았고, 거기서 DFS한 결과가 참이면</span>
                <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]==</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">],</span> <span class="n">board</span><span class="o">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>    
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">,</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">w</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// word 찾기 완료</span>
        
        <span class="c1">// 배열을 벗어나거나, 방문한 곳이거나, 찾는 문자가 아니라면</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">x</span><span class="o">&gt;=</span><span class="n">m</span> <span class="o">||</span> <span class="n">y</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">y</span><span class="o">&gt;=</span><span class="n">n</span> <span class="o">||</span> <span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">||</span> <span class="n">board</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]!=</span><span class="n">array</span><span class="o">[</span><span class="n">idx</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
        
        <span class="c1">// idx번째 문자가 일치</span>
        <span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> <span class="c1">// 사용</span>
        <span class="c1">// 현재 위치에서 갈 수 있는 경우 다 체크</span>
        <span class="kt">boolean</span> <span class="n">up</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">board</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">down</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">board</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">left</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">board</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">right</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">board</span><span class="o">);</span>
        
        <span class="c1">// 하나라도 true면 true</span>
        <span class="k">if</span><span class="o">(</span><span class="n">up</span> <span class="o">||</span> <span class="n">down</span> <span class="o">||</span> <span class="n">left</span> <span class="o">||</span> <span class="n">right</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span> <span class="c1">// (x,y)를 사용하지 않는 경우를 위함</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200926_7.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">시작 지점을 찾는다</span></strong>
    <ul>
      <li>board에서 시작 지점을 찾는다. 거기서부터 DFS를 시작한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>일단 특정 위치에서 다음으로 타고타고 넘어가는 문제는 보통 DFS이다. 거기다가 상하좌우로 움직이는 거면 많이 익숙쓰</li>
      <li>파라미터 x, y는 현재 내 위치, idx는 word(String 체크를 편하게 하기 위해서 char 배열로 바꿨다)에서 체크할 곳, visit는 원소 방문여부 저장하는 배열이다.</li>
      <li>dfs()로 word를 체크한다. idx==w이면 문자열 체크가 무사히 끝났다는 것이므로 true를 리턴한다.</li>
      <li>현재 위치 (x,y)까지는 word의 idx까지의 문자가 일치한다는 것이다. 따라서 지금 위치에서 상하좌우 중에 다음 문자와 일치하는 곳이 있는지 체크한다.</li>
      <li>넷 중 하나라도 true이면 된다.</li>
      <li>위에까지는 (x,y)를 사용한다는 가정 하에 진행한 것이다. (x,y)를 사용하지 않고 그냥 넘어갈 수도 있으므로, visit[x][y]=false로 처리하여 이 경우를 체크한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 가르침</title>
	  <link>/blog//algo-boj1062</link>
	  <author></author>
	  <pubDate>2020-07-14T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1062</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1062">https://www.acmicpc.net/problem/1062</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="0-문제-요약">0. 문제 요약</h3>
<ul>
  <li>학생들이 읽을 수 있는지 확인할 단어 n개, 선생님이 가르칠 글자 k개.</li>
  <li>k는 최소 5이상(antic, 시작과 끝 단어 규칙)이어야 한다. 왜냐하면 antic도 가르치지 않는다면 읽을 수 있는 단어가 없기 때문이다.</li>
  <li>DFS로 읽을 수 있는 k-5개의 알파벳을 선택해 모든 경우의 수를 따진 후, 그것에 따라 n개의 단어는 몇 개 읽을 수 있는지 체크한다.</li>
  <li>모든 경우의 수 중 읽을 수 있는 단어 최댓값을 리턴한다.</li>
</ul>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>시작과 끝의 “anta”, “tica”는 지우고 단어들을 저장한다.</li>
  <li>boolean[] alpha로 antic는 true로 고정시켜놓고, DFS로 k-5개의 알파벳을 선택이 완료되면 n개의 단어 중 읽을 수 있는 개수를 체크한다.</li>
  <li>Math.max로 이 중 최댓값을 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span><span class="n">k</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">alpha</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">word</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span><span class="c1">//k개 선택끝났으니까 읽을 수 있는 단어들 체크</span>
			<span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">String</span> <span class="n">wordi</span><span class="o">=</span><span class="n">word</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="kt">boolean</span> <span class="n">flag</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">wordi</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="k">if</span><span class="o">(!</span><span class="n">alpha</span><span class="o">[</span><span class="n">wordi</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">])</span> <span class="o">{</span>
						<span class="n">flag</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
						<span class="k">break</span><span class="o">;</span>
					<span class="o">}</span>
				<span class="o">}</span>
				<span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="n">temp</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">26</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//k개 선택해야함</span>
			<span class="k">if</span><span class="o">(</span><span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()-</span><span class="mi">5</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
		<span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">k</span><span class="o">==</span><span class="mi">21</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">word</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">temp</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="n">word</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">temp</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="n">temp</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">4</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'a'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'c'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'i'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'n'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'t'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200712_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
flag를 사용하지 않고 다른 방식을 이용했더니 틀렸다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">k 크기를 먼저 체크한다</span></strong>
    <ul>
      <li>k는 가르칠 알파벳 수로, 무조건 5보다 커야한다. 왜냐하면 antic는 꼭 가르쳐야하기 때문에, 이보다 작으면 모순이다.</li>
      <li>따라서 처음 입력받을때, 필수 antic를 제외한 새로 배울 알파벳 개수를 저장하기 위해 k=k-5한다.</li>
      <li>k==21은 사실 k=26을 입력받은 것이므로, 이것은 모든 알파벳을 가르친다는 뜻이다. 따라서 어떤 단어가 입력되어도 다 읽을 수 있으므로 n을 리턴하여 입력받은 단어 n개를 모두 읽을 수 있다고 출력한다.</li>
      <li>위 조건에서 걸러지지 않는다면, DFS로 모든 경우의 수를 따진다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS로 k개의 읽을 수 있는 알파벳의 모든 경우의 수를 따진다</span></strong>
    <ul>
      <li>DFS로 a~z까지 모두 체크하며 알파벳 k개를 선택한다. 이때 antic는 k개 선택에서 당연히 제외된다. 왜냐하면 새로 배우는 알파벳이 아니기 때문이다.</li>
      <li>antic 제외 k개 선택이 끝났으면 n개의 단어를 체크하며 읽을 수 있는지 확인한다.</li>
      <li>단어 word의 알파벳을 하나씩 체크하며 배우지 않은 알파벳이라면 flag=false후 break로 탈출하여 해당 word는 카운트하지 않도록 한다.</li>
      <li><img src="./assets/images/200714_2.PNG" alt="실행결과" /> 
처음에는 word의 알파벳 체크를 위해 위와 같이 처음 보는 알파벳이면 break로 탈출하여 다음 word로 넘어가고, break문에 걸리지 않았다는 뜻은 word의 알파벳이 모두 아는 것이므로 마지막 알파벳까지 확인을 마쳤다면 temp++하도록 짰는데, 여기서 오류가 발생했다. “antatica”인 경우 main의 substring에 의해 word에 ““로 저장되고, 이 경우 for문의 j조건에 만족하지 않아 temp++되지 않는다. 읽을 수 있는 단어임에도 불구하고 말이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[Algorithm] 백준 1062 가르침 java <a href="https://velog.io/@leeinae/Algorithm-%EB%B0%B1%EC%A4%80-1062-%EA%B0%80%EB%A5%B4%EC%B9%A8-java">https://velog.io/@leeinae/Algorithm-%EB%B0%B1%EC%A4%80-1062-%EA%B0%80%EB%A5%B4%EC%B9%A8-java</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 종이 조각</title>
	  <link>/blog//algo-boj14391</link>
	  <author></author>
	  <pubDate>2020-07-12T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14391</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14391">https://www.acmicpc.net/problem/14391</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용하여 모든 경우를 다 해본다.</li>
  <li>visit한 곳은 가로로 숫자를 만들고, 아니라면 세로 숫자로 만든다.</li>
  <li>모든 경우의 수 중 가장 큰 값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span><span class="c1">//탐색 끝</span>
			<span class="n">sum</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">y</span><span class="o">&gt;=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span><span class="c1">//한 행 체크 끝났으므로 다음 행 이동</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//가로 숫자로 사용</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span><span class="c1">//세로 숫자로 사용</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//가로 숫자 계산</span>
			<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">temp</span><span class="o">*=</span><span class="mi">10</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">+=</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="o">{</span>
					<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//세로 숫자 계산</span>
			<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">temp</span><span class="o">*=</span><span class="mi">10</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">+=</span><span class="n">map</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="o">{</span>
					<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200712_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>n, m이 최대 4이므로 모든 경우를 다 확인해도 시간 초과가 발생하지 않는다.</li>
      <li>dfs에서 재귀로 모든 원소를 다 탐색한다.</li>
      <li>한 행에서의 체크가 모두 끝났다면 다음 행으로 넘기고, 마지막 행까지 체크가 끝났다면 sum()을 호출하여 숫자 계산을 한다.</li>
      <li>visit[i][j]가 true라면 그 숫자는 가로 숫자로 사용한다는 뜻이고, false라면 세로로 사용한다는 뜻이다. 따라서 true와 false일 때 둘 다 dfs()를 불러 모든 경우를 확인해야 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">숫자를 계산한다</span></strong>
    <ul>
      <li>가로 숫자와 세로 숫자를 따로 계산해준다.</li>
      <li>가로 숫자는 행을 기준으로 가로(true)인 곳을 찾아 누적한다.</li>
      <li>이때 숫자의 자리수를 생각해야하므로, 이전까지의 합 temp에 *10하여 자리를 한 단계 올린 뒤, 현재 값을 더한다.</li>
      <li>현재 숫자가 지금 계산하는 조건(가로/세로)이 아니라면, 여기서 이전까지의 숫자들이 끝나는 것이므로 result에 누적한 후, 다음 숫자를 위해 0으로 초기화한다.</li>
      <li>j탐색이 모두 끝나면 한 행이 끝난 것이므로 지금까지의 temp를 result에 저장한다. 어짜피 위의 else문에서 저장했다고 하더라도, temp=0으로 다시 초기화되었으므로 이 코드를 실행한들 0이 더해지므로 큰 상관이 없다.</li>
      <li>세로는 열을 기준으로 체크하며, 기본적인 틀은 가로와 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준] 14391번 종이 조각 <a href="https://whereisusb.tistory.com/230">https://whereisusb.tistory.com/230</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 스도쿠</title>
	  <link>/blog//algo-boj2580</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2580</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2580">https://www.acmicpc.net/problem/2580</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>dfs로 빈칸에 숫자를 지정해준 뒤, 열, 행, 3*3행렬에서 조건이 만족하는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
				<span class="o">}</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">idx</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">checkRow</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">checkColumn</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">checkBox</span><span class="o">(</span><span class="n">node</span><span class="o">))</span>
				<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">9</span><span class="o">)</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkRow</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">y</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkColumn</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">x</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkBox</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">x</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">y</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">a</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="o">+</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">b</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">b</span><span class="o">+</span><span class="mi">3</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">==</span><span class="n">y</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">][</span><span class="mi">9</span><span class="o">];</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span> 
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
				<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_3.PNG" alt="실행결과" />
🤟 성공 🤟<br />
빈칸에 만족하는 숫자가 없을 때의 예외처리를 해주지 않아서 실패했었다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">빈칸 위치를 ArrayList에 저장한다</span></strong>
    <ul>
      <li>scan해서 받아오는 과정에서 0은 해당 위치를 AraryList에 저장한다.</li>
      <li>x, y좌표를 저장하기 위해 Node클래스를 선언하여 이용한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>빈칸에 for문을 통해 1~9중 하나를 부여한다.</li>
      <li>해당 위치에 넣은 숫자가 행, 열, 박스에서 조건을 만족하는지 확인한다.</li>
      <li>만족한다면, dfs(idx+1)로 재귀를 호출하여 다음 빈칸을 확인한다.</li>
      <li>만족하지 않는다면 다음 숫자를 넣어 계속 확인한다.</li>
      <li>9까지 확인하였는데도 만족하지 않는다면, 0으로 다시 리셋한다. 이 경우 어짜피 ArrayList의 마지막 인덱스까지 확인하지 못하게 되므로 정답에서 자연스럽게 제외된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">행, 열, 박스 조건을 확인한다</span></strong>
    <ul>
      <li>checkRow()로 현재 행에서 중복되는 숫자는 없는지 확인한다.</li>
      <li>checkColumn()은 현재 열에서 중복되는 숫자가 없는지 확인한다.</li>
      <li>checkBox()는 3*3행렬에서 확인한다. 이때 i, j의 시작점을 계산해야하는데, 시작점은 0, 3, 6으로 3의 배수이므로 3의 배수로 만들기 위해 /3 *3을 해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 2580] 스도쿠 (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/41">https://fbtmdwhd33.tistory.com/41</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 알파벳</title>
	  <link>/blog//algo-boj1987</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1987</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1987">https://www.acmicpc.net/problem/1987</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용하여 경로를 탐색하고, 중복 알파벳이 있으면 탈출한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span><span class="n">c</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">char</span> <span class="n">map</span><span class="o">[][];</span>
	<span class="kd">static</span> <span class="kt">boolean</span> <span class="n">alpha</span><span class="o">[];</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dotX</span><span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dotY</span><span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">alpha</span><span class="o">[</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">xx</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">dotX</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="kt">int</span> <span class="n">yy</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="n">dotY</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="k">if</span><span class="o">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="n">xx</span><span class="o">||</span><span class="n">xx</span><span class="o">&gt;=</span><span class="n">r</span> <span class="o">||</span> <span class="mi">0</span><span class="o">&gt;</span><span class="n">yy</span><span class="o">||</span><span class="n">yy</span><span class="o">&gt;=</span><span class="n">c</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">next</span><span class="o">=</span><span class="n">map</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">alpha</span><span class="o">[</span><span class="n">next</span><span class="o">])</span> <span class="n">dfs</span><span class="o">(</span><span class="n">xx</span><span class="o">,</span> <span class="n">yy</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span>
		<span class="n">alpha</span><span class="o">[</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">r</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">c</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">];</span>
		<span class="n">alpha</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">r</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">c</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_5.PNG" alt="실행결과" />
🤟 성공 🤟<br />
사실 실패도 찾아본 반례 예시들이 다 돌아가서 뭐가 틀렸었던건지 아직도 잘 모르겠다. max값 갱신과 visit false처리 위치를 for문 밖으로 빼주었더니 성공하였다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>상하좌우로 움직여 이동할 수 있는 최대 칸을 구해야하므로 DFS를 이용한다.</li>
      <li>map에 알파벳을 char형으로 저장하고, alpha를 통해 방문한 위치의 알파벳을 true로 저장하여 중복을 체크한다.</li>
      <li>xx, yy는 상하좌우로 움직일 수 있는 위치를 나타내며 map의 인덱스 범위를 벗어나지 않는다면 alpha를 통해 새 알파벳이라면 재귀 호출로 그곳으로 이동한다.</li>
      <li>for문에서 상하좌우로 더이상 움직일 수 없다면(인덱스를 벗어나거나 새로운 알파벳이 아닌 경우), for문을 탈출하여 지금까지의 cnt를 Math.max로 최댓값을 저장한다. 그리고 다음 사용을 위해 alpha[x][y]=false 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 맞춰봐</title>
	  <link>/blog//algo-boj1248</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1248</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1248">https://www.acmicpc.net/problem/1248</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>n개의 숫자를 -10~10까지 모두 확인하며 문자열의 조건을 만족하는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=-</span><span class="mi">10</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">result</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">check</span><span class="o">(</span><span class="n">cnt</span><span class="o">))</span> <span class="n">dfs</span><span class="o">(</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">idx</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">sum</span><span class="o">+=</span><span class="n">result</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
				<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]!=(</span><span class="n">sum</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="sc">'0'</span><span class="o">:(</span><span class="n">sum</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="sc">'+'</span><span class="o">:</span><span class="sc">'-'</span><span class="o">)))</span>
					<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">);</span>
				<span class="n">idx</span><span class="o">++;</span>
			<span class="o">}</span>				
		<span class="o">}</span>			
		<span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">문자열을 이차원배열에 저장한다</span></strong><br />
<img src="./assets/images/200711_2.png" alt="그림1" />
    <ul>
      <li>문제의 요지는 위 조건을 만족하는 숫자 n개를 리턴하는 것이다.</li>
      <li>예를 들어, (0,0)은 첫 번째 숫자가 -2, 음수이므로 -가 된다.</li>
      <li>(0,1)은 -2+5=3이므로 양수, +이다.</li>
      <li>(0,2)는 -2+5-3=0이므로 0이다.</li>
      <li>이와 같이 이전 항들의 누적합과 현재 숫자를 더했을 때의 부호가 주어진 배열 값과 같아야한다.</li>
      <li>따라서 문자열을 이차원배열에 적절히 저장하여 이를 이용한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>숫자 범위는 -10~10이므로 모두 대입해 조건을 확인한다. 도중에 맞지 않다면 버린다.</li>
      <li>따라서 DFS를 이용해 조건에 대한 모든 경우를 탐색하는 방식으로 진행한다.</li>
      <li>dfs()에서 for문을 통해 임의의 숫자 i를 배정하고, check()를 통해 현재까지의 숫자가 조건에 맞는지 확인한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>맞춰봐 [백준 1248][JAVA][골드 3][백트래킹][DFS] <a href="https://toastfactory.tistory.com/206">https://toastfactory.tistory.com/206</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 부등호</title>
	  <link>/blog//algo-boj2529</link>
	  <author></author>
	  <pubDate>2020-06-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2529</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2529">https://www.acmicpc.net/problem/2529</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS와 visit[]를 이용하여 숫자를 중복시키지 않으면서 부등호 조건에 맞는 숫자를 생성하여 ArrayList에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">k</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">now</span><span class="o">,</span> <span class="n">String</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">idx</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">now</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
					<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">num</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">now</span><span class="o">&gt;=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
					<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">num</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">));</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200630_4.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용하여 부등호 조건에 맞는 숫자를 생성한다</span></strong>
    <ul>
      <li>부등호를 저장할 array, 중복 숫자를 거르기 위한 visit 배열을 글로벌 선언한다.</li>
      <li>dfs()를 통해 숫자를 생성하고, list에 저장한다.</li>
      <li>dfs는 시작점(첫 번째 숫자)에 따라 모두 체크해줘야하므로 for문을 돌린다. now에 시작점 i, num 자리에도 i를 넘겨 현재까지 i가 만들어졌음을 보내준다.</li>
      <li>이때 숫자는 0부터 차례대로 오름차순으로 생성되기 때문에 list에도 오름차순으로 저장된다. 따라서 list의 마지막에는 max값이, 처음에는 min값이 저장된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">dfs() 메소드를 만든다</span></strong>
    <ul>
      <li>파라미터 idx는 부등호 배열 array를 순회하는 인덱스이자, 순회가 끝나면 idx==k이므로 종료 조건이 된다. idx==k까지 살아있다면 k+1길이의 숫자 생성 완료된 것이므로 list에 저장후 종료한다.</li>
      <li>now는 이전에 선택된 숫자이다. 부등호 체크를 위해 파라미터로 넘겨준다.</li>
      <li>num은 현재까지 만들어진 숫자이다.</li>
      <li>for문을 통해 0~9순회하며 visit를 통해 방문하지 않은 숫자라면 부등호 조건을 체크하고, 맞다면 방문 체크(true)로 변경 후 재귀호출로 다음을 만든다. 이때 다음 부등호를 체크해야하므로 idx+1, 현재 선택된 숫자 i, i를 덧붙인 num+i를 파라미터로 넘긴다.</li>
      <li>dfs()호출이 끝난 후 다시 원래 복귀로 돌아왔다면, 다음 사용을 위해 현재 visit[i]=false 처리해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 2529번 부등호 :: 마이구미 <a href="https://mygumi.tistory.com/279">https://mygumi.tistory.com/279</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 그래프와 BFS: ABCDE</title>
	  <link>/blog//algo-boj13023</link>
	  <author></author>
	  <pubDate>2020-06-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj13023</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/13023">https://www.acmicpc.net/problem/13023</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>A-&gt;B-&gt;C-&gt;D-&gt;E와 같은 관계가 있는지 확인하기 위해 DFS를 이용한다.</li>
  <li>친구관계를 이차원배열이 아닌 ArrayList를 이용하여 탐색 시간을 줄인다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">now</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">==</span><span class="mi">5</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
		
		<span class="n">visit</span><span class="o">[</span><span class="n">now</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">).</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//나와 연결된 사람들 체크</span>
			<span class="kt">int</span> <span class="n">next</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">next</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">dfs</span><span class="o">(</span><span class="n">next</span><span class="o">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">now</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
			<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//시작점 체크</span>
			<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
			<span class="k">if</span><span class="o">(</span><span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
				<span class="k">return</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200623_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
이차원 배열로 풀어서 계속 시간 초과가 발생했다. ArrayList를 사용하여 시간 문제를 해결하였다.
visit[false]를 처리해주지 않아 실패하였다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">ArrayList를 이용한다</span></strong>
    <ul>
      <li>이차원배열을 이용할 경우 나와 연결되지 않은 곳(array[i][j]=0)도 체크해야하므로 시간 초과가 발생한다.</li>
      <li>나와 연결된 곳들만 탐색하기 위해 ArrayList에 저장한다.</li>
      <li>n명의 관계를 저장하기 위해 ArrayList의 원소(ArrayList)를 n개 생성한 후, 각 사람마다 연결된 사람들 다시 Integer형으로 저장해준다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">각 사람마다 시작점을 주어 모든 경우의 수를 체크한다</span></strong>
    <ul>
      <li>시작점에 따라 ABCDE 관계를 찾을 수도 있고 아닐 수도 있기 때문에 main문에서 for문을 돌려 dfs를 호출하는 시작점을 모두 체크한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>나와 연결된 사람들을 타고타고 들어가야하므로 DFS를 이용한다.</li>
      <li>특정 사람과의 연결을 체크한 적이 있는지 확인하기 위해 visit[]를 두어 방문 여부를 확인한다.</li>
      <li>연결을 체크한 적이 있다면 continue로 패스한다.</li>
      <li>depth==5라면 ABCDE 관계를 찾은 것이므로 true를 리턴한다.</li>
      <li>now에 대한 사용이 끝났으므로 다음을 위해 visit[now]를 false 처리해줘야 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준(BOJ) 13023 - ABCDE <a href="https://kyc0517.tistory.com/33">https://kyc0517.tistory.com/33</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 그래프와 BFS: 이모티콘</title>
	  <link>/blog//algo-boj14226</link>
	  <author></author>
	  <pubDate>2020-06-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14226</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14226">https://www.acmicpc.net/problem/14226</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>최소 시간을 구해야하므로 BFS를 이용한다.</li>
  <li>visit[클립보드 길이][버퍼 길이]를 이용하여 탐색 여부를 체크한다.</li>
  <li>s의 최댓값이 1000이고 이를 복사에서 클립보드에 저장할 때 최대가 되므로 visit[2002][2002]로 초기화한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bfs</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
		<span class="n">visit</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
		
		<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">==</span><span class="n">s</span><span class="o">)</span> <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">;</span>
			
			<span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">])</span> <span class="o">{</span><span class="c1">//복사</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
				<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
			<span class="o">}</span>				
			<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">+</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">+</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">&lt;=</span><span class="mi">1000</span><span class="o">)</span> <span class="o">{</span><span class="c1">//붙여넣기</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">+</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
				<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">+</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">])</span> <span class="o">{</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
				<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">len</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">buf</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">s</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">2002</span><span class="o">][</span><span class="mi">2002</span><span class="o">];</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bfs</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">len</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">buf</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">len</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">buf</span><span class="o">=</span><span class="n">b</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">=</span><span class="n">c</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200623_2.PNG" alt="실행결과" />
🤟 성공 🤟<br />
시간초과는 예전에 했던거라 이유가 기억도 안나고, 런타임 에러는 visit[1001][1001]로 초기화한 것과 클립보드 길이가 1000을 넘어갈 때는 무시하는 코드를 넣지 않아서였다.<br />
참고로 처음에 복사에서 visit를 true로 바꾸지 않았는데도 성공했다; 이후 해당 코드를 넣고 돌렸더니 메모리와 시간면에서 확실히 효율적으로 나왔다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">BFS와 visit[클립보드][버퍼]를 이용한다</span></strong>
    <ul>
      <li>클립보드와 버퍼를 둘 다 고려해야하므로 이차원배열이 필요하다.</li>
      <li>최소 시간을 구해야하므로 BFS로 탐색한다.</li>
      <li>큐에 클립보드 길이와 버퍼, 현재까지의 시간 값을 저장하는 클래스(Node) 형태로 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">각 조건(복사, 붙여넣기, 삭제)마다 큐에 삽입한다</span></strong>
    <ul>
      <li>복사: 현재 클립보드를 복사하는 경우가 이전에 한 적이 없다면(!visit[node.len][node.len]) 큐에 삽입한다.</li>
      <li>붙여넣기: 클립보드에 버퍼 값을 붙여넣을 때, 범위가 1000을 넘어가지 않는지, 버퍼에 값이 존재하는지 확인한다. 범위가 1000을 넘어가면 애초에 최소가 아니므로 걸러서 visit 인덱스 범위를 벗어나지 않도록 해야한다.</li>
      <li>삭제: 클립보드가 비어있지 않은지 확인, 이미 방문했던(이전에 똑같은 경우를 체크한 경험) 것은 아닌지 확인 후 삭제한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 14226. 이모티콘 :: 돼지개발자 <a href="https://jaejin89.tistory.com/45">https://jaejin89.tistory.com/45</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
