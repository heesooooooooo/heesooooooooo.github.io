<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[Python/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 문자열 압축</title>
	  <link>/blog//algo-python-prog60057</link>
	  <author></author>
	  <pubDate>2021-02-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog60057</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60057">https://programmers.co.kr/learn/courses/30/lessons/60057</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>문자열 자를 사이즈를 구한다.</li>
  <li>기준 문자열(temp_s)와 현재 문자열(s[i:i+size])가 같으면 cnt++한다.</li>
  <li>아니라면, result에 저장한다.</li>
  <li>압축된 문자열 길이와 answer 중 min 값을 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>    
    
    <span class="k">for</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c"># 압축 길이</span>
        <span class="n">temp_s</span><span class="o">=</span><span class="n">s</span><span class="p">[:</span><span class="n">size</span><span class="p">]</span>
        <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span>
        <span class="n">result</span><span class="o">=</span><span class="s">""</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">size</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span><span class="o">==</span><span class="n">temp_s</span><span class="p">:</span>
                <span class="n">cnt</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cnt</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="n">result</span><span class="o">+=</span><span class="n">temp_s</span>
                <span class="n">temp_s</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span>
                <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">cnt</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
        <span class="n">result</span><span class="o">+=</span><span class="n">temp_s</span>
        <span class="n">answer</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210223_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">압축 길이를 구한다</span></strong>
    <ul>
      <li>for문을 1~len(s)//2+1까지 체크하면 된다.</li>
      <li>압축 길이가 s의 반 이상을 넘어가면 뒤에 문자열로는 압축시킬 수 없으므로 len(s)/2 이상은 체크하지 않아도 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">조건에 맞게 문자열을 압축한다</span></strong>
    <ul>
      <li>문자열이 같으면 cnt++한다.</li>
      <li>다르다면, result에 현재 문자열을 넣는다. cnt는 cnt&gt;1만 result에 넣는다.</li>
      <li>이제 다음 체크할 문자열을 temp_s에 넣는다. 현재 s[i]가 다른 문자이므로 i를 포함하고 size만큼 길이를 가진다.</li>
      <li>cnt도 초기화.</li>
      <li>마지막 i가 temp_s와 같으면 result에 추가되지않고 for문을 종료하게 된다. 이 값을 넣어줘야 하므로 for문 밖에서 result에 다시 추가해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<ul>
  <li>문자열 압축-프로그래머스(python)(2020 Kakao 공채) <a href="https://velog.io/@devjuun_s/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4python2020-Kakao-%EA%B3%B5%EC%B1%84">https://velog.io/@devjuun_s/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4python2020-Kakao-%EA%B3%B5%EC%B1%84</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 괄호 변환</title>
	  <link>/blog//algo-python-prog60058</link>
	  <author></author>
	  <pubDate>2021-02-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog60058</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60058">https://programmers.co.kr/learn/courses/30/lessons/60058</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>문제 조건에 맞게 진행</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">balance</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="nb">open</span><span class="o">=</span><span class="n">close</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">val</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="nb">open</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">close</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">if</span> <span class="nb">open</span><span class="o">==</span><span class="n">close</span><span class="p">:</span> <span class="k">return</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">return</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">correct</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="n">stack</span><span class="o">=</span><span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">ch</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">'('</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">')'</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="n">result</span><span class="o">=</span><span class="s">""</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">ch</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="s">')'</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="s">'('</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">==</span><span class="s">''</span><span class="p">:</span> <span class="k">return</span> <span class="s">''</span>
    
    <span class="n">answer</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">idx</span><span class="o">=</span><span class="n">balance</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="n">u</span><span class="o">=</span><span class="n">p</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span>
    <span class="n">v</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">idx</span><span class="p">:]</span>
    <span class="k">if</span><span class="p">(</span><span class="n">correct</span><span class="p">(</span><span class="n">u</span><span class="p">)):</span>
        <span class="k">return</span> <span class="n">u</span><span class="o">+</span><span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">answer</span><span class="o">=</span><span class="s">'('</span><span class="o">+</span><span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">+</span><span class="s">')'</span>
        <span class="n">u</span><span class="o">=</span><span class="n">u</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">answer</span><span class="o">+=</span><span class="n">reverse</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210223_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">균형잡힌 문자열 체크</span></strong>
    <ul>
      <li>balance(w)</li>
      <li>w를 순회하며 여는괄호(open), 닫는괄호(close) 개수가 같아지는 인덱스를 리턴한다.</li>
      <li>for문을 끝까지 돈다면 w는 균형잡힌 문자열이 아니므로 0을 리턴한다.</li>
      <li>list(w)하면 문자열 w이 Char Array로 저장된다.</li>
      <li>enumerate()하면 튜플 형태로 반환되어 for문에서 index, value 형태로 사용할 수 있다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">올바른 괄호 문자열 체크</span></strong>
    <ul>
      <li>correct(w)</li>
      <li>스택을 이용한다. ‘(‘면 push한다.</li>
      <li>’)’면 스택에 값이 존재하고 top이 ‘(‘일 때 pop한다.</li>
      <li>top이 ‘)’면 push.</li>
      <li>스택이 비어있으면 잘못된 문자열이므로 False를 리턴한다.</li>
      <li>for문을 다 돌았을 때, 스택이 비어있어야 올바른 문자열이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">올바른 괄호 문자열이 아니라면</span></strong>
    <ul>
      <li>4-4에서 u의 첫 번째, 마지막을 slice로 지운 후, reverse()로 괄호 방향을 뒤집어서 붙인다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2021 KAKAO BLIND RECRUITMENT: 순위 검색</title>
	  <link>/blog//algo-python-prog72412</link>
	  <author></author>
	  <pubDate>2021-02-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog72412</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72412">https://programmers.co.kr/learn/courses/30/lessons/72412</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>info[i]의 점수를 제외한 데이터와 ‘-‘를 가지고 모든 경우의 수를 만든다.</li>
  <li>만든 경우의 수는 key가 되고, 점수는 value가 된다. value는 리스트 형태로 만들어서 오름차순 정렬 후 이분탐색으로 사용한다.</li>
  <li>query[i]가 해시맵의 key에 있다면 그 value를 통해 점수 조건에 맞는 개수를 answer에 넣으면 된다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
<span class="kn">import</span> <span class="nn">bisect</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="n">query</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">hashmap</span><span class="o">=</span><span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>
        <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">data</span><span class="o">=</span><span class="n">i</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">score</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="n">comb</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="n">n</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">comb</span><span class="p">:</span>
                <span class="n">_data</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">c_idx</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">_data</span><span class="p">[</span><span class="n">c_idx</span><span class="p">]</span><span class="o">=</span><span class="s">'-'</span>
                <span class="n">_data</span><span class="o">=</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">_data</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">_data</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">_data</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">_data</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">score</span><span class="p">]</span>
                    
    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
        <span class="n">value</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">query</span><span class="p">:</span>
        <span class="n">q</span><span class="o">=</span><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">q</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">if</span> <span class="n">i</span><span class="o">!=</span><span class="s">'and'</span><span class="p">]</span>
        <span class="n">q_score</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">q_cnd</span><span class="o">=</span><span class="n">q</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">q_cnd</span><span class="o">=</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">q_cnd</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">q_cnd</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
            <span class="n">value_list</span><span class="o">=</span><span class="n">hashmap</span><span class="p">[</span><span class="n">q_cnd</span><span class="p">]</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">value_list</span><span class="p">)</span><span class="o">-</span><span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="n">value_list</span><span class="p">,</span> <span class="n">q_score</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">value_list</span><span class="p">)))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210222_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">조합을 구한다</span></strong>
    <ul>
      <li>조합으로 만드는 인덱스는 data(info[i]의 점수를 제외한 데이터들)에 ‘-‘를 넣을 위치가 된다.</li>
      <li>(), (0), (1), … (0,1,2,3) == ‘-‘ 위치</li>
      <li>생성한 경우의 수 리스트(_data)를 join연산으로 하나의 문자열로 바꾼 후 _data에 넣는다.</li>
      <li>_data가 hashmap에 있다면 value(리스트 형) 뒤에 추가한다.</li>
      <li>아니라면, hashmap에 추가.</li>
      <li>value 이분탐색을 위해 오름차순 정렬한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">해시맵에서 조건에 맞는 값을 리턴한다</span></strong>
    <ul>
      <li>q를 스페이스 기준, and를 제외하고 배열에 넣는다.</li>
      <li>q_cnd(점수를 제외한 데이터)가 해시맵에 존재한다면, 해당 value에서 이분탐색으로 q_score의 삽입 위치를 찾는다(bisect_left 사용)</li>
      <li>리턴받은 숫자가 조건에 맞지 않는 개수이므로 value.size()에서 리턴숫자를 뺀 값이 정답이 된다. answer에 넣는다.</li>
      <li>해시맵에 없다면 0을 answer에 넣는다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<ul>
  <li>[프로그래머스] 순위 검색 / Python <a href="https://dev-note-97.tistory.com/131">https://dev-note-97.tistory.com/131</a></li>
  <li>[프로그래머스] 순위 검색(Python) <a href="https://velog.io/@study-dev347/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89Python">https://velog.io/@study-dev347/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89Python</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2021 KAKAO BLIND RECRUITMENT: 메뉴 리뉴얼</title>
	  <link>/blog//algo-python-prog72411</link>
	  <author></author>
	  <pubDate>2021-02-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog72411</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72411">https://programmers.co.kr/learn/courses/30/lessons/72411</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>order의 조합을 구한다.</li>
  <li>hashmap에 조합 별 개수를 세서 저장한다.</li>
  <li>조합 길이의 최댓값을 size에 저장한다.</li>
  <li>조합 빈도수(hashmap)이 2 이상이고 최댓값(size)인 결과를 answer에 넣는다.</li>
  <li>answer을 오름차순 정렬하여 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="o">/**</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="n">HEESOO</span>
 <span class="o">*</span>
 <span class="o">*/</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">orders</span><span class="p">,</span> <span class="n">course</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">hashmap</span><span class="o">=</span><span class="p">{}</span>
    <span class="n">size</span><span class="o">=</span><span class="p">{}</span>
    <span class="k">for</span> <span class="n">order</span> <span class="ow">in</span> <span class="n">orders</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">course</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">comb</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
                <span class="n">menu</span><span class="o">=</span><span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">comb</span><span class="p">))</span>
                <span class="k">if</span> <span class="n">menu</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)</span> <span class="ow">in</span> <span class="n">size</span><span class="p">:</span>
                    <span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)],</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)]</span><span class="o">=</span><span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">)]:</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210221_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">조합을 구한다</span></strong>
    <ul>
      <li>combinations로 조합을 구한다.</li>
      <li>“XY”, “YX”는 같은 것으로 생각하기 때문에 sorted()로 오름차순 정렬한 후, join()으로 문자열을 합친다.</li>
      <li>hashmap에 menu가 있다면 하나 증가, 없다면 1을 넣어준다.</li>
      <li>size는 문자열 길이의 max를 저장한다. size에 len(menu) 값이 들어가있다면 최댓값으로 갱신, 없다면 현재 hashmap[menu]를 넣는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">조합 중 조건에 맞는 값을 리턴한다</span></strong>
    <ul>
      <li>조합 횟수가 2 이상이고 길이가 최댓값인 것만 answer에 넣는다.</li>
      <li>오름차순으로 정렬하여 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>


</channel>
</rss>
