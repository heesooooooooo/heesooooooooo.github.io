<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>세넓코잘많</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/LeetCode] Top 100 Liked Question: 20. Valid Parentheses</title>
	  <link>/blog//algo-leet20</link>
	  <author></author>
	  <pubDate>2020-09-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-leet20</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://leetcode.com/problems/valid-parentheses/">https://leetcode.com/problems/valid-parentheses/</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>스택에 여는 괄호를 넣고, 닫는 괄호가 나오면 pop한 값이 일치하는지 확인한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="kt">char</span> <span class="n">ch</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">'('</span> <span class="o">||</span> <span class="n">ch</span><span class="o">==</span><span class="sc">'{'</span> <span class="o">||</span> <span class="n">ch</span><span class="o">==</span><span class="sc">'['</span><span class="o">)</span> <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">')'</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()!=</span><span class="sc">'('</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">'}'</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()!=</span><span class="sc">'{'</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">']'</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()!=</span><span class="sc">'['</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>            
        <span class="o">}</span>
        
        <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200922_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">스택을 이용한다</span></strong>
    <ul>
      <li>스택에는 여는 괄호를 넣는다.</li>
      <li>닫는 괄호가 나오면 st.pop()한 값이 유효한지 체크한다.</li>
      <li>아니라면 false를 리턴하고 종료한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>해시맵에 유효한 괄호를 연결해놓고 문제를 해결할 수도 있다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 스택: 스택 수열</title>
	  <link>/blog//algo-boj1874</link>
	  <author></author>
	  <pubDate>2020-04-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1874</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1874">https://www.acmicpc.net/problem/1874</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>배열에 입력값들을 저장한다.</li>
  <li>스택에는 1부터 n까지 차례대로 넣을 수 있고, array[i]를 만들기 위해서는 push와 pop을 몇 번 사용해야하는지 체크한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> 
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
		<span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
		
		<span class="kt">int</span> <span class="n">num</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="k">while</span><span class="o">(</span><span class="n">num</span><span class="o">&lt;=</span><span class="n">now</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"+\n"</span><span class="o">);</span>
				<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
				<span class="n">num</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">()!=</span><span class="n">now</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"NO"</span><span class="o">);</span>
				<span class="k">return</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">else</span><span class="o">{</span>
				<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"-\n"</span><span class="o">);</span>
				<span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200410_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">array[i]를 만들기 위해 스택에 push와 pop을 몇 번 사용해야하는지 계산한다.</span></strong>
    <ul>
      <li>num은 1~n까지의 값으로 스택에는 1부터 순서대로 넣을 수 있다.</li>
      <li>입력받은 값들은 array에 저장한다.</li>
      <li>현재 array[i]를 now라 한다.</li>
      <li>스택에서 now를 빼려면 num이 now까지 스택에 push되어 있어야한다. while문을 통해 num==now될 때까지 넣는다.</li>
      <li>now를 출력할 수 있을 때는 스택의 top이 now인 경우이다. 맞다면 sb에 저장한다.</li>
      <li>top이 now가 아니라면 수열을 만들 수 없다. now를 출력하기 위해서 아직 사용하지 않은 top을 pop해야 하기 때문이다. 따라서 NO를 출력한 후 다음 숫자들은 볼 필요도 없으므로 return으로 종료한다. break를 사용하지 않는 이유는, 해당 위치에서 break를 할 경우 for문만 빠져져나와 마지막 줄의 출력문을 실행하기 때문이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">StringBuilder를 이용한다</span></strong>
    <ul>
      <li>System.out.println()만을 사용하면 예제2와 같이 수열을 만들 수 없음을 알기 전까지 계속 +, -를 출력하므로 NO만 출력할 수 없게 된다.</li>
      <li>따라서 sb를 이용하여 출력할 문자열들을 저장해두었다가, NO가 아닌 경우에 전체 출력문을 뽑아낸다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 스택: 제로</title>
	  <link>/blog//algo-boj10773</link>
	  <author></author>
	  <pubDate>2020-04-06T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj10773</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/10773">https://www.acmicpc.net/problem/10773</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>이전 숫자를 알아야하므로 메모리를 사용해 저장해야한다.</li>
  <li>스택을 이용해 이전 값을 바로 불러올 수 있게 한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
		<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">num</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span>
				<span class="n">answer</span><span class="o">-=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="n">answer</span><span class="o">+=</span><span class="n">num</span><span class="o">;</span>
				<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
			<span class="o">}</span>				
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200406_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">스택을 이용한다</span></strong>
    <ul>
      <li>0이 입력되면 이전 값을 빼야하므로 입력된 값들을 모두 저장해서 알고 있어야한다.</li>
      <li>스택을 사용하여 바로 이전에 넣은 값을 뺄 수 있도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 스택: 균형잡힌 세상</title>
	  <link>/blog//algo-boj4949</link>
	  <author></author>
	  <pubDate>2020-04-06T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj4949</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/4949">https://www.acmicpc.net/problem/4949</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>(, [은 스택에 저장한다.</li>
  <li>), ]은 스택에서 꺼낸 값이 짝이 맞는 괄호면 빼고, 아니라면 닫힌 괄호를 저장한다.</li>
  <li>문장이 끝날 때 마다 스택이 비었는지 확인하여 yes, no를 출력한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span>
				<span class="k">break</span><span class="o">;</span>
			<span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
			<span class="n">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>

			<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"("</span><span class="o">)</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"["</span><span class="o">))</span>
					<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
				
				<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"]"</span><span class="o">))</span> <span class="o">{</span>
					<span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"["</span><span class="o">))</span>
						<span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
					<span class="k">else</span>
						<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
				<span class="o">}</span>
				
				<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">")"</span><span class="o">)){</span>
					<span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"("</span><span class="o">))</span>
						<span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
					<span class="k">else</span>
						<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>

			<span class="k">if</span> <span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"yes"</span><span class="o">);</span>
			<span class="k">else</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"no"</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200406_3.PNG" alt="실행결과" />
🤟 성공 🤟 
닫는 괄호일 때, top이 대응하는 여는 괄호가 아니라면 push하는 것을 빼먹어서 실패가 났다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">nextLine()으로 한 문장씩 입력받는다</span></strong>
    <ul>
      <li>next()는 스페이스를 기준으로 나누므로 부적합하다.</li>
      <li>nextLine()을 이용하여 .을 포함한 한 문장을 str에 저장한다.</li>
      <li>.만 입력받을 때 까지 while문 무한루프를 돈다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">스택을 이용한다</span></strong>
    <ul>
      <li>괄호문제는 주로 스택을 사용한다.</li>
      <li>여는 괄호는 push한다.</li>
      <li>닫는 괄호는 top이 대응하는 여는 괄호인지 체크한 후, 맞다면 pop한다. 아니라면 닫는 괄호를 push한다.</li>
      <li>문장이 끝나면 스택안에 값이 있는지 체크한 후, 없다면 yes를 출력한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_큰 수 만들기</title>
	  <link>/blog//algo-prog42883</link>
	  <author></author>
	  <pubDate>2019-11-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42883</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42883">https://programmers.co.kr/learn/courses/30/lessons/42883</a></p>

<h3 id="테스트케이스-추가">테스트케이스 추가</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">number(string)</th>
      <th style="text-align: center">k(int)</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">“10000”</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">“100”</td>
    </tr>
  </tbody>
</table>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>number을 charAt()으로 하나씩 비교한다.</li>
  <li>지금 값이 스택 탑보다 크면 팝하고 k–한다(지금값&lt;=스택값 될때까지).</li>
  <li>k&gt;0까지만 팝할 수 있다.</li>
  <li>k가 끝났으면 나머지 number을 스택에 푸시한다.</li>
  <li>숫자가 끝났는데도 k&gt;0이라면 스택에서 갯수만큼 팝한다(뒤에서 삭제).</li>
  <li>스택을 팝하면서 앞에서 추가한다(스택은 LIFO이므로.)</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="kt">char</span> <span class="n">num</span><span class="o">,</span> <span class="n">stNum</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span><span class="c1">//number순회</span>
            <span class="n">num</span><span class="o">=</span><span class="n">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//하나씩 추출</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">stNum</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stNum</span><span class="o">&lt;</span><span class="n">num</span><span class="o">){</span><span class="c1">//스택팝보다 큰 수를 넣어야함</span>
                    <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                    <span class="n">k</span><span class="o">--;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span><span class="c1">//스택이 정리되었으므로 푸시</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span><span class="c1">//숫자가 끝났는데도 k가 남았다면 그만큼 팝</span>
            <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//최종 값 생성</span>
            <span class="n">answer</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()+</span><span class="n">answer</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191121_1.PNG" alt="실행결과" />
실패.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>시간초과는 StringBuilder를 이용하고, 실패한 테스트는 위 테스트케이스를 만족하도록 코드를 수정한다.</p>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>while(k&gt;0)에서 스택에 값이 있을 때 팝할 수 있도록 조건을 추가한다.</li>
  <li>문자열 연결을 StringBuilder을 사용하여 시간을 줄인다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="kt">char</span> <span class="n">num</span><span class="o">,</span> <span class="n">stNum</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span><span class="c1">//number순회</span>
            <span class="n">num</span><span class="o">=</span><span class="n">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//하나씩 추출</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">stNum</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stNum</span><span class="o">&lt;</span><span class="n">num</span><span class="o">){</span><span class="c1">//스택팝보다 큰 수를 넣어야함</span>
                    <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                    <span class="n">k</span><span class="o">--;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span><span class="c1">//스택이 정리되었으므로 푸시</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span><span class="c1">//숫자가 끝났는데도 k가 남았다면 그만큼 팝</span>
            <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">k</span><span class="o">--;</span>
        <span class="o">}</span>
        <span class="c1">//최종 값 생성</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">();</span><span class="c1">//sb에 역순으로 저장되었으므로 뒤집어줌</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-코드-설명">3. 코드 설명</h3>
<ul>
  <li>Stack<Chracter> st: number을 charAt()으로 하나씩 비교하여 저장한다.</Chracter></li>
  <li>StringBuilder sb: 문자열을 연결할 때 시간을 줄여준다.</li>
  <li>char num: number.charAt()로 추출한 값이다.</li>
  <li>
    <h2 id="char-stnum-스택의-탑-값이다">char stNum: 스택의 탑 값이다.</h2>
  </li>
  <li>스택에는 탑보다 큰 수를 넣어야한다.</li>
  <li>탑이 num보다 작을 경우에는 탑을 팝한다. 이때 스택이 비어있지 않고 뺄 수 있는 기회 k가 남아있어야한다. 팝한 후에는 k를 하나 줄여서 이를 센다.</li>
  <li>스택의 정리가 끝났다면 현재 값 num을 푸시한다.</li>
  <li>number 순회가 끝났는데도 k가 남아있다면 그 갯수만큼 스택에서 뺀다. answer에는 최댓값이 들어가야하므로 스택의 탑을 팝하면 자릿수가 작은 일의자리부터 차례대로 빠진다.</li>
  <li>k도 계산이 끝났다면 StringBuilder을 이용해서 스택을 팝하여 문자열(최댓값 숫자)을 생성한다. 스택은 LIFO이므로 sb에는 거꾸로 문자가 이어진다.</li>
  <li>따라서 sb.reverse()로 문자열을 한 번 뒤집고, 형변환을 거쳐 리턴한다.</li>
</ul>

<h3 id="4-결과">4. 결과</h3>
<p><img src="./assets/images/191121_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>처음에는 number을 int형으로 배열에 저장한 후, 이전 문제에서 배웠던 perm()을 구현하여 k자리 조합을 모두 찾은 후 Math.max()을 이용해 문제를 풀까 했다. 그러지 않아서 다행이다. 아직까지도 문제를 보면 어떻게 효율적으로 풀 지 정리가 안된다T_T.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 완전탐색_카펫</title>
	  <link>/blog//algo-prog42842</link>
	  <author></author>
	  <pubDate>2019-11-19T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42842</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42842">https://programmers.co.kr/learn/courses/30/lessons/42842</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>red로 만들 수 있는 약수 조합(가로&gt;=세로)을 찾아서 Carpet형태로 스택에 저장한다.</li>
  <li>스택을 하나씩 뽑아서 둘레 길이가 brown과 같으면 그 값을 answer로 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Carpet</span><span class="o">{</span>
     <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>
     <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
     <span class="kd">public</span> <span class="nf">Carpet</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">){</span>
         <span class="k">this</span><span class="o">.</span><span class="na">width</span><span class="o">=</span><span class="n">w</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">height</span><span class="o">=</span><span class="n">h</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">divisor</span><span class="o">(</span><span class="kt">int</span> <span class="n">brown</span><span class="o">,</span> <span class="kt">int</span> <span class="n">red</span><span class="o">,</span> <span class="n">Stack</span> <span class="n">st</span><span class="o">){</span>
         <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Carpet</span><span class="o">(</span><span class="n">red</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
         <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">red</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">red</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="o">){</span>
                 <span class="n">j</span><span class="o">=</span><span class="n">red</span><span class="o">/</span><span class="n">i</span><span class="o">;</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">j</span><span class="o">){</span>
                     <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Carpet</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">));</span>
                 <span class="o">}</span>
                 <span class="k">else</span><span class="o">{</span>
                     <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Carpet</span><span class="o">(</span><span class="n">j</span><span class="o">,</span><span class="n">i</span><span class="o">));</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(</span><span class="n">Stack</span> <span class="n">st</span><span class="o">,</span> <span class="kt">int</span> <span class="n">brown</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span><span class="o">){</span>
         <span class="n">Carpet</span> <span class="n">cp</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">round</span><span class="o">;</span>
         <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
             <span class="n">cp</span><span class="o">=(</span><span class="n">Carpet</span><span class="o">)</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
             <span class="n">round</span><span class="o">=</span><span class="mi">2</span><span class="o">*(</span><span class="n">cp</span><span class="o">.</span><span class="na">width</span><span class="o">+</span><span class="n">cp</span><span class="o">.</span><span class="na">height</span><span class="o">)+</span><span class="mi">4</span><span class="o">;</span>
             <span class="k">if</span><span class="o">(</span><span class="n">round</span><span class="o">==</span><span class="n">brown</span><span class="o">){</span>
                 <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">cp</span><span class="o">.</span><span class="na">width</span><span class="o">+</span><span class="mi">2</span><span class="o">;</span>
                 <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">cp</span><span class="o">.</span><span class="na">height</span><span class="o">+</span><span class="mi">2</span><span class="o">;</span>
                 <span class="k">break</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">brown</span><span class="o">,</span> <span class="kt">int</span> <span class="n">red</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
         <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
         <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Carpet</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
         <span class="n">divisor</span><span class="o">(</span><span class="n">brown</span><span class="o">,</span> <span class="n">red</span><span class="o">,</span> <span class="n">st</span><span class="o">);</span>
         <span class="n">check</span><span class="o">(</span><span class="n">st</span><span class="o">,</span> <span class="n">brown</span><span class="o">,</span> <span class="n">answer</span><span class="o">);</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-코드-설명">3. 코드 설명</h3>
<ul>
  <li><code class="highlighter-rouge">class Carpet</code>: red로 만들 수 있는 가로 세로 조합을 찾아서 스택에 함께 저장하기 위해 Carpet 클래스를 생성하였다.
    <ul>
      <li>int width: 가로</li>
      <li>int height: 세로를 저장한다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">pulib void divisor(int brown, int red, Stack st)</code>: red의 약수를 찾는 메소드이다. i는 2부터 시작해 약수인지 판별한다. i를 찾는 즉시 대응값 j도 찾으므로 굳이 red까지 반복할 이유는 없다. red가 제곱값일때 i가 최대가 되므로 i*i&lt;=red까지만 순회한다.<br />
for문안의 처음 if를 통해 red가 i로 나눠지는지 확인한다. 나눠진다면 약수이므로 j를 찾고, 카펫은 가로가 세로보다 같거나 크므로 부등호를 통해 나눠서 Carpet 형태로 스택에 저장한다.
    <ul>
      <li>int i: i는 2부터 시작하여 red의 약수를 찾는다.</li>
      <li>int j: i를 찾으면 거기에 대응하는 값을 j에 저장한다(예를 들어 24의 약수인 3에 대응하는 숫자는 8이다).</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public void check(Stack st, int brown, int[] answer)</code>: 스택안의 값을 뽑으면서 해당 값이 조건에 만족하는지 체크한다. brown은 red를 감싸야하므로 red의 둘레에 +4를 한 것과 같다. 계산한 round가 brown과 같다면 이것이 정답이므로 answer에 값을 넣고 종료한다.
    <ul>
      <li>Carpet cp: 스택에서 뽑은 값을 저장한다.</li>
      <li>int round: cp로 둘레를 구한다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public int[] solution(int brown, int red)</code>: divisor()로 red의 약수를 모두 찾아 스택에 저장한 후, check()를 통해 조건에 맞는 지 확인 후 answer에 저장해 리턴한다.
    <ul>
      <li>Stack<Carpet> st: red로 잡을 수 있는 모양(약수)을 저장한다.</Carpet></li>
    </ul>
  </li>
</ul>

<h3 id="4-결과">4. 결과</h3>
<p><img src="./assets/images/191119_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>쉬운 문제였다! 근데 다른 사람들은 더 간단하게 풀은 것 같다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 완전탐색_숫자 야구</title>
	  <link>/blog//algo-prog42841</link>
	  <author></author>
	  <pubDate>2019-11-18T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42841</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42841">https://programmers.co.kr/learn/courses/30/lessons/42841</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>3자리 숫자를 모두 생성해 스택에 저장한다.</li>
  <li>스택에서 하나 뽑아서 baseball 숫자와 비교하여 카운트한 strike와 ball이 baseball배열값과 같은지 확인한다.</li>
  <li>같다면 answer++후 다음 baseball숫자를 비교, 다르다면 다음 스택 값을 뽑는다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNum</span><span class="o">(</span><span class="n">Stack</span> <span class="n">st</span><span class="o">){</span><span class="c1">//중복없는 3자리 숫자 생성</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                 <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">k</span><span class="o">++){</span>
                     <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">!=</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="o">!=</span><span class="n">k</span><span class="o">&amp;&amp;</span><span class="n">k</span><span class="o">!=</span><span class="n">i</span><span class="o">){</span>
                         <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">100</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="o">*</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="o">));</span>
                     <span class="o">}</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="n">String</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">baseball</span><span class="o">){</span>
         <span class="n">String</span> <span class="n">base</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">strike</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">ball</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">baseball</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="n">base</span><span class="o">=</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">baseball</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="n">base</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span><span class="c1">//스트라이크 체크</span>
                     <span class="n">strike</span><span class="o">++;</span>
                 <span class="o">}</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">base</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)))){</span><span class="c1">//볼 체크</span>
                     <span class="n">ball</span><span class="o">++;</span>
                 <span class="o">}</span>
             <span class="o">}</span>
             <span class="n">ball</span><span class="o">=</span><span class="n">ball</span><span class="o">-</span><span class="n">strike</span><span class="o">;</span><span class="c1">//스트라이크와 볼은 겹치지 않으므로</span>
             <span class="k">if</span><span class="o">(</span><span class="n">strike</span><span class="o">!=</span><span class="n">baseball</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]||</span><span class="n">ball</span><span class="o">!=</span><span class="n">baseball</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">2</span><span class="o">]){</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="n">strike</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
             <span class="n">ball</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">baseball</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
         <span class="n">String</span> <span class="n">num</span><span class="o">;</span>
         <span class="kt">boolean</span> <span class="n">chk</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
         <span class="n">makeNum</span><span class="o">(</span><span class="n">st</span><span class="o">);</span>
         <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
             <span class="n">num</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
             <span class="k">if</span><span class="o">(</span><span class="n">check</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">baseball</span><span class="o">)){</span>
                 <span class="n">answer</span><span class="o">++;</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">public boolean check(string num, int[][] baseball)</code>
    <ul>
      <li>String base: baseball의 비교할 숫자를 저장한다.</li>
      <li>int strike, ball: 스트라이크와 볼 수를 저장한다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public int solution(int[][] baseball)</code>
    <ul>
      <li>Stack<String> st: 1부터 9까지 중복없이 숫자를 조합해 스택에 저장한다. int형으로 저장하면 각 자리마다 비교하기 불편하므로 String으로 저장해 charAt()을 사용한다.</String></li>
      <li>String num: 스택에서 pop()한 값을 저장하는 변수이다.</li>
      <li>boolean chk: check()메소드의 리턴값을 저장하는 변수이다.</li>
    </ul>
  </li>
</ul>

<h3 id="3-코드-설명">3. 코드 설명</h3>
<ul>
  <li><code class="highlighter-rouge">public void makeNum(Stack st)</code>: 1부터 9까지 각자 서로 다른 숫자를 조합해 3자리 숫자를 만든다. for문을 3개 돌려서 i, j, k가 서로 같지 않을때 3자리 숫자로 만들고, 이를 String형으로 변환해 스택에 저장한다.</li>
  <li><code class="highlighter-rouge">public boolean check(String num, int[][] baseball)</code>: 처음 for문을 통해 baseball을 순회한다. base에는 현재 i행의 세자리 수를 저장한다.<br />
두번째 for문에서는 num(스택에서 추출한 값)과 base(baseball에서 추출)의 스트라이크와 볼을 체크한다. 첫번째 if문은 스트라이크를 체크한다. 두 숫자의 현재 자릿수가 같다면 strike++한다. 두번째 if문은 볼을 체크한다. base에 num의 현재 자리의 숫자가 존재한다면 ball++한다.<br />
스트라이크와 볼 계산이 끝났다면 ball에서 strike만큼 뺀다. 문제에서 스트라이크와 볼은 중복되어 계산하지 않았기 때문이다. num=”324”, base=”123”일 때, base가 num의 숫자를 포함하는 갯수는 2이지만(“3”,”2”) ball은 1로 저장한다. 왜냐하면 두번째 자릿수가 같은 것은 strike를 통해 1로 계산했기 때문이다.<br />
이로써 최종 strike, ball이 확정되었으므로 baseball의 값과 같은지 비교, 하나라도 다르다면 다음 baseball을 확인할 가치도 없으므로 false를 리턴한다.<br />
같다면 다음 비교를 위해 strike, ball을 초기화하고 다음으로 넘어간다.</li>
  <li><code class="highlighter-rouge">public int solution(int[][] baseball)</code>: 숫자들을 저장할 스택을 생성하고 makeNum()을 통해 가능한 숫자들을 모두 생성해 저장한다.<br />
while()문을 통해 스택안의 값을 하나씩 뽑아서, check()를 통해 스택에서 뽑은 값과 baseball을 인자로 넘겨 스트라이크와 볼을 계산한다. true를 리턴받아오면 해당 num은 정답이 가능한 수이므로 answer++한다.</li>
</ul>

<h3 id="4-결과">4. 결과</h3>
<p><img src="./assets/images/191117_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>처음 접근이 어려웠다. 다른 사람들은 어떻게 풀었는지 대충 읽어보고 이해한 후 거기에 맞춰서 코드를 작성했다. 코드 작성은 어렵지 않은데 코딩 방향을 생각해내는게 어렵다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스 알고리즘] 2단계 숫자야구 -완전탐색 <a href="https://lkhlkh23.tistory.com/71">https://lkhlkh23.tistory.com/71</a></li>
  <li>BruteForceSearch programmers 프로그래머스 알고리즘 자바 ‘숫자야구’ 문제풀이 <a href="https://geehye.github.io/programmers-brute-force-search-04/#">https://geehye.github.io/programmers-brute-force-search-04/#</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_주식가격</title>
	  <link>/blog//algo-prog42584</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42584</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42584">https://programmers.co.kr/learn/courses/30/lessons/42584</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>이중 for문을 사용하여 i를 기준으로 두고, j로 뒷 원소들과 비교한다.</li>
  <li>i보다 같거나 큰 원소들의 갯수를 세서 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="n">prices</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
                    <span class="n">cnt</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">cnt</span><span class="o">;</span>   
            <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191102_4.PNG" alt="실행결과" />
실패. 테스트케이스만 통과하고 실제 검사에서는 모두 틀렸다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>테스트케이스만 생각하고 원소에 작은 값이 나올 경우를 생각하지 않았다. 아래의 케이스도 생각해준다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">prices</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[4,2,3,2,3]</td>
      <td style="text-align: center">[1,3,1,1,0]</td>
    </tr>
  </tbody>
</table>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>이중for문을 돌다가 i보다 큰 j를 발견하면 그 뒤는 볼 필요도 없으므로 answer[i]=j-i를 넣고 break한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">prices</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
                    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>라인12: i보다 큰 j를 발견했다면 유지한 초를 계산(j-i)후, break문으로 다음 i로 넘어간다.</li>
  <li>라인16: 마지막 j까지 체크했지만 i보다 큰 j를 발견하지 못했다면 유지한 초를 계산한다. 해당 if문은 i가 마지막 j까지 순회를 비교를 끝냈을 경우에만 answer에 값을 넣을 수 있도록 하였다.</li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191104_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>스택, 큐 문제지만 배열을 이용해서 쉽게 풀 수 있었다. 여담으로 코드에 System 출력문을 써놓고 돌렸더니 효율성에서 죄다 실패가 떴었다. 출력문을 지우니 모두 성공하긴 했는데, 하마터면 더 좋은 효율성을 찾아 머리를 쥐어짤 뻔했다. 휴;</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_쇠막대기</title>
	  <link>/blog//algo-prog42585</link>
	  <author></author>
	  <pubDate>2019-11-02T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42585</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42585">https://programmers.co.kr/learn/courses/30/lessons/42585</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>()을 사용하는 문제이므로 스택을 이용한다.</li>
  <li>(은 스택에 넣는다.</li>
  <li>)인 경우 앞이 (라면 레이저이다.</li>
  <li>))이라면 닫는 괄호이다.</li>
</ol>

<p>i) ()인 경우.
<img src="./assets/images/191102_2.png" alt="설명1" />
이 경우는 레이저이다. 위와 같이 ()를 제외한 여는 괄호 갯수 만큼 막대기가 생긴다.</p>

<p>ii) ))인 경우.
<img src="./assets/images/191102_3.png" alt="설명1" />
쇠막대기의 끝을 나타낸다. 이 경우는 항상 1이다. 끝난 쇠막대기는 하나밖에 없기 때문이다.</p>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">arrangement</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
        <span class="kt">char</span> <span class="n">ch</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">arrangement</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">ch</span><span class="o">=</span><span class="n">arrangement</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">'('</span><span class="o">){</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">ch</span><span class="o">==</span><span class="sc">')'</span><span class="o">){</span>
                <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arrangement</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)==</span><span class="sc">'('</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
                <span class="o">}</span>  
                <span class="k">else</span><span class="o">{</span>
                    <span class="n">answer</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Stack<Character> st: arrangement를 char형태로 하나씩 넣는다. 경험상 괄호 문제는 스택으로 푸는 경우가 대부분이다.</Character></li>
  <li>char ch: String형태의 arrangement를 문자 하나씩 받아와 코드를 진행한다.</li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191102_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>처음 문제를 접했을 때는 그림이 복잡해보여서 어려울 것이라고 생각했는데, 이해만 하면 간단한 문제였다. 앞으로는 자신감을 갖고 문제를 풀어야겠다!</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_탑</title>
	  <link>/blog//algo-prog42588</link>
	  <author></author>
	  <pubDate>2019-10-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42588</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42588">https://programmers.co.kr/learn/courses/30/lessons/42588</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>Stack에 탑의 위치, 높이를 함께 저장하기위해 Top클래스를 선언한 후, Stack에 푸쉬한다.</li>
  <li>현재 탑을 now, 왼쪽 값을 next에 저장한다.</li>
  <li>now의 높이가 next 높이보다 크면(now.height&gt;next.height) answer에 next의 위치를 저장한다.</li>
  <li>아니라면 next는 한 칸 왼쪽 값을 같는다.</li>
  <li>마지막까지 찾지 못하면 answer=0한다.</li>
  <li>이때 패스하는 값들은 stTemp에 다시 써야하기 때문에 stTemp에 저장한다.</li>
  <li>answer에 값이 채워지고 stTemp에 값이 존재할 경우 다시 원상복구한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Top</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Top</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span><span class="o">=</span><span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">stTemp</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Top</span> <span class="n">now</span><span class="o">,</span> <span class="n">next</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Top</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()||</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()&lt;</span><span class="mi">2</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">now</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>          
            <span class="k">while</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">height</span><span class="o">&gt;=</span><span class="n">next</span><span class="o">.</span><span class="na">height</span><span class="o">){</span><span class="c1">//next조건에 안맞음</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">stTemp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                    <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//next가 없다면</span>
                    <span class="n">next</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="c1">//알맞은 next찾음</span>


            <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">next</span><span class="o">.</span><span class="na">location</span><span class="o">;</span>    
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">stTemp</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//stTemp에 값이 있다면 원상복구</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stTemp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191030_1.PNG" alt="실행결과" />
실패.
answer[2]의 값이 다르다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>next의 조건에 안맞아 왼쪽으로 한 칸 이동하였는데, 이때 조건에 맞지않은 next의 값을 따로 저장해두지 않아 방문해야 할 3번째 탑이 사라졌다.
라인19: next 조건에 맞지 않으므로 왼쪽에 조건에 맞는 값이 있는지 확인해야한다. 이때 현재 next의 값이 사라지지 않도록 스택이 비어있는지 유무에 상관없이 stTemp에 저장해둬야한다.</p>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>next조건에 맞지 않는 값이 사라지지않도록 stTemp에 저장한다. 이때 스택 st에 원소가 존재하는지 유무와는 관계없다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Top</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Top</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span><span class="o">=</span><span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">stTemp</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Top</span> <span class="n">now</span><span class="o">,</span> <span class="n">next</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Top</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()||</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()&lt;</span><span class="mi">2</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">now</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>          
            <span class="k">while</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">height</span><span class="o">&gt;=</span><span class="n">next</span><span class="o">.</span><span class="na">height</span><span class="o">){</span><span class="c1">//next조건에 안맞음</span>
                <span class="n">stTemp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//next가 없다면</span>
                    <span class="n">next</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="c1">//알맞은 next찾음</span>


            <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">next</span><span class="o">.</span><span class="na">location</span><span class="o">;</span>    
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">stTemp</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//stTemp에 값이 있다면 원상복귀</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stTemp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Document nowDoc: ArrayList의 첫 번째 값(또는 그 다음 값)을 나타낸다. 앞에 최댓값이 있을 경우 다음으로 넘어간다.</li>
  <li>Document nextDoc: nowDoc 뒤의 값들이다.</li>
  <li>ArrayList<Document> array: 중요도와 순서의 값을 가지는 Document클래스를 생성하여 ArrayList에 저장한다. 중간에서 값을 삭제하고 맨 뒤에 추가할 경우가 있으므로 이가 쉬운 ArrayList를 사용한다.</Document></li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191030_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>스택으로 풀다가 잘 안되서 링크드리스트를 생각했는데, next의 값을 바꿔버리면 다음 노드를 방문할 수 없으므로 포기했다.
다음으로 더블링크드리스트로 next로 탑을 순서대로 하고 prev로 송신할 수 있는 탑을 가리키도록 하는 건 어떨까 생각해봤지만, 라이브러리에 있는 구조를 이용하면서 prev와 next를 어떻게 바꾸는지 모르겠어서 포기했다(그렇다고 더블을 구현하는건 아닌 것 같아서^0^).</p>

	  ]]></description>
	</item>


</channel>
</rss>
