<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 그래프_가장 먼 노드</title>
	  <link>/blog//algo-prog49189</link>
	  <author></author>
	  <pubDate>2019-12-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog49189</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/49189">https://programmers.co.kr/learn/courses/30/lessons/49189</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>ArrayList를 이용하여 그래프를 구현한다.</li>
  <li>boolean[] visited로 노드 방문을 체크하고, int[] count로 1에서부터 해당 노드까지의 길이를 저장한다.</li>
  <li>거리가 가장 먼 노드들만을 세서 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">edge</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">//그래프 구현</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">edge</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span>
        <span class="o">}</span>
        <span class="c1">//노드 연결</span>
        <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">node:</span><span class="n">edge</span><span class="o">){</span>
            <span class="n">a</span><span class="o">=</span><span class="n">node</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">b</span><span class="o">=</span><span class="n">node</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span><span class="c1">//1과의 거리 저장</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span><span class="c1">//방문여부</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span><span class="c1">//시작점</span>
        <span class="n">visited</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">visited</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//1에서 시작(0은 사용안함)</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">now</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">v:</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">)){</span><span class="c1">//나와 연결된 노드들</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">v</span><span class="o">]){</span><span class="c1">//방문하지 않은 곳이라면</span>
                    <span class="n">count</span><span class="o">[</span><span class="n">v</span><span class="o">]=</span><span class="n">count</span><span class="o">[</span><span class="n">now</span><span class="o">]+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//1과의 길이 저장</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">v</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">v</span><span class="o">);</span><span class="c1">//이곳과 연결된 노드에 방문하기 위함</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">//System.out.println(Arrays.toString(count));</span>
        <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//1과 가장 멀리 떨어진 노드와의 길이 저장</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">cnt:</span><span class="n">count</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">max</span><span class="o">&lt;</span><span class="n">cnt</span><span class="o">){</span><span class="c1">//더 큰 길이가 있다면 그게 max</span>
                <span class="n">max</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">max</span><span class="o">==</span><span class="n">cnt</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191211_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">ArrayList를 이용하여 그래프를 구현한다.</span></strong>
<img src="./assets/images/191211_2.PNG" alt="실행결과" width="300" height="300" />
    <ul>
      <li>노드가 1부터 시작하므로 0은 사용하지 않는다.</li>
      <li>ArrayList&lt;ArrayList<Integer>&gt;로 선언하여 리스트가 리스트를 원소로 가지게 한다.</Integer></li>
    </ul>
  </li>
  <li><strong><span style="color:navy">큐로 노드들을 방문한다.</span></strong>
    <ul>
      <li>1부터 시작해서 1과 연결된 노드들을 방문한다.</li>
      <li>이때 처음 방문하는 노드라면 1과의 거리를 count[i]에 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">count[]로 1과 제일 멀리 떨어진 노드들의 갯수를 센다.</span></strong>
    <ul>
      <li>max는 0으로 초기화하여 이보다 더 큰 거리가 나오면 max값을 바꾸고, answer=1로 초기화한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드 구현 자체는 어렵지 않았지만 아직도 문제를 보고 직접 풀기까지는 나에게 무리인 것 같다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>프로그래머스_가장 먼 노드_그래프(java) <a href="https://heedipro.tistory.com/233">https://heedipro.tistory.com/233</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
