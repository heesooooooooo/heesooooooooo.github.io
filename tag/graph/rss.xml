<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 그래프_순위</title>
	  <link>/blog//algo-prog49191</link>
	  <author></author>
	  <pubDate>2019-12-12T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog49191</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/49191">https://programmers.co.kr/learn/courses/30/lessons/49191</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>플로이드 와샬 알고리즘을 사용한다.</li>
  <li>알고리즘으로 계산한 최단 경로가 있는 갯수를 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="n">INF</span><span class="o">=</span><span class="mi">987654321</span><span class="o">;</span><span class="c1">//방문불가를 뜻함</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span><span class="o">[][]</span> <span class="n">scores</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
         <span class="kt">int</span> <span class="n">win</span><span class="o">,</span> <span class="n">lose</span><span class="o">;</span>
         <span class="c1">//배열 초기화</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">score:</span><span class="n">scores</span><span class="o">){</span>
             <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">score</span><span class="o">,</span> <span class="n">INF</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="c1">//대각선을 0</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">scores</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">scores</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="o">)</span> <span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="c1">//한방향 그래프 win-&gt;lose</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">result:</span><span class="n">results</span><span class="o">){</span>
             <span class="n">win</span><span class="o">=</span><span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
             <span class="n">lose</span><span class="o">=</span><span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
             <span class="n">scores</span><span class="o">[</span><span class="n">win</span><span class="o">][</span><span class="n">lose</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="c1">//scores[i][j]로 가는 최단경로 저장</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">k</span><span class="o">++){</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
                 <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                     <span class="k">if</span><span class="o">(</span><span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]+</span><span class="n">scores</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">]){</span>
                         <span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]+</span><span class="n">scores</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                     <span class="o">}</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="c1">// for(int[] score:scores){</span>
         <span class="c1">//     System.out.println(Arrays.toString(score));</span>
         <span class="c1">// }</span>
         <span class="c1">//선수들이 게임을 한 적이 있는지 확인</span>
         <span class="kt">boolean</span><span class="o">[]</span> <span class="n">flag</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
         <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">flag</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//사람 i 기준</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span><span class="c1">//나머지 j선수들과 게임한적 있는지 체크</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span><span class="c1">//나자신과 게임을 뜻하므로 패스</span>
                 <span class="k">if</span><span class="o">(</span><span class="n">scores</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">INF</span><span class="o">&amp;&amp;</span><span class="n">scores</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]==</span><span class="n">INF</span><span class="o">){</span><span class="c1">//경로가 존재하지 않으면(i와 j가 게임하지 않았다면)</span>
                     <span class="n">flag</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
                     <span class="k">break</span><span class="o">;</span><span class="c1">//모두와 게임을 해야하므로</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="c1">// System.out.println(Arrays.toString(flag));</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">flag</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="n">answer</span><span class="o">++;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191212_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">플로이드 와샬 알고리즘을 적용한다.</span></strong>
<img src="./assets/images/191212_4.png" alt="실행결과" width="300" height="300" />
    <ul>
      <li>그래프에서 모든 꼭짓점 사이의 최단 경로의 거리를 구하는 알고리즘이다.</li>
      <li>이 알고리즘을 이용하면 최단 경로를 알 수 있을 뿐만 아니라 연결되지 않은 경로(갈 수 없는 경로)도 알 수 있다.</li>
      <li>연결되지 않았다는 뜻은 선수 i, j의 승패를 알 수 없다는 뜻이다.</li>
      <li>직접 연결되지 않았지만 선수 k로 거쳐서 i, j가 연결된다면 선수의 승패를 알 수 있다(i, j가 게임하진 않았지만, i가 k한테 이겼고, k가 j한테 이겼다면 i는 j한테 이김을 알 수 있다).</li>
      <li>따라서 i, j 사이에 k를 거쳐가는 방법을 모두 찾아 최단경로를 결정하는 플로이드 와샬 알고리즘을 이용하면 선수들의 승패를 확인할 수 있다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">2차원 배열에 플로이드 와샬 알고리즘을 결과값을 저장한다.</span></strong>
    <ul>
      <li>int[][] scores로 n+1길이만큼 선언한다.</li>
      <li>선수는 1부터 시작하므로 배열을 n+1만큼 생성하여 0은 사용하지 않겠다.</li>
      <li>내가 나와 게임하는 경우는 없으므로 대각선은 0으로 초기화한다.</li>
      <li>나머지 값들은 INF에 적당히 큰 수를 넣어 이 값으로 저장한다.</li>
      <li>이때 큰 수를 넣는다고 Integer.MAX_VALUE를 넣으면 안된다.
<img src="./assets/images/191212_2.png" alt="실행결과" />
최단경로를 계산하기 위해 값을 서로 더하는데, int의 최댓값을 둘 다 더할 경우 오버플로우로 음수가 발생한다.</li>
      <li>win-&gt;lose 방향으로 한 방향 그래프를 만든다.</li>
      <li>3개 for문을 이용해 최단 경로를 찾는다. 이때 k는 거쳐가는 꼭짓점, i는 출발하는 꼭짓점, j는 도착하는 꼭짓점이다.</li>
      <li>즉, 선수 i, j의 승패를 알고자 할 때, i, j가 선수 k와 게임한 적이 있다면 해당 거리를 저장한다(INF에서 최단경로 거리값으로 저장되었으므로 선수 i, j간의 승패여부를 알 수 있다는 뜻).</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">승패를 알 수 없는 선수들을 찾는다.</span></strong>
    <ul>
      <li>boolean[] flag로 선수의 순위를 알 수 있는지에 대한 여부를 저장한다.</li>
      <li>일단 모두가 알 수 있다고 가정한 후, scores를 확인하면서 알 수 없는 선수에게 false를 준다.
<img src="./assets/images/191212_3.png" alt="실행결과" />
(0은 사용하지 않고, 대각선은 나자신이므로 빗금처리 했다.)</li>
      <li>선수 i를 기준으로, 선수 j와 승패를 알 수 있는지 확인한다. scores[i][j]와 scores[j][i]가 모두 INF면 선수 i, j간에 경로가 없다는 뜻이다. 즉, 게임을 한 적이 없고, 다른 선수를 통해서도 승패를 알 수 없으므로 flag[i]를 false로 바꾼다.</li>
      <li>선수 i는 나를 제외한 n-1명과 방문할 수 있어야 승패를 알 수 있다. 따라서 하나라도 경로가 존재하지 않는다면 i의 선수 승패는 알 수 없으므로 break로 i에 대한 탐색을 종료한다.</li>
      <li>마지막으로 flage의 true 갯수를 리턴하면 그것이 정답이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>선수의 승패를 알기 위해 플로이드 와샬 알고리즘을 적용하겠다는 생각을 하는 사람들이 대단하다. 알고리즘을 이해하는 것은 어렵지 않았지만, 왜 이 문제를 플로이드 와샬 알고리즘으로 푸는지 이해하는 시간이 오래 걸렸다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 순위 <a href="https://jayrightthere.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84">https://jayrightthere.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84</a></li>
  <li>[BOJ] 키 순서 <a href="https://jayrightthere.tistory.com/entry/BOJ-%ED%82%A4%EC%88%9C%EC%84%9C">https://jayrightthere.tistory.com/entry/BOJ-%ED%82%A4%EC%88%9C%EC%84%9C</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 그래프_가장 먼 노드</title>
	  <link>/blog//algo-prog49189</link>
	  <author></author>
	  <pubDate>2019-12-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog49189</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/49189">https://programmers.co.kr/learn/courses/30/lessons/49189</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>ArrayList를 이용하여 그래프를 구현한다.</li>
  <li>boolean[] visited로 노드 방문을 체크하고, int[] count로 1에서부터 해당 노드까지의 길이를 저장한다.</li>
  <li>거리가 가장 먼 노드들만을 세서 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">edge</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">//그래프 구현</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">edge</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span>
        <span class="o">}</span>
        <span class="c1">//노드 연결</span>
        <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">node:</span><span class="n">edge</span><span class="o">){</span>
            <span class="n">a</span><span class="o">=</span><span class="n">node</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">b</span><span class="o">=</span><span class="n">node</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span><span class="c1">//1과의 거리 저장</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span><span class="c1">//방문여부</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span><span class="c1">//시작점</span>
        <span class="n">visited</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">visited</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//1에서 시작(0은 사용안함)</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">now</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">v:</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">)){</span><span class="c1">//나와 연결된 노드들</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">v</span><span class="o">]){</span><span class="c1">//방문하지 않은 곳이라면</span>
                    <span class="n">count</span><span class="o">[</span><span class="n">v</span><span class="o">]=</span><span class="n">count</span><span class="o">[</span><span class="n">now</span><span class="o">]+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//1과의 길이 저장</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">v</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">v</span><span class="o">);</span><span class="c1">//이곳과 연결된 노드에 방문하기 위함</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">//System.out.println(Arrays.toString(count));</span>
        <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//1과 가장 멀리 떨어진 노드와의 길이 저장</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">cnt:</span><span class="n">count</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">max</span><span class="o">&lt;</span><span class="n">cnt</span><span class="o">){</span><span class="c1">//더 큰 길이가 있다면 그게 max</span>
                <span class="n">max</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">max</span><span class="o">==</span><span class="n">cnt</span><span class="o">)</span> <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191211_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">ArrayList를 이용하여 그래프를 구현한다.</span></strong>
<img src="./assets/images/191211_2.png" alt="실행결과" width="300" height="300" />
    <ul>
      <li>노드가 1부터 시작하므로 0은 사용하지 않는다.</li>
      <li>ArrayList&lt;ArrayList<Integer>&gt;로 선언하여 리스트가 리스트를 원소로 가지게 한다.</Integer></li>
    </ul>
  </li>
  <li><strong><span style="color:navy">큐로 노드들을 방문한다.</span></strong>
    <ul>
      <li>1부터 시작해서 1과 연결된 노드들을 방문한다.</li>
      <li>이때 처음 방문하는 노드라면 1과의 거리를 count[i]에 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">count[]로 1과 제일 멀리 떨어진 노드들의 갯수를 센다.</span></strong>
    <ul>
      <li>max는 0으로 초기화하여 이보다 더 큰 거리가 나오면 max값을 바꾸고, answer=1로 초기화한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드 구현 자체는 어렵지 않았지만 아직도 문제를 보고 직접 풀기까지는 나에게 무리인 것 같다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>프로그래머스_가장 먼 노드_그래프(java) <a href="https://heedipro.tistory.com/233">https://heedipro.tistory.com/233</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
