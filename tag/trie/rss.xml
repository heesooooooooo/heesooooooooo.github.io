<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/SWEA] 3135: 홍준이의 사전놀이</title>
	  <link>/blog//algo-swea3135</link>
	  <author></author>
	  <pubDate>2020-09-15T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-swea3135</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV_6pTXqsXUDFAWS&amp;categoryId=AV_6pTXqsXUDFAWS&amp;categoryType=CODE">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV_6pTXqsXUDFAWS&amp;categoryId=AV_6pTXqsXUDFAWS&amp;categoryType=CODE</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>트라이를 이용한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserSolution</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="n">Trie</span><span class="o">[]</span> <span class="n">tries</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">tries</span><span class="o">=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">buffer_size</span><span class="o">,</span> <span class="n">String</span> <span class="n">buf</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">root</span><span class="o">=</span><span class="n">buf</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
        <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">].</span><span class="na">insert</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">query</span><span class="o">(</span><span class="kt">int</span> <span class="n">buffer_size</span><span class="o">,</span> <span class="n">String</span> <span class="n">buf</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">root</span><span class="o">=</span><span class="n">buf</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">].</span><span class="na">getCnt</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Trie</span><span class="o">{</span>
    <span class="n">Node</span> <span class="n">root</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">root</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">root</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
            <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCnt</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">root</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> 
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200915_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Usersolution</span></strong>
    <ul>
      <li>init(): Trie[] 배열을 초기화한다. 인덱스 0번부터 a로 쓸 것이므로 배열 사이즈를 26으로 초기화했다.</li>
      <li>insert(): 문자열 buf의 시작 알파벳 아스키코드를 root에 저장한다. 배열 trie에 해당 알파벳으로 시작한 단어가 없다면, 트라이 객체를 하나 선언한 후, Trie클래스의 insert()를 호출한다.</li>
      <li>query(): buf의 시작 알파벳을 찾아 root에 저장한다. 해당 배열이 null이라면 root로 시작하는 단어가 없어서 객체 선언이 안된것이므로 0을 리턴한다. 아닐 경우, getCnt()로 개수를 받아 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Trie</span></strong>
    <ul>
      <li>Trie(): 생성자이다. 시작 노드(root)를 만든다.</li>
      <li>insert(): node는 트라이 내에서 현재 내 위치이다. word의 문자를 하나씩 체크해 트라이에 저장한다. 현재 node의 자식들(해시맵)에 word.charAt(i)가 있는지 확인한다. 없다면 하나 생성 후, 거기로 내려간다. 현재 삽입한(또는 기존에 존재하는) node까지 단어가 일치하는 것이므로 node.cnt++한다.</li>
      <li>getCnt(): node로 트리를 이동한다. query의 문자를 하나씩 체크하며, 현재 위치 node의 자식 노드들 중 i값이 없다면 query 단어가 없는 것이므로 0을 리턴한다. for문을 종료해야 그곳 node.cnt를 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Node</span></strong>
    <ul>
      <li>children은 node의 자식 노드들을 해시맵으로 저장한다. 중복을 거르고 빠르게 찾을 수 있도록 해시맵을 사용한다.</li>
      <li>cnt는 현재 node까지 일치하는 단어의 개수이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[JAVA/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 가사 검색 <a href="https://iamheesoo.github.io/blog//algo-prog60060">https://iamheesoo.github.io/blog//algo-prog60060</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 가사 검색</title>
	  <link>/blog//algo-prog60060</link>
	  <author></author>
	  <pubDate>2020-08-16T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog60060</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60060">https://programmers.co.kr/learn/courses/30/lessons/60060</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>자료구조 트라이(Trie)를 이용하여 문제를 해결한다.</li>
  <li>word를 처음부터 저장하는 트라이 하나와, 뒤에서부터 저장하는 트라이 하나를 만든다.</li>
  <li>query가 ?로 시작하면 뒤에서부터 저장한 트라이를 탐색해 일치하는 단어의 개수를 리턴하고, ?로 끝나면 처음부터 저장한 트라이를 탐색한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">queries</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Trie</span><span class="o">[]</span> <span class="n">tries</span><span class="o">=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">[</span><span class="mi">100001</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">word:</span><span class="n">words</span><span class="o">)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
			<span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">].</span><span class="na">insert</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">else</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">].</span><span class="na">getCount</span><span class="o">(</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Trie</span><span class="o">{</span>
	<span class="n">Node</span> <span class="n">front</span><span class="o">,</span> <span class="n">back</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">back</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">insertFront</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
		<span class="n">insertBack</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertFront</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">front</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertBack</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">back</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">return</span> <span class="n">getCountFromBack</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
		<span class="k">else</span> <span class="k">return</span> <span class="nf">getCountFromFront</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getCountFromFront</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">front</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getCountFromBack</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">back</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">children</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200816_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Node 클래스를 만든다</span></strong>
    <ul>
      <li>Node는 트라이에 사용된다.</li>
      <li>하나의 노드는 자식을 가지며, 이때 자식은 영문자 a~z중 하나로 탐색 시간을 줄이기 위해 HashMap을 사용한다.</li>
      <li>루트에서 현재 노드까지의 깊이를 count에 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Trie 클래스를 만든다</span></strong>
    <ul>
      <li><img src="./assets/images/200816_2.PNG" alt="실행결과" /></li>
      <li>트라이는 word를 처음부터 저장하는 것 하나(front)와, 뒤에서부터 저장하는 것(back) 하나를 둔다.</li>
      <li>query가 “?”로 시작하면 back을 탐색하면 되고, “?”로 끝나면 front를 탐색한다.</li>
      <li>따라서, insert()가 호출되었을 때, front와 back에 모두 word를 삽입한다.</li>
      <li>insertFront(): 시작 루트가 front이므로 node를 front로 초기화한다. 현재 노드까지 일치하는 문자열이 하나 더 생긴 것이므로 node.count++한다. word의 문자를 하나씩 확인하며 해당 문자가 front에 해당 노드의 children인 HashMap에 들어가 있지 않다면(computeIfAbsent) key는 word.charAt(i), value는 new Node()를 만든 후, 해당 node로 이동한다.</li>
      <li>getCount(): query가 ?로 시작하면 뒤에서부터 탐색하고, 아니면 앞에서부터 탐색한다.</li>
      <li>getCountFromFront(): query에 물음표가 뒤에 있는 경우이다. 따라서 query의 문자를 하나씩 확인하며, 물음표가 나온 경우 지금까지의 노드 개수를 리턴한다. 또는, 현재 query의 문자가 존재하지 않을 경우 0을 리턴한다.</li>
      <li>solution(): tries의 인덱스는 query의 길이를 뜻한다. 예를 들어 query 길이가 5인 문자들은 모두 tries[5]에서 저장된다. query의 길이는 100,000이하이므로 배열의 길이는 100,001이어야 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 2020 KAKAO BLIND RECRUITMENT 가사 검색 (Java) <a href="https://leveloper.tistory.com/99">https://leveloper.tistory.com/99</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/자료구조] 트라이 (Trie)</title>
	  <link>/blog//java-trie</link>
	  <author></author>
	  <pubDate>2020-08-16T09:00:00+09:00</pubDate>
	  <guid>/blog//java-trie</guid>
	  <description><![CDATA[
	     <h2 id="트라이"><span style="color:navy">트라이</span></h2>

<h3 id="1-클래스">1. 클래스</h3>
<p><img src="./assets/images/200816_3.png" alt="구조" /></p>

<h3 id="2-특징">2. 특징</h3>
<ul>
  <li>정렬된 트리 구조이다.</li>
  <li>자식노드를 맵&lt;key, value&gt; 형태로 가지고 있다.</li>
  <li>루트를 제외한 노드의 자손들은 해당 노드와 공통 접두어를 가진다.</li>
</ul>

<h3 id="3-선언">3. 선언</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Trie</span><span class="o">{</span>
	<span class="n">Node</span> <span class="n">root</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span> <span class="n">root</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span> <span class="n">root</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">root</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">children</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="4-주요-메소드">4. 주요 메소드</h3>
<ol>
  <li><code class="highlighter-rouge">Node</code>
    <ul>
      <li>자식노드는 HashMap에 저장된다.</li>
      <li>현재 노드까지의 같은 접두사를 가지는 노드의 개수를 count에 저장한다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public void insert(String word)</code>
    <ul>
      <li>역할: word를 트라이에 저장한다.</li>
      <li>computeIfAbsent()를 통해 word.charAt(i)가 node.children에 없다면 해시맵에 넣은 후, 해당 노드로 이동한다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public int getCount(String query)</code>
    <ul>
      <li>역할: query가 존재한다면, 그 개수를 리턴한다.</li>
    </ul>
  </li>
</ol>

<h3 id="7-참고">7. 참고</h3>
<ul>
  <li>[자료구조] Trie(트라이)-1 : 기초 개념 <a href="https://the-dev.tistory.com/2">https://the-dev.tistory.com/2</a></li>
  <li>[자료구조] Trie(트라이)-2 : 자바로 구현하기 <a href="https://the-dev.tistory.com/3">https://the-dev.tistory.com/3</a></li>
  <li>코딩테스트 연습 2020 KAKAO BLIND RECRUITMENT 가사 검색 <a href="https://programmers.co.kr/learn/courses/30/lessons/60060">https://programmers.co.kr/learn/courses/30/lessons/60060</a></li>
  <li>(코테에 쓴 코드를 복붙한 거라 해당 코드는 정석이 아니다.)</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
