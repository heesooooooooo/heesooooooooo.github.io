<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_디스크 컨트롤러</title>
	  <link>/blog//algo-prog42627</link>
	  <author></author>
	  <pubDate>2019-11-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42627</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42627">https://programmers.co.kr/learn/courses/30/lessons/42627</a></p>

<h3 id="테스트케이스-추가">테스트케이스 추가</h3>
<ul>
  <li>참고로 파라미터 jobs는 정렬이 되어있지않다. 이정도는 문제설명에 적어줘야 하는데. 떼잉쯧;</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">jobs(int[][])</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[24, 10], [18, 39], [34, 20], [37, 5], [47, 22], [20, 47], [15, 2], [15, 34], [35, 43], [26, 1]]</td>
      <td style="text-align: center">74</td>
    </tr>
    <tr>
      <td style="text-align: center">[[24, 10], [18, 39], [34, 20], [37, 5], [47, 22], [20, 47], [15, 34], [15, 2], [35, 43], [26, 1]]</td>
      <td style="text-align: center">74</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>소요시간(time)이 작은 순서, 같다면 요청시간(start)이 작은 순서가 우선순위가 높도록 우선순위큐를 생성한다.</li>
  <li>현재 시간(now)보다 요청시간이 같거나 작은 작업을 선택해 요청~종료까지 걸린 시간을 계산한 후 now와 answer을 갱신한다.</li>
  <li>없으면 현재 시간엔 수행할 작업이 없다는 뜻이므로 now++한다.</li>
  <li>계산이 끝나면 작업 갯수만큼 answer을 나눠 평균을 구한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Job</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Job</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Job</span> <span class="n">j</span><span class="o">){</span>
        <span class="c1">//소요시간 작은 게 우선순위 높음</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//소요시간이 같다면</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">start</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//요청시점 작은게 우선순위 높음</span>
            <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">jobs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">],</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">pq</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">Job</span> <span class="n">job</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
                <span class="n">job</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;=</span><span class="n">now</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">now</span><span class="o">+</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">-</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
                    <span class="n">now</span><span class="o">+=</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">;</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">now</span><span class="o">++;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">/=</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191107_1.PNG" alt="실행결과" />
실패.
출력문을 찍은 결과 list에 모든 값들이 들어가지 않았다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>두 번째 for문에서 i의 범위가 pq.size()인데, pq는 팝하면서 제거되어 사이즈가 계속 변하므로 적합하지 않다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>pq.size()가 아닌 고정값 jobs.length로 for문 조건을 변경한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Job</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Job</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Job</span> <span class="n">j</span><span class="o">){</span>
        <span class="c1">//소요시간 작은 게 우선순위 높음</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//소요시간이 같다면</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">start</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//요청시점 작은게 우선순위 높음</span>
            <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">jobs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">],</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">Job</span> <span class="n">job</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
                <span class="n">job</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;=</span><span class="n">now</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">now</span><span class="o">+</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">-</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
                    <span class="n">now</span><span class="o">+=</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">;</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span><span class="c1">//작업이 완료되면 break로 다시 for문을 처음부터 방문하여 놓치는 작업이 없도록 한다</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">now</span><span class="o">++;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">/=</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>PriorityQueue<Job> pq: 소요시간이 작은 순서, 같다면 요청시간이 작은 순서로 정렬한다.</Job></li>
  <li>ArrayList<Job> list: pq를 arraylist에 저장하여 코드에 사용한다. 같은 데이터를 가지고 있는데 굳이 arraylist에 저장하여 사용하는 이유는, pq가 요청시간을 기준으로 정렬된 것이 아니기 때문이다. 현재 시간(now)에 따라 이전~현재까지의 작업들을 모두 확인해야하는데, 우선순위큐로는 정렬된 루트노드의 값만 가져올 수 있고 다음 노드를 방문하기 위해서는 무조건 poll해야한다. 하지만 미래의 작업이 루트로 갈 수 있는데, 이때는 삭제하면 안되므로 arrayList를 이용해 값을 삭제하지 않아도 다음 값을 찾을 수 있게 한다.</Job></li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191107_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>Compare을 Override하는 법에 대해 배울 수 있었다. 처음에는 jobs 배열을 요청시간 오름차순으로 정렬해서 사용하고 싶었는데, Array.sort()나 Collections.sort()를 사용하려고 하니 Override한 compare를 쓰는 바람에 애먹었다. 결국에는 배열을 정리할 필요 없이 처음부터 우선순위큐를 사용했는데, 이건 다른 사람 코드를 보고 나도 따라한 것이다. 나도 이렇게 바로 떠오르면 좋으련만.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][힙(heap)]디스크 컨트롤러 <a href="https://jee-goo.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%95%B4%EC%8B%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%8F%84%EC%9B%80%EB%A7%90">https://jee-goo.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%95%B4%EC%8B%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%8F%84%EC%9B%80%EB%A7%90</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_라면공장</title>
	  <link>/blog//algo-prog42629</link>
	  <author></author>
	  <pubDate>2019-11-06T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42629</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42629">https://programmers.co.kr/learn/courses/30/lessons/42629</a></p>

<p>이 문제는 정말 골치 아픈 문제였다. 코드가 아예 잘못된게 아니라 특정 테스트케이스만 통과하지 못해서 더 포기할 수 없었다. 개인적으로 포인트를 차감하는 방법으로 테스트케이스를 볼 수 있었으면 좋겠다. 아직도 내 코드가 틀린 이유를 모르겠으며, 성공한 다른 사람들의 코드와 차이점이 무엇인지 알 수 없다. 문제 해결을 위해 도전한 코드들을 모두 리뷰하기엔 너무 많아서 제일 최근 것 하나만 작성해야겠다.<br />
참고로 아래 테스트케이스를 추가하여 문제를 풀 것을 강력 추천한다. 테스트케이스를 생각하는 것도 골치 아파 죽는 줄 알았다.<br />
마지막 케이스도 내가 생각할 때에는 4를 리턴해야 할 것 같은데 내 코드와 다른 사람들 코드는 5를 리턴한다. 그래서 일단은 5라고 적어놓는다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">stock</th>
      <th style="text-align: center">dates</th>
      <th style="text-align: center">supplies</th>
      <th style="text-align: center">k</th>
      <th style="text-align: center">result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">[1,2,3,4]</td>
      <td style="text-align: center">[10,40,30,20]</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">[1,2,3,4,5]</td>
      <td style="text-align: center">[1,1,1,1,25]</td>
      <td style="text-align: center">30</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">[1,2,3,4,5]</td>
      <td style="text-align: center">[1,1,1,1,25]</td>
      <td style="text-align: center">30</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>오늘(이전 포함) 받을 수 있는 공급이 있다면 큐에 저장한다.</li>
  <li>dates의 값이 미래거나 마지막 공급까지 다 받은 경우라면 day에 오늘 날짜를 저장한다.</li>
  <li>큐에 값이 있고 재고가 더 필요하다면 큐에서 뽑아 stock에 추가하고 answer을 증가한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">stock</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dates</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">supplies</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">day</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">day</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stock</span><span class="o">&gt;=</span><span class="n">dates</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span><span class="c1">//이전날들값은 큐에 추가</span>
                    <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">supplies</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stock</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">[</span><span class="n">i</span><span class="o">]||</span><span class="n">i</span><span class="o">==</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//미래 또는 다넣음</span>
                    <span class="n">day</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">stock</span><span class="o">!=</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">stock</span><span class="o">&lt;</span><span class="n">k</span><span class="o">){</span>
                <span class="n">stock</span><span class="o">+=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191106_1.PNG" alt="실행결과" />
실패. 테스트3, 5에서 틀렸다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>알 수 없다. 이젠 지쳤다. 다른 사람 코드를 참고해야 할 때다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>원래 공장으로부터 공급받는 k 이전까지 체크한다.</li>
  <li>배열 순회에 사용할 idx가 dates 인덱스 범위에 만족하고, 오늘 받을 수 있는 공급이 있다면 큐에 삽입한다. idx++한다.</li>
  <li>만약 오늘이 stock을 다 쓰는 날이라면 큐에서 pop하여 stock에 추가하고 answer++한다.</li>
  <li>하루가 지나갔음을 나타내기 위해 day++한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">stock</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dates</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">supplies</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">day</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">day</span><span class="o">&lt;</span><span class="n">k</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">&amp;&amp;</span><span class="n">day</span><span class="o">==</span><span class="n">dates</span><span class="o">[</span><span class="n">idx</span><span class="o">]){</span>
                <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">supplies</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
                <span class="n">idx</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">day</span><span class="o">==</span><span class="n">stock</span><span class="o">){</span>
                <span class="n">stock</span><span class="o">+=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">day</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191106_2.PNG" alt="실행결과" />
행복하지 않은 성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>이해할 수 없다. 컴퓨터의 세계는 이해할 수 없어T_T</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_주식가격</title>
	  <link>/blog//algo-prog42584</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42584</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42584">https://programmers.co.kr/learn/courses/30/lessons/42584</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>이중 for문을 사용하여 i를 기준으로 두고, j로 뒷 원소들과 비교한다.</li>
  <li>i보다 같거나 큰 원소들의 갯수를 세서 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="n">prices</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
                    <span class="n">cnt</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">cnt</span><span class="o">;</span>   
            <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191102_4.PNG" alt="실행결과" />
실패. 테스트케이스만 통과하고 실제 검사에서는 모두 틀렸다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>테스트케이스만 생각하고 원소에 작은 값이 나올 경우를 생각하지 않았다. 아래의 케이스도 생각해준다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">prices</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[4,2,3,2,3]</td>
      <td style="text-align: center">[1,3,1,1,0]</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>이중for문을 돌다가 i보다 큰 j를 발견하면 그 뒤는 볼 필요도 없으므로 answer[i]=j-i를 넣고 break한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">prices</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
                    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>라인12: i보다 큰 j를 발견했다면 유지한 초를 계산(j-i)후, break문으로 다음 i로 넘어간다.</li>
  <li>라인16: 마지막 j까지 체크했지만 i보다 큰 j를 발견하지 못했다면 유지한 초를 계산한다. 해당 if문은 i가 마지막 j까지 순회를 비교를 끝냈을 경우에만 answer에 값을 넣을 수 있도록 하였다.</li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191104_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>스택, 큐 문제지만 배열을 이용해서 쉽게 풀 수 있었다. 여담으로 코드에 System 출력문을 써놓고 돌렸더니 효율성에서 죄다 실패가 떴었다. 출력문을 지우니 모두 성공하긴 했는데, 하마터면 더 좋은 효율성을 찾아 머리를 쥐어짤 뻔했다. 휴;</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_더 맵게</title>
	  <link>/blog//algo-prog42626</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42626</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42626">https://programmers.co.kr/learn/courses/30/lessons/42626</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>가장 맵지 않은, scoville이 낮은 원소를 사용하므로 우선순위가 낮은 순서로 정렬, 리턴하는 우선순위큐를 사용한다.</li>
  <li>하나라도 K보다 작다면, 주어진 공식을 이용해 새 조합을 만든다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">scoville</span><span class="o">,</span> <span class="kt">int</span> <span class="n">K</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">;</span>
         <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">scoville</span><span class="o">){</span>
             <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">while</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">peek</span><span class="o">()&lt;</span><span class="n">K</span><span class="o">){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">){</span>
                 <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span><span class="o">{</span>
                 <span class="n">a</span><span class="o">=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                 <span class="n">b</span><span class="o">=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                 <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">a</span><span class="o">+(</span><span class="n">b</span><span class="o">*</span><span class="mi">2</span><span class="o">));</span>
                 <span class="n">answer</span><span class="o">++;</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>PriorityQueue<Integer> pq: 스코빌 지수가 낮은 순으로 뽑을 수 있게 우선순위큐를 사용한다.</Integer></li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191104_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>우선순위큐를 사용할 기회가 별로 없었는데, 이번을 통해 사용하는 법을 배워야겠다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_쇠막대기</title>
	  <link>/blog//algo-prog42585</link>
	  <author></author>
	  <pubDate>2019-11-02T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42585</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42585">https://programmers.co.kr/learn/courses/30/lessons/42585</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>()을 사용하는 문제이므로 스택을 이용한다.</li>
  <li>(은 스택에 넣는다.</li>
  <li>)인 경우 앞이 (라면 레이저이다.</li>
  <li>))이라면 닫는 괄호이다.</li>
</ol>

<p>i) ()인 경우.
<img src="./assets/images/191102_2.png" alt="설명1" />
이 경우는 레이저이다. 위와 같이 ()를 제외한 여는 괄호 갯수 만큼 막대기가 생긴다.</p>

<p>ii) ))인 경우.
<img src="./assets/images/191102_3.png" alt="설명1" />
쇠막대기의 끝을 나타낸다. 이 경우는 항상 1이다. 끝난 쇠막대기는 하나밖에 없기 때문이다.</p>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">arrangement</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
        <span class="kt">char</span> <span class="n">ch</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">arrangement</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">ch</span><span class="o">=</span><span class="n">arrangement</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">'('</span><span class="o">){</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">ch</span><span class="o">==</span><span class="sc">')'</span><span class="o">){</span>
                <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arrangement</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)==</span><span class="sc">'('</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
                <span class="o">}</span>  
                <span class="k">else</span><span class="o">{</span>
                    <span class="n">answer</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Stack<Character> st: arrangement를 char형태로 하나씩 넣는다. 경험상 괄호 문제는 스택으로 푸는 경우가 대부분이다.</Character></li>
  <li>char ch: String형태의 arrangement를 문자 하나씩 받아와 코드를 진행한다.</li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191102_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>처음 문제를 접했을 때는 그림이 복잡해보여서 어려울 것이라고 생각했는데, 이해만 하면 간단한 문제였다. 앞으로는 자신감을 갖고 문제를 풀어야겠다!</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_다리를 지나는 트럭</title>
	  <link>/blog//algo-prog42583</link>
	  <author></author>
	  <pubDate>2019-11-01T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42583</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42583">https://programmers.co.kr/learn/courses/30/lessons/42583</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>큐를 이용해 다리를 지나고 있는 트럭을 관리한다.</li>
  <li>트럭의 무게와 다리를 지나는 시간을 인자로 가지는 클래스 Truck을 생성한다.</li>
  <li>다리에 다음 트럭이 들어올 자리가 있다면 큐에 삽입한다.</li>
  <li>큐를 순회하며 트럭에게 1초씩 추가하고, 경과시간이 다 채워지면 큐에서 삭제한다. answer에도 1을 추가하여 다리 건너는 시간을 측정한다.</li>
  <li>마지막 트럭까지 다리를 건넌다면 while문을 빠져나와 answer을 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Truck</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">weight</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Truck</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">weight</span><span class="o">=</span><span class="n">w</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">bridge_length</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">truck_weights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>

        <span class="kt">int</span> <span class="n">q_weight</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">truck_idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">truck_idx</span><span class="o">&lt;</span><span class="n">truck_weights</span><span class="o">.</span><span class="na">length</span><span class="o">&amp;&amp;</span><span class="n">q_weight</span><span class="o">+</span><span class="n">truck_weights</span><span class="o">[</span><span class="n">truck_idx</span><span class="o">]&lt;=</span><span class="n">weight</span><span class="o">){</span><span class="c1">//다리에 다음 트럭이 들어올 자리가 있다면</span>
                <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Truck</span><span class="o">(</span><span class="n">truck_weights</span><span class="o">[</span><span class="n">truck_idx</span><span class="o">],</span><span class="mi">0</span><span class="o">));</span>
                <span class="n">q_weight</span><span class="o">+=</span><span class="n">truck_weights</span><span class="o">[</span><span class="n">truck_idx</span><span class="o">];</span>
                <span class="n">truck_idx</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">for</span><span class="o">(</span><span class="n">Truck</span> <span class="nl">t:</span><span class="n">q</span><span class="o">){</span><span class="c1">//1초 추가</span>
                <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
                <span class="n">answer</span><span class="o">++;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span><span class="c1">//경과시간이 다 채워지면 삭제</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">truck_idx</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="n">truck_weights</span><span class="o">.</span><span class="na">length</span><span class="o">&amp;&amp;</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191101_2.PNG" alt="실행결과" />
실패.
오류 발생.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>해당 오류는 수정을 허용하지 않는 객체를 수정할 때 발생하는 exception이다.
라인29 for문에서 큐의 모든 Truck을 순회하는데, if 조건문으로 큐의 원소가 삭제되면 큐의 크기와 for문 인덱스의 불일치 때문에 에러가 발생한다.
따라서 Iterator를 이용하여 루프 도중 아이템을 오류없이 삭제해야 한다.
또한, 라인36에서 if 조건이 truck_idx==truck_weight.length-1로 바뀌어야 하고, 바뀐다 해도 truck_idx가 마지막이지만 아직 마지막 아이템을 사용하지 않았으며 큐가 비어있을 경우에 break에 걸려 종료될 수 있다(테스트1).</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>다리는 건너는 트럭(q_bridge)과 대기 트럭(q_wait)을 저장하는 큐를 두 개 선언한다.</li>
  <li>대기 트럭에 Truck형태로 값을 넣은 후, 조건이 맞을 때 q_bridge에 넣는다.</li>
  <li>Iterator를 사용하여 경과시간이 다 된 트럭은 삭제한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Truck</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">weight</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Truck</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">weight</span><span class="o">=</span><span class="n">w</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">bridge_length</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">truck_weights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_bridge</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_wait</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">w:</span><span class="n">truck_weights</span><span class="o">){</span>
            <span class="n">q_wait</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Truck</span><span class="o">(</span><span class="n">w</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">bridge_weight</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">q_wait</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">bridge_weight</span><span class="o">+</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">&lt;=</span><span class="n">weight</span><span class="o">){</span>
                <span class="n">bridge_weight</span><span class="o">+=</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
                <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">Iterator</span> <span class="n">iter</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
                <span class="n">Truck</span> <span class="n">t</span><span class="o">=(</span><span class="n">Truck</span><span class="o">)</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span>
                    <span class="n">bridge_weight</span><span class="o">-=</span><span class="n">t</span><span class="o">.</span><span class="na">weight</span><span class="o">;</span>
                    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191101_4.PNG" alt="실행결과" />
실패.</p>

<h3 id="4-문제점-1">4. 문제점</h3>
<p>while문을 시작하기 전에 q_bridge에 처음 값을 넣으므로 answer은 1부터 시작해아한다.
while(!q_bridge.isEmpty())가 잘못되었다.
테스트1에서 7이 다리를 홀로 건너는데, 다 건너고 나면 q_bridge는 0이 되고, 뒤에 트럭이 더 남아있지만 while문을 종료하기 때문이다.</p>

<h2 id="-ᐛ-و-세-번째-도전"><span style="color:navy">( ᐛ )و 세 번째 도전</span></h2>

<h3 id="1-설계-2">1. 설계</h3>
<ol>
  <li>answer은 1로 초기화한다.</li>
  <li>while문을 true로 바꾼 후, 두 큐가 다 비었을 때 while문을 종료하게 한다.</li>
</ol>

<h3 id="2-구현-2">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Truck</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">weight</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Truck</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">weight</span><span class="o">=</span><span class="n">w</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">bridge_length</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">truck_weights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_bridge</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_wait</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">w:</span><span class="n">truck_weights</span><span class="o">){</span>
            <span class="n">q_wait</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Truck</span><span class="o">(</span><span class="n">w</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">bridge_weight</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">q_wait</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">bridge_weight</span><span class="o">+</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">&lt;=</span><span class="n">weight</span><span class="o">){</span>
                <span class="n">bridge_weight</span><span class="o">+=</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
                <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">Iterator</span> <span class="n">iter</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
                <span class="n">Truck</span> <span class="n">t</span><span class="o">=(</span><span class="n">Truck</span><span class="o">)</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span>
                    <span class="n">bridge_weight</span><span class="o">-=</span><span class="n">t</span><span class="o">.</span><span class="na">weight</span><span class="o">;</span>
                    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">+</span><span class="s">"분에 "</span><span class="o">+</span><span class="n">t</span><span class="o">.</span><span class="na">weight</span><span class="o">+</span><span class="s">"나감"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">++;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">q_wait</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-2">3. 결과</h3>
<p><img src="./assets/images/191101_5.PNG" alt="실행결과" />
테스트3에서 실패.
이 테스트에서는 1초마다 트럭이 모두 들어온 후 100초부터 하나씩 나가야하는데 100초에 두 개가 나갔다.</p>

<h3 id="4-문제점-2">4. 문제점</h3>
<p>1초일 때 while문 밖에서 q_bridge에 처음 트럭을 넣으므로 첫 while문 방문 시에는 아무 것도 넣으면 안된다.</p>

<h2 id="-ᐛ-و-네-번째-도전"><span style="color:navy">( ᐛ )و 네 번째 도전</span></h2>

<h3 id="1-설계-3">1. 설계</h3>
<ol>
  <li>while문 첫 방문 시에는 q_bridge에 트럭을 넣지 않는다.</li>
</ol>

<h3 id="2-구현-3">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Truck</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">weight</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Truck</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">weight</span><span class="o">=</span><span class="n">w</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">bridge_length</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">truck_weights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_bridge</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;</span> <span class="n">q_wait</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Truck</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">w:</span><span class="n">truck_weights</span><span class="o">){</span>
            <span class="n">q_wait</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Truck</span><span class="o">(</span><span class="n">w</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">bridge_weight</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">answer</span><span class="o">!=</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="n">q_wait</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">bridge_weight</span><span class="o">+</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">&lt;=</span><span class="n">weight</span><span class="o">){</span>
                <span class="n">bridge_weight</span><span class="o">+=</span><span class="n">q_wait</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">weight</span><span class="o">;</span>
                <span class="n">q_bridge</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">q_wait</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">Iterator</span> <span class="n">iter</span><span class="o">=</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
                <span class="n">Truck</span> <span class="n">t</span><span class="o">=(</span><span class="n">Truck</span><span class="o">)</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span>
                    <span class="n">bridge_weight</span><span class="o">-=</span><span class="n">t</span><span class="o">.</span><span class="na">weight</span><span class="o">;</span>
                    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">++;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">q_bridge</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">q_wait</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Queue<Truck> q_bridge: 다리를 건너는 트럭을 넣는 큐이다.</Truck></li>
  <li>Queue<Truck> q_wait: 대기 중인 트럭들이다.</Truck></li>
  <li>int bridge_weight: 현재 다리를 건너고 있는 트럭들의 무게이다.</li>
  <li>Iterator iter: q_bridge의 원소들을 접근하기 위한 이터레이터이다.</li>
</ul>

<h3 id="3-결과-3">3. 결과</h3>
<p><img src="./assets/images/191101_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>데이터를 루프로 순회하고 있을 때 안전하게 삭제하는 Iterator를 배웠다. 테스트3이 안되는 이유를 몰라서 고민을 했었는데, 역시 컴퓨터는 거짓말을 하지 않는다….^ㅠ^</p>

<h2 id="참고"><span style="color:navy">참고</span></h2>
<ul>
  <li>루프 도중 안전하게 삭제하기  <a href="https://offbyone.tistory.com/170">https://offbyone.tistory.com/170</a></li>
  <li>java.util.concurrentModificationException이 발생했을 경우!  <a href="https://devnumgo.tistory.com/entry/javautilconcurrentModificationException%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0">https://devnumgo.tistory.com/entry/javautilconcurrentModificationException%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_탑</title>
	  <link>/blog//algo-prog42588</link>
	  <author></author>
	  <pubDate>2019-10-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42588</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42588">https://programmers.co.kr/learn/courses/30/lessons/42588</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>Stack에 탑의 위치, 높이를 함께 저장하기위해 Top클래스를 선언한 후, Stack에 푸쉬한다.</li>
  <li>현재 탑을 now, 왼쪽 값을 next에 저장한다.</li>
  <li>now의 높이가 next 높이보다 크면(now.height&gt;next.height) answer에 next의 위치를 저장한다.</li>
  <li>아니라면 next는 한 칸 왼쪽 값을 같는다.</li>
  <li>마지막까지 찾지 못하면 answer=0한다.</li>
  <li>이때 패스하는 값들은 stTemp에 다시 써야하기 때문에 stTemp에 저장한다.</li>
  <li>answer에 값이 채워지고 stTemp에 값이 존재할 경우 다시 원상복구한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Top</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Top</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span><span class="o">=</span><span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">stTemp</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Top</span> <span class="n">now</span><span class="o">,</span> <span class="n">next</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Top</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()||</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()&lt;</span><span class="mi">2</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">now</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>          
            <span class="k">while</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">height</span><span class="o">&gt;=</span><span class="n">next</span><span class="o">.</span><span class="na">height</span><span class="o">){</span><span class="c1">//next조건에 안맞음</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">stTemp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                    <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//next가 없다면</span>
                    <span class="n">next</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="c1">//알맞은 next찾음</span>


            <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">next</span><span class="o">.</span><span class="na">location</span><span class="o">;</span>    
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">stTemp</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//stTemp에 값이 있다면 원상복구</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stTemp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191030_1.PNG" alt="실행결과" />
실패.
answer[2]의 값이 다르다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>next의 조건에 안맞아 왼쪽으로 한 칸 이동하였는데, 이때 조건에 맞지않은 next의 값을 따로 저장해두지 않아 방문해야 할 3번째 탑이 사라졌다.
라인19: next 조건에 맞지 않으므로 왼쪽에 조건에 맞는 값이 있는지 확인해야한다. 이때 현재 next의 값이 사라지지 않도록 스택이 비어있는지 유무에 상관없이 stTemp에 저장해둬야한다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>next조건에 맞지 않는 값이 사라지지않도록 stTemp에 저장한다. 이때 스택 st에 원소가 존재하는지 유무와는 관계없다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Top</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Top</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span><span class="o">=</span><span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;</span> <span class="n">stTemp</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Top</span><span class="o">&gt;();</span>
        <span class="n">Top</span> <span class="n">now</span><span class="o">,</span> <span class="n">next</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="n">Top</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()||</span><span class="n">st</span><span class="o">.</span><span class="na">size</span><span class="o">()&lt;</span><span class="mi">2</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">now</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="o">}</span>          
            <span class="k">while</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">height</span><span class="o">&gt;=</span><span class="n">next</span><span class="o">.</span><span class="na">height</span><span class="o">){</span><span class="c1">//next조건에 안맞음</span>
                <span class="n">stTemp</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">next</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//next가 없다면</span>
                    <span class="n">next</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="c1">//알맞은 next찾음</span>


            <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">next</span><span class="o">.</span><span class="na">location</span><span class="o">;</span>    
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">stTemp</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//stTemp에 값이 있다면 원상복귀</span>
                <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stTemp</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Document nowDoc: ArrayList의 첫 번째 값(또는 그 다음 값)을 나타낸다. 앞에 최댓값이 있을 경우 다음으로 넘어간다.</li>
  <li>Document nextDoc: nowDoc 뒤의 값들이다.</li>
  <li>ArrayList<Document> array: 중요도와 순서의 값을 가지는 Document클래스를 생성하여 ArrayList에 저장한다. 중간에서 값을 삭제하고 맨 뒤에 추가할 경우가 있으므로 이가 쉬운 ArrayList를 사용한다.</Document></li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191030_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>스택으로 풀다가 잘 안되서 링크드리스트를 생각했는데, next의 값을 바꿔버리면 다음 노드를 방문할 수 없으므로 포기했다.
다음으로 더블링크드리스트로 next로 탑을 순서대로 하고 prev로 송신할 수 있는 탑을 가리키도록 하는 건 어떨까 생각해봤지만, 라이브러리에 있는 구조를 이용하면서 prev와 next를 어떻게 바꾸는지 모르겠어서 포기했다(그렇다고 더블을 구현하는건 아닌 것 같아서^0^).</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_프린터</title>
	  <link>/blog//algo-prog42587</link>
	  <author></author>
	  <pubDate>2019-10-29T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42587</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42587">https://programmers.co.kr/learn/courses/30/lessons/42587</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>중요도(priorities)와 위치(location)을 값으로 가지는 Document 클래스를 생성한다.</li>
  <li>Document를 저장하는 ArrayList를 이용하여 조건에 맞게 정렬한다.</li>
  <li>맨 앞의 값 nowDoc을 기준으로 리스트를 순회하며 중요도가 nowDoc&lt;nextDoc이면 nowDoc을 맨 뒤로 보낸다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Document</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">priority</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Document</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">priority</span><span class="o">=</span><span class="n">p</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">priorities</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Document</span> <span class="n">nowDoc</span><span class="o">;</span>
        <span class="n">Document</span> <span class="n">nextDoc</span><span class="o">;</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">priorities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="n">priorities</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">nowDoc</span><span class="o">=</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">j</span><span class="o">++){</span>
                <span class="n">nextDoc</span><span class="o">=</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">.</span><span class="na">priority</span><span class="o">&lt;</span><span class="n">nextDoc</span><span class="o">.</span><span class="na">priority</span><span class="o">){</span>
                    <span class="n">array</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">);</span>
                    <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">);</span>
                    <span class="n">nowDoc</span><span class="o">=</span><span class="n">nextDoc</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">location</span><span class="o">==</span><span class="n">location</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191029_1.PNG" alt="실행결과" />
실패.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>nowDoc이 항상 맨 앞을 가리키지는 않는다. nowDoc이 중요도가 제일 크다면 값이 뒤로 밀리지 않기 때문이다. 이와 같은 경우인 아래 테스트케이스를 생각해본다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">priorities</th>
      <th style="text-align: center">location</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[3,3,4,2]</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">[1,2,3,0]</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">3</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>ArrayList에서 제거 및 맨 뒤에 추가가 이루어지지 않는다면 nowDoc은 최댓값이라는 뜻이므로 이 경우 nowDoc은 그 다음 값을 가리키도록 한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Document</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">priority</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">location</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Document</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">priority</span><span class="o">=</span><span class="n">p</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">priorities</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Document</span> <span class="n">nowDoc</span><span class="o">;</span>
        <span class="n">Document</span> <span class="n">nextDoc</span><span class="o">;</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;();</span>
        <span class="c1">//Document형태로 ArrayList에 저장</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">priorities</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="n">priorities</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span><span class="c1">//단순히 array.size()만큼이 아니라 마지막까지 도달해야함</span>
            <span class="n">nowDoc</span><span class="o">=</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">j</span><span class="o">++){</span>
                <span class="n">nextDoc</span><span class="o">=</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">.</span><span class="na">priority</span><span class="o">&lt;</span><span class="n">nextDoc</span><span class="o">.</span><span class="na">priority</span><span class="o">){</span><span class="c1">//nowDoc이 최대값이 아니므로 맨 뒤로 밀려남</span>
                    <span class="n">array</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">);</span>
                    <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nowDoc</span><span class="o">);</span>
                    <span class="n">i</span><span class="o">--;</span><span class="c1">//값이 삭제된 위치에서부터 다시 순회하기 위함</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">location</span><span class="o">==</span><span class="n">location</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//리스트는 0번부터 시작하지만 리턴값은 1부터 시작하기때문</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Document nowDoc: ArrayList의 첫 번째 값(또는 그 다음 값)을 나타낸다. 앞에 최댓값이 있을 경우 다음으로 넘어간다.</li>
  <li>Document nextDoc: nowDoc 뒤의 값들이다.</li>
  <li>ArrayList<Document> array: 중요도와 순서의 값을 가지는 Document클래스를 생성하여 ArrayList에 저장한다. 중간에서 값을 삭제하고 맨 뒤에 추가할 경우가 있으므로 이가 쉬운 ArrayList를 사용한다.</Document></li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191029_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>예전에 코딩테스트에서 나왔을 때는 못 풀었는데, 이번엔 해결해서 다행이다. 문제 유형이 스택과 큐이지만 ArrayList를 활용하였다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택/큐_기능개발</title>
	  <link>/blog//algo-prog42586</link>
	  <author></author>
	  <pubDate>2019-10-28T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42586</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42586">https://programmers.co.kr/learn/courses/30/lessons/42586</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>소요되는 날 계산해서 Queue에 저장한다.</li>
  <li>temp에 큐의 맨 앞 값 넣는다.</li>
  <li>temp보다 뒤에가 작으면 cnt++, 그 값을 삭제한다.</li>
  <li>temp보다 큰거 발견하면 그자리에서 끝, cnt를 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.Math</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">progresses</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">speeds</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="kt">int</span> <span class="n">day</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">temp</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>

        <span class="c1">//소요되는 날 계산 후 큐에 저장</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">progresses</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">day</span><span class="o">=(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="mi">100</span><span class="o">-</span><span class="n">progresses</span><span class="o">[</span><span class="n">i</span><span class="o">])/(</span><span class="kt">double</span><span class="o">)</span><span class="n">speeds</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">day</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//큐를 처음부터 순회, 기준값 temp설정</span>
            <span class="n">temp</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="c1">//temp뒤의 값을 비교하며 카운트</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">temp</span><span class="o">&lt;</span><span class="n">q</span><span class="o">.</span><span class="na">peek</span><span class="o">()){</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="n">cnt</span><span class="o">++;</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
            <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">//ArrayList의 값 복사</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>int day: 기능별로 작업 시간을 계산한다. 이때 소수점까지 필요하므로 speeds를 실수형인 double로 형변환, Math 라이브러리의 ceil()메소드를 이용하여 값을 올림한 후 다시 int형으로 변환한다.</li>
  <li>int temp: 큐의 첫 번째 값을 저장하여 뒤의 값들과 비교한다.</li>
  <li>int cnt: 기준점인 temp와 함께 배포될 수 있는 갯수를 저장한다. 이때 기준점인 temp의 값을 가지고 있으므로 초기값은 1이다.</li>
  <li>Queue<Integer> q: 기능별 day를 저장하는 자료구조이다.</Integer></li>
  <li>ArrayList<Inger> array: 날마다 배포되는 기능 갯수인 cnt를 저장한다. cnt의 값은 유동적이기 때문에 선언시 크기를 지정하지 않아도 되는 ArrayList를 선택하였다.</Inger></li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191028_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-참고">4. 참고</h3>
<p><img src="./assets/images/191028_1.PNG" alt="결과화면" />
마지막 ArrayList array를 배열 answer로 복사하는 과정에서 List 라이브러리의 toArray()메소드를 사용하려고 했는데, 이 경우 ArrayList와 배열 모두 Integer로 선언되어야 한다. 나의 경우 배열 answer이 int형으로 선언되었기 때문에 그냥 for문으로 값을 복사해주었다.</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<p>오랜만에 나름 쉬운 문제를 풀어서 기분이 좋았다. 문제 유형이 스택과 큐라서 이를 이용해야겠다고 파악할 수 있었지만, 없었다면 배열을 썼을 것 같다. 문제를 보고 어떤 자료구조를 택할지 연습하는 법을 길러야겠다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 해시_베스트앨범</title>
	  <link>/blog//algo-prog42579</link>
	  <author></author>
	  <pubDate>2019-10-16T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42579</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42579">https://programmers.co.kr/learn/courses/30/lessons/42579</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>해시에 장르별로 plays 계산한다.</li>
  <li>해시 사이즈(장르 개수)만큼 ArrayList 생성, 장르별로 노래(고유번호, 재생)저장한다.</li>
  <li>해시와 ArrayList를 내림차순으로 정렬한다.</li>
  <li>해시 순서대로 장르의 0, 1번의 고유 번호를 리턴한다.</li>
</ol>

<p>=&gt;ArrayList를 동적 생성할 수 없어서 불가.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>장르별로 총 재생 횟수를 계산하는 해시를 생성한다.</li>
  <li>재생 횟수를 내림차순으로 정렬하기 위해 배열을 사용한다.</li>
  <li>해시맵(장르, 노래들)형태로 생성한다.</li>
  <li>노래들의 1, 2위를 뽑기 위해 ArrayList에 저장, 내림차순으로 정렬한다.</li>
  <li>장르별 두 개(또는 하나)를 뽑아 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Music</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">play</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Music</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">idx</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">=</span><span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Music</span> <span class="n">m</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">&gt;</span><span class="n">m</span><span class="o">.</span><span class="na">play</span><span class="o">){</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">play</span><span class="o">&lt;</span><span class="n">m</span><span class="o">.</span><span class="na">play</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">idx</span><span class="o">&gt;</span><span class="n">m</span><span class="o">.</span><span class="na">idx</span><span class="o">){</span>
                <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">genres</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">plays</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="c1">//장르별 총 재생 횟수 계산</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">genres</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="mi">0</span><span class="o">)+</span><span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="c1">//재생횟수보고 장르를 찾기위해 바꿔서 해시에 저장</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">reverseMap</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span><span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">),</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">//재생횟수 내림차순 정렬</span>
        <span class="n">Integer</span><span class="o">[]</span> <span class="n">rankGenres</span><span class="o">=</span><span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">key:</span><span class="n">reverseMap</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="n">rankGenres</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">key</span><span class="o">;</span>
            <span class="n">j</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankGenres</span><span class="o">);</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankGenres</span><span class="o">,</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>

        <span class="c1">//해시맵(장르, 노래들)으로 각 1,2위 뽑기</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;&gt;</span> <span class="n">rankMusic</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">plays</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                <span class="n">rankMusic</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>
            <span class="o">}</span>
            <span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Music</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="c1">//장르별 value인 ArrayList 내림차순 정렬</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">answerArray</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span><span class="c1">//값이 2개이상이라면</span>
                <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
                <span class="c1">//Collections.reverse(rankMusic.get(key));</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
                <span class="n">answerArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rankMusic</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">answerArray</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">answerArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>    
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>HashMap&lt;String, Integer&gt; map: 장르별로 총 재생횟수를 계산한다.</li>
  <li>HashMap&lt;Integer, String&gt; reverseMap: 총 재생횟수를 내림차순으로 정렬한 후, 재생횟수를 통해 장르를 알 수 있도록 key, value를 바꾼다.</li>
  <li>Integer[] rankGenres: 총 재생횟수를 내림차순으로 정렬한다. 내림차순을 만드는 메소드가 없으므로, 오름차순으로 정렬 후 reverse함수를 사용한다.</li>
  <li>HashMap&lt;String, ArrayList<Music>&gt; rankMusic: key는 장르를, value는 해당 장르의 노래들을 ArrayList로 저장한다. 이때 재생횟수(play)와 고유번호(idx)를 가지는 Music이라는 클래스를 생성하여 ArrayList에 Music 형태로 저장한다.</Music></li>
  <li>ArrayList<Integer> answerArray: rankMusic을 내림차순으로 정렬하여 0, 1번을 장르 순서대로 저장한다.</Integer></li>
  <li>int[] answer: answerArray의 값을 카피하여 리턴한다.</li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191016_2.PNG" alt="실행결과" />
실패¯_( ͡° ͜ʖ ͡°)/¯
어디서 틀렸는지 알고 싶은데 테스트케이스를 몰라서 알 수 없는게 함정</p>
<h2 id="보류"><span style="color:navy">보류</span></h2>

<p>위의 코드도 <a href="https://developerdk.tistory.com/13">https://developerdk.tistory.com/13</a>의 풀이법을 99%참고하여 작성하였다. 일단 다른 사람의 코드를 이해하고 다른 문제로 넘어가도록 하겠다…</p>

	  ]]></description>
	</item>


</channel>
</rss>
