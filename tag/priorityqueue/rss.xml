<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link></link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] 1655번: 가운데를 말해요</title>
	  <link>/blog//algo-boj1655</link>
	  <author></author>
	  <pubDate>2020-11-05T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1655</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1655">https://www.acmicpc.net/problem/1655</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>실시간으로 입력된 데이터를 정렬하는 자료구조-&gt;힙(Heap)을 사용한다.</li>
  <li>maxHeap(내림차순), minHeap(오름차순)을 이용한다.</li>
  <li>두 개를 이용해 정렬된 숫자 배열을 만들 것이다. maxHeap의 리프노드-&gt;maxHeap root-&gt;minHeap root-&gt;minHeap 리프 노드 순으로 가면 정렬된 숫자 배열을 얻을 수 있다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">maxHeap</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">return</span> <span class="n">i2</span><span class="o">-</span><span class="n">i1</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">});</span> <span class="c1">// 내림차순</span>
		<span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">minHeap</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;((</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)-&gt;</span><span class="n">o1</span><span class="o">-</span><span class="n">o2</span><span class="o">);</span> <span class="c1">// 오름차순</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="c1">// num을 번갈아가면서 힙에 넣어줌</span>
			<span class="kt">int</span> <span class="n">num</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="n">maxHeap</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
			<span class="k">else</span> <span class="n">minHeap</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
			
			<span class="c1">// maxHeap의 root&lt;minHeap root이어야 함</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">maxHeap</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">minHeap</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">maxHeap</span><span class="o">.</span><span class="na">peek</span><span class="o">()&gt;</span><span class="n">minHeap</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">maxRoot</span><span class="o">=</span><span class="n">maxHeap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
					<span class="n">maxHeap</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">minHeap</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
					<span class="n">minHeap</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">maxRoot</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="c1">// maxHeap의 root에 숫자 배열의 중간값이 들어감</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxHeap</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201105_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
처음에는 단순하게 리스트를 정렬하고 중간 인덱스를 뽑는 방식으로 작성했는데 시간 초과가 떴다.<br />
리스트를 이용한 코드의 시간 복잡도가 O(N*NlogN)인데, N=10^5이므로 시간이 빠른 편은 아니다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">힙을 이용한다</span></strong>
    <ul>
      <li>maxHeap, minHeap 두 개를 사용하여 숫자 배열을 오름차순 정렬할 것이다.</li>
      <li>maxHeap의 leaf node -&gt; maxHeap root -&gt; minHeap root -&gt; minHeap leaf node 순으로 방문하면 숫자 배열을 오름차순 순회하는 것과 같다.</li>
      <li>따라서 maxHeap root는 minHeap root보다 작아야 한다.</li>
      <li>두 root 노드가 배열의 중간값이 되고, 중간값이 짝수인 경우 더 작은 값을 택한다고 했으므로 maxHeap root를 리턴하면 된다.</li>
      <li>따라서 maxHeap, minHeap 순으로 번갈아 숫자를 넣고, 두 root값을 체크하여 조건에 맞지 않는다면 swap하면 된다.</li>
      <li>참고로, 우선순위 큐에서 Comparator 쓰는 방법은 위 코드와 같이 두 개가 있다.</li>
    </ul>
  </li>
</ol>

<h3 id="5-성능">5. 성능</h3>
<ul>
  <li>시간 복잡도: O(NlogN)<br />
숫자 개수 N, 힙 정렬 logN  -&gt; O(NlogN)</li>
  <li>공간 복잡도: O(N)</li>
</ul>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[BOJ 백준] 가운데를 말해요(1655) Java <a href="https://subbak2.tistory.com/19">https://subbak2.tistory.com/19</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 그래프와 BFS: 알고스팟</title>
	  <link>/blog//algo-boj1261</link>
	  <author></author>
	  <pubDate>2020-06-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1261</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1261">https://www.acmicpc.net/problem/1261</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>BFS를 이용하는 대신, 일반 큐가 아닌 우선순위큐를 이용하여 먼저 방문할 노드들을 결정해준다.</li>
  <li>먼저 방문해야할 노드는, 벽 부순 횟수(cnt)가 작은 순이다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Dot</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
		<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Dot</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dotX</span><span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dotY</span><span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
		<span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="n">visit</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">Dot</span> <span class="n">dot</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">dot</span><span class="o">.</span><span class="na">x</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">dot</span><span class="o">.</span><span class="na">y</span><span class="o">==</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">dot</span><span class="o">.</span><span class="na">cnt</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">xx</span><span class="o">=</span><span class="n">dot</span><span class="o">.</span><span class="na">x</span><span class="o">+</span><span class="n">dotX</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="kt">int</span> <span class="n">yy</span><span class="o">=</span><span class="n">dot</span><span class="o">.</span><span class="na">y</span><span class="o">+</span><span class="n">dotY</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="k">if</span><span class="o">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="n">xx</span><span class="o">&amp;&amp;</span><span class="n">xx</span><span class="o">&lt;</span><span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">yy</span><span class="o">&amp;&amp;</span><span class="n">yy</span><span class="o">&lt;</span><span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visit</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">visit</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
					<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]==</span><span class="mi">1</span><span class="o">)</span> 
						<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Dot</span><span class="o">(</span><span class="n">xx</span><span class="o">,</span> <span class="n">yy</span><span class="o">,</span> <span class="n">dot</span><span class="o">.</span><span class="na">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
					<span class="k">else</span> 
						<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Dot</span><span class="o">(</span><span class="n">xx</span><span class="o">,</span> <span class="n">yy</span><span class="o">,</span> <span class="n">dot</span><span class="o">.</span><span class="na">cnt</span><span class="o">));</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">map</span><span class="o">));</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Dot</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Dot</span><span class="o">&gt;{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Dot</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">y</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">=</span><span class="n">c</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Dot</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">&lt;</span><span class="n">target</span><span class="o">.</span><span class="na">cnt</span><span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
		<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">==</span><span class="n">target</span><span class="o">.</span><span class="na">cnt</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200621_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">BFS를 이용한다</span></strong>
    <ul>
      <li>(0,0)에서 (n-1, m-1)까지 가기 위해 상하좌우로 움직이면서 방문하지 않은 곳이라면(!visit[xx][yy]) 큐에 넣는다. 이때 벽이라면(map[xx][yy]==1) dot(현재 위치).cnt+1로 벽을 부순 횟수를 하나 증가시키고, 아니라면 현재까지 부순 횟수를 가지고 new Dot을 생성하여 큐에 집어 넣는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">PriorityQueue를 이용한다</span></strong>
    <ul>
      <li>단순히 최단 경로를 구하는 것이 아니라, 최단 경로로 가면서 벽을 가장 덜 부수는 방법을 찾아야 하므로 큐에서 우선순위 설정이 필요하다.</li>
      <li>큐에 Dot 클래스를 넣을 것이므로, 해당 클래스에서 compareTo()를 Override하여 우선순위를 지정해준다.</li>
      <li>벽을 부순 횟수가 작을수록 더 큰 우선순위를 가진다(먼저 큐에서 빠져나와야하므로 앞으로 이동해야한다.)</li>
      <li>나(this)와 비교 대상(target)를 두고, 내 cnt(현재 위치까지의 벽을 부순 횟수)가 더 작을 때 -1을 리턴하여 앞으로 이동한다. 같다면 그대로(0), target.cnt가 더 작다면 나는 뒤로 가야 하므로 1을 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_이중우선순위큐</title>
	  <link>/blog//algo-prog42628</link>
	  <author></author>
	  <pubDate>2019-11-08T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42628</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42628">https://programmers.co.kr/learn/courses/30/lessons/42628</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>하나는 오름차순, 하나는 내림차순으로 큐를 두 개 사용한다.</li>
  <li>operations를 split()메소드를 이용해 띄어쓰기를 기준으로 나눈다.</li>
  <li>I이면 두 개의 큐에 삽입한다.</li>
  <li>“D 1”은 maxPQ에서 삭제하고, “D -1”은 minPQ에서 삭제한다.</li>
  <li>[maxPQ의 루트, minPQ의 루트]를 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">operations</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">minPQ</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">maxPQ</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">word</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">str:</span><span class="n">operations</span><span class="o">){</span>
            <span class="n">word</span><span class="o">=</span><span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"I"</span><span class="o">)){</span>
                <span class="n">minPQ</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
                <span class="n">maxPQ</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"D"</span><span class="o">)){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"1"</span><span class="o">)&amp;&amp;!</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">maxPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-1"</span><span class="o">)&amp;&amp;!</span><span class="n">minPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">minPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">minPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">minPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191108_2.PNG" alt="실행결과" />
실패.
테스트1에서 실패했다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>똑같은 값을 두 개의 큐에 중복 저장하기 때문에, 삭제할 때 두 큐 모두 삭제해줘야 한다. 위 코드에서는 “D 1”의 경우 maxPQ에서, “D -1”은 minPQ에서만 삭제가 일어나기 때문에 문제가 발생한다.</p>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>maxPQ 또는 minPQ에서 삭제할 때, 나머지 큐에서도 동일한 값을 삭제해준다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">operations</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">minPQ</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">maxPQ</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">word</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">str:</span><span class="n">operations</span><span class="o">){</span>
            <span class="n">word</span><span class="o">=</span><span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"I"</span><span class="o">)){</span>
                <span class="n">minPQ</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
                <span class="n">maxPQ</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"D"</span><span class="o">)){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"1"</span><span class="o">)&amp;&amp;!</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">num</span><span class="o">=</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                    <span class="n">minPQ</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"-1"</span><span class="o">)&amp;&amp;!</span><span class="n">minPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">num</span><span class="o">=</span><span class="n">minPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                    <span class="n">maxPQ</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">maxPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">minPQ</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">minPQ</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>PriorityQueue<Integer> minPQ: 큐를 오름차순으로 정렬한다. 루트에 최솟값이 들어간다.</Integer></li>
  <li>PriorityQueue<Integer> maxPQ: 큐를 내림차순으로 정렬한다. 루트에 최댓값이 들어간다.</Integer></li>
  <li>String[] num: operations을 띄어쓰기를 기준으로 나눈다. num[0]에는 띄어쓰기 왼쪽 값 I 또는 D가 들어가고, num[1]은 띄어쓰기 오른쪽 값, 숫자 또는 1, -1이 저장된다.</li>
  <li>num: 삭제할 때 어떤 숫자가 삭제되는지 리턴받아 나머지 큐에서도 삭제해준다.</li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191108_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>나는 우선순위큐를 두 개 사용하여 문제를 풀었지만, 데크(Deque)를 사용해서도 문제를 풀 수 있을 것 같다. 데크는 앞뒤로 삽입 삭제가 가능하기 때문에 오름차순으로 정렬하면 문제를 쉽게 접근할 수 있지 않을까?</p>

<h3 id="참고">참고</h3>
<ul>
  <li>프로그래머스 알고리즘: 이중 우선순위 큐 (java) <a href="https://jar100.tistory.com/21">https://jar100.tistory.com/21</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_디스크 컨트롤러</title>
	  <link>/blog//algo-prog42627</link>
	  <author></author>
	  <pubDate>2019-11-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42627</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42627">https://programmers.co.kr/learn/courses/30/lessons/42627</a></p>

<h3 id="테스트케이스-추가">테스트케이스 추가</h3>
<ul>
  <li>참고로 파라미터 jobs는 정렬이 되어있지않다. 이정도는 문제설명에 적어줘야 하는데. 떼잉쯧;</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">jobs(int[][])</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[[24, 10], [18, 39], [34, 20], [37, 5], [47, 22], [20, 47], [15, 2], [15, 34], [35, 43], [26, 1]]</td>
      <td style="text-align: center">74</td>
    </tr>
    <tr>
      <td style="text-align: center">[[24, 10], [18, 39], [34, 20], [37, 5], [47, 22], [20, 47], [15, 34], [15, 2], [35, 43], [26, 1]]</td>
      <td style="text-align: center">74</td>
    </tr>
  </tbody>
</table>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>소요시간(time)이 작은 순서, 같다면 요청시간(start)이 작은 순서가 우선순위가 높도록 우선순위큐를 생성한다.</li>
  <li>현재 시간(now)보다 요청시간이 같거나 작은 작업을 선택해 요청~종료까지 걸린 시간을 계산한 후 now와 answer을 갱신한다.</li>
  <li>없으면 현재 시간엔 수행할 작업이 없다는 뜻이므로 now++한다.</li>
  <li>계산이 끝나면 작업 갯수만큼 answer을 나눠 평균을 구한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Job</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Job</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Job</span> <span class="n">j</span><span class="o">){</span>
        <span class="c1">//소요시간 작은 게 우선순위 높음</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//소요시간이 같다면</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">start</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//요청시점 작은게 우선순위 높음</span>
            <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">jobs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">],</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">pq</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">Job</span> <span class="n">job</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
                <span class="n">job</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;=</span><span class="n">now</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">now</span><span class="o">+</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">-</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
                    <span class="n">now</span><span class="o">+=</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">;</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">now</span><span class="o">++;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">/=</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191107_1.PNG" alt="실행결과" />
실패.
출력문을 찍은 결과 list에 모든 값들이 들어가지 않았다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>두 번째 for문에서 i의 범위가 pq.size()인데, pq는 팝하면서 제거되어 사이즈가 계속 변하므로 적합하지 않다.</p>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>pq.size()가 아닌 고정값 jobs.length로 for문 조건을 변경한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Job</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Job</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Job</span> <span class="n">j</span><span class="o">){</span>
        <span class="c1">//소요시간 작은 게 우선순위 높음</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//소요시간이 같다면</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">start</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//요청시점 작은게 우선순위 높음</span>
            <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">jobs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">now</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">],</span><span class="n">jobs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">Job</span> <span class="n">job</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
                <span class="n">job</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;=</span><span class="n">now</span><span class="o">){</span>
                    <span class="n">answer</span><span class="o">+=</span><span class="n">now</span><span class="o">+</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">-</span><span class="n">job</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
                    <span class="n">now</span><span class="o">+=</span><span class="n">job</span><span class="o">.</span><span class="na">time</span><span class="o">;</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span><span class="c1">//작업이 완료되면 break로 다시 for문을 처음부터 방문하여 놓치는 작업이 없도록 한다</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">now</span><span class="o">++;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">/=</span><span class="n">jobs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>PriorityQueue<Job> pq: 소요시간이 작은 순서, 같다면 요청시간이 작은 순서로 정렬한다.</Job></li>
  <li>ArrayList<Job> list: pq를 arraylist에 저장하여 코드에 사용한다. 같은 데이터를 가지고 있는데 굳이 arraylist에 저장하여 사용하는 이유는, pq가 요청시간을 기준으로 정렬된 것이 아니기 때문이다. 현재 시간(now)에 따라 이전~현재까지의 작업들을 모두 확인해야하는데, 우선순위큐로는 정렬된 루트노드의 값만 가져올 수 있고 다음 노드를 방문하기 위해서는 무조건 poll해야한다. 하지만 미래의 작업이 루트로 갈 수 있는데, 이때는 삭제하면 안되므로 arrayList를 이용해 값을 삭제하지 않아도 다음 값을 찾을 수 있게 한다.</Job></li>
</ul>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191107_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>Compare을 Override하는 법에 대해 배울 수 있었다. 처음에는 jobs 배열을 요청시간 오름차순으로 정렬해서 사용하고 싶었는데, Array.sort()나 Collections.sort()를 사용하려고 하니 Override한 compare를 쓰는 바람에 애먹었다. 결국에는 배열을 정리할 필요 없이 처음부터 우선순위큐를 사용했는데, 이건 다른 사람 코드를 보고 나도 따라한 것이다. 나도 이렇게 바로 떠오르면 좋으련만.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][힙(heap)]디스크 컨트롤러 <a href="https://jee-goo.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%95%B4%EC%8B%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%8F%84%EC%9B%80%EB%A7%90">https://jee-goo.tistory.com/entry/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%ED%95%B4%EC%8B%9C%EB%94%94%EC%8A%A4%ED%81%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%8F%84%EC%9B%80%EB%A7%90</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/자료구조] 우선순위큐: CompareTo를 이용한 우선순위 구현</title>
	  <link>/blog//java-priorityqueue02</link>
	  <author></author>
	  <pubDate>2019-11-07T09:00:00+09:00</pubDate>
	  <guid>/blog//java-priorityqueue02</guid>
	  <description><![CDATA[
	     <p>우선순위큐뿐만 아니라 자료구조의 정렬 조건을 바꾸고 싶을 때 CompareTo를 Override하는 방법을 택한다.</p>

<h3 id="1-기본-개념">1. 기본 개념</h3>
<ul>
  <li>리턴값이 음수일 경우 우선순위가 높아진다. 주로 -1, 0, 1을 이용하여 우선순위를 나눈다.</li>
</ul>

<h3 id="2-예시">2. 예시</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Job</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Job</span><span class="o">&gt;{</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Job</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Job</span> <span class="n">j</span><span class="o">){</span>
        <span class="c1">//소요시간 작은 게 우선순위 높음</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="c1">//소요시간이 같다면</span>
        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">j</span><span class="o">.</span><span class="na">time</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">start</span><span class="o">&lt;</span><span class="n">j</span><span class="o">.</span><span class="na">start</span><span class="o">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//요청시점 작은게 우선순위 높음</span>
            <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>  
</code></pre></div></div>
<ul>
  <li>클래스 뒤에 <code class="highlighter-rouge">implements Comparable</code>를 붙인다.</li>
  <li>기존 메소드에 수정하는 것이므로 <code class="highlighter-rouge">@Override</code>를 붙인다.</li>
  <li>위의 경우 time이 작을수록 우선순위가 크다.</li>
  <li>만약 time이 같다면 start가 작을수록 우선순위가 커진다.</li>
  <li>이후 sort메소드를 호출할 경우 Override된 compareTo에 따라 정렬된다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_라면공장</title>
	  <link>/blog//algo-prog42629</link>
	  <author></author>
	  <pubDate>2019-11-06T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42629</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42629">https://programmers.co.kr/learn/courses/30/lessons/42629</a></p>

<p>이 문제는 정말 골치 아픈 문제였다. 코드가 아예 잘못된게 아니라 특정 테스트케이스만 통과하지 못해서 더 포기할 수 없었다. 개인적으로 포인트를 차감하는 방법으로 테스트케이스를 볼 수 있었으면 좋겠다. 아직도 내 코드가 틀린 이유를 모르겠으며, 성공한 다른 사람들의 코드와 차이점이 무엇인지 알 수 없다. 문제 해결을 위해 도전한 코드들을 모두 리뷰하기엔 너무 많아서 제일 최근 것 하나만 작성해야겠다.<br />
참고로 아래 테스트케이스를 추가하여 문제를 풀 것을 강력 추천한다. 테스트케이스를 생각하는 것도 골치 아파 죽는 줄 알았다.<br />
마지막 케이스도 내가 생각할 때에는 4를 리턴해야 할 것 같은데 내 코드와 다른 사람들 코드는 5를 리턴한다. 그래서 일단은 5라고 적어놓는다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">stock</th>
      <th style="text-align: center">dates</th>
      <th style="text-align: center">supplies</th>
      <th style="text-align: center">k</th>
      <th style="text-align: center">result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">[1,2,3,4]</td>
      <td style="text-align: center">[10,40,30,20]</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">[1,2,3,4,5]</td>
      <td style="text-align: center">[1,1,1,1,25]</td>
      <td style="text-align: center">30</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">[1,2,3,4,5]</td>
      <td style="text-align: center">[1,1,1,1,25]</td>
      <td style="text-align: center">30</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>오늘(이전 포함) 받을 수 있는 공급이 있다면 큐에 저장한다.</li>
  <li>dates의 값이 미래거나 마지막 공급까지 다 받은 경우라면 day에 오늘 날짜를 저장한다.</li>
  <li>큐에 값이 있고 재고가 더 필요하다면 큐에서 뽑아 stock에 추가하고 answer을 증가한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">stock</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dates</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">supplies</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">day</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">day</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stock</span><span class="o">&gt;=</span><span class="n">dates</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span><span class="c1">//이전날들값은 큐에 추가</span>
                    <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">supplies</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stock</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">[</span><span class="n">i</span><span class="o">]||</span><span class="n">i</span><span class="o">==</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//미래 또는 다넣음</span>
                    <span class="n">day</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">stock</span><span class="o">!=</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">stock</span><span class="o">&lt;</span><span class="n">k</span><span class="o">){</span>
                <span class="n">stock</span><span class="o">+=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191106_1.PNG" alt="실행결과" />
실패. 테스트3, 5에서 틀렸다.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>알 수 없다. 이젠 지쳤다. 다른 사람 코드를 참고해야 할 때다.</p>

<h2 id="-두-번째-도전"><span style="color:navy">👊 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>원래 공장으로부터 공급받는 k 이전까지 체크한다.</li>
  <li>배열 순회에 사용할 idx가 dates 인덱스 범위에 만족하고, 오늘 받을 수 있는 공급이 있다면 큐에 삽입한다. idx++한다.</li>
  <li>만약 오늘이 stock을 다 쓰는 날이라면 큐에서 pop하여 stock에 추가하고 answer++한다.</li>
  <li>하루가 지나갔음을 나타내기 위해 day++한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">stock</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dates</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">supplies</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">day</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">day</span><span class="o">&lt;</span><span class="n">k</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">&lt;</span><span class="n">dates</span><span class="o">.</span><span class="na">length</span><span class="o">&amp;&amp;</span><span class="n">day</span><span class="o">==</span><span class="n">dates</span><span class="o">[</span><span class="n">idx</span><span class="o">]){</span>
                <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">supplies</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
                <span class="n">idx</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">day</span><span class="o">==</span><span class="n">stock</span><span class="o">){</span>
                <span class="n">stock</span><span class="o">+=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">day</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과-1">3. 결과</h3>
<p><img src="./assets/images/191106_2.PNG" alt="실행결과" />
행복하지 않은 🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>이해할 수 없다. 컴퓨터의 세계는 이해할 수 없어T_T</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 힙(Heap)_더 맵게</title>
	  <link>/blog//algo-prog42626</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42626</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42626">https://programmers.co.kr/learn/courses/30/lessons/42626</a></p>

<h2 id="-첫-번째-도전"><span style="color:navy">👊 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>가장 맵지 않은, scoville이 낮은 원소를 사용하므로 우선순위가 낮은 순서로 정렬, 리턴하는 우선순위큐를 사용한다.</li>
  <li>하나라도 K보다 작다면, 주어진 공식을 이용해 새 조합을 만든다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">scoville</span><span class="o">,</span> <span class="kt">int</span> <span class="n">K</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">;</span>
         <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;();</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">scoville</span><span class="o">){</span>
             <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">while</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">peek</span><span class="o">()&lt;</span><span class="n">K</span><span class="o">){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">){</span>
                 <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span><span class="o">{</span>
                 <span class="n">a</span><span class="o">=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                 <span class="n">b</span><span class="o">=</span><span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                 <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">a</span><span class="o">+(</span><span class="n">b</span><span class="o">*</span><span class="mi">2</span><span class="o">));</span>
                 <span class="n">answer</span><span class="o">++;</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>PriorityQueue<Integer> pq: 스코빌 지수가 낮은 순으로 뽑을 수 있게 우선순위큐를 사용한다.</Integer></li>
</ul>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191104_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<p>우선순위큐를 사용할 기회가 별로 없었는데, 이번을 통해 사용하는 법을 배워야겠다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/자료구조] 우선순위큐: 선언방법과 주요 메소드</title>
	  <link>/blog//java-priorityqueue01</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//java-priorityqueue01</guid>
	  <description><![CDATA[
	     <h2 id="우선순위큐"><span style="color:navy">우선순위큐</span></h2>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html</a></p>

<h3 id="1-클래스">1. 클래스</h3>
<p><img src="./assets/images/191104_2.PNG" alt="구조" /></p>

<h3 id="2-특징">2. 특징</h3>
<ul>
  <li>Queue의 성질을 가지고 있지만, 선입선출(FIFO)이 아닌 가장 가중치가 낮은 순서로 원소를 리턴한다.</li>
  <li>Min Heap으로 데이터를 정렬한다.</li>
  <li>때에 따라서는 CompareTo()를 수정하여 Max Heap, 가중치가 높은 순서로 변경하여 사용한다.</li>
  <li>key(데이터의 priority), value로 이루어진 pair를 저장하는 비선형 자료구조이다.
<img src="./assets/images/191104_3.png" alt="우선순위큐" /></li>
  <li>
    <dl>
      <dt>Min Heap(최소힙)</dt>
      <dd>부모 키&lt;자식 키. 루트에 최소값이 들어간다.</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>Max Heap(최대힙)</dt>
      <dd>부모 키&gt;자식 키. 루트에 최대값이 들어간다.</dd>
    </dl>
  </li>
  <li>Min Heap, Max Heap 모두 삭제 연산 시 루트노드를 한다. 이후 힙의 속성을 유지하기 위해 우측 맨 아래 리프노드를 루트 자리에 넣은 후 다시 자식 노드들과 비교하며 자리를 찾는다.</li>
</ul>

<h3 id="3-선언">3. 선언</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="cm">/*...*/</span>
<span class="c1">//PriorityQueue&lt;E&gt; pq=new PriorityQueue&lt;E&gt;();</span>
<span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="cm">/*...*/</span>
</code></pre></div></div>

<h3 id="4-주요-메소드">4. 주요 메소드</h3>
<ol>
  <li><code class="highlighter-rouge">public boolean offer(E item);</code>
    <ul>
      <li>역할: 우선순위큐에 값을 넣는다.</li>
      <li>파라미터: item(삽입할 값)</li>
      <li>리턴: true(성공), false(실패)</li>
      <li>특징: add(item)메소드와 같다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element poll();</code>
    <ul>
      <li>역할: 루트노드(가중치가 작은/큰)를 삭제한다.</li>
      <li>리턴: 루트노드</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element peek();</code>
    <ul>
      <li>역할: 루트노드를 리턴하되 삭제하지는 않는다.</li>
      <li>리턴: 루트노드</li>
    </ul>
  </li>
</ol>

<h3 id="5-예외처리">5. 예외처리</h3>
<ul>
  <li>NullPointerException: 넣을 아이템이 null인 경우 발생한다.</li>
  <li>ClassCastException: 캐스팅이 불가할 때 발생한다.</li>
</ul>

<h3 id="6-우선순위큐-응용분야">6. 우선순위큐 응용분야</h3>
<ul>
  <li>시뮬레이션 시스템(여기서의 우선순위는 대개 사건의 시각이다).</li>
  <li>네트워크 트래픽 제어.</li>
  <li>운영체제에서 작업 스케쥴링.</li>
</ul>

<h3 id="7-참고">7. 참고</h3>
<ul>
  <li>우선순위큐, 최소 힙, 최대 힙_JAVA <a href="http://blog.naver.com/PostView.nhn?blogId=zxy826&amp;logNo=220804468536&amp;parentCategoryNo=32&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=true&amp;from=search">http://blog.naver.com/PostView.nhn?blogId=zxy826&amp;logNo=220804468536&amp;parentCategoryNo=32&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=true&amp;from=search</a></li>
  <li>Java Queue, Priority Queue 예제 <a href="https://gamjatwigim.tistory.com/72">https://gamjatwigim.tistory.com/72</a></li>
  <li>우선순위 큐(priority queue) <a href="https://medium.com/quantum-ant/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-priority-queue-80a161664e3b">https://medium.com/quantum-ant/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-priority-queue-80a161664e3b</a></li>
  <li>우선순위 큐(Priority Queue) <a href="https://eremo2002.tistory.com/21">https://eremo2002.tistory.com/21</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
