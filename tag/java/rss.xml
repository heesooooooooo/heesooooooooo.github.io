<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 우선순위큐: 선언방법과 주요 메소드</title>
	  <link>/blog//java-priorityqueue01</link>
	  <author></author>
	  <pubDate>2019-11-04T09:00:00+09:00</pubDate>
	  <guid>/blog//java-priorityqueue01</guid>
	  <description><![CDATA[
	     <h2 id="스택"><span style="color:navy">스택</span></h2>
<p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html</a></p>

<h3 id="1-클래스">1. 클래스</h3>
<p><img src="./assets/images/191104_2.PNG" alt="구조" /></p>

<h3 id="2-특징">2. 특징</h3>
<ul>
  <li>Queue의 성질을 가지고 있지만, 선입선출(FIFO)이 아닌 가장 가중치가 낮은 순서로 원소를 리턴한다.</li>
  <li>Min Heap으로 데이터를 정렬한다.</li>
  <li>때에 따라서는 CompareTo()를 수정하여 Max Heap, 가중치가 높은 순서로 변경하여 사용한다.</li>
  <li>key(데이터의 priority), value로 이루어진 pair를 저장하는 비선형 자료구조이다.
<img src="./assets/images/191104_3.png" alt="우선순위큐" /></li>
  <li>
    <dl>
      <dt>Min Heap(최소힙)</dt>
      <dd>부모 키&lt;자식 키. 루트에 최소값이 들어간다.</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>Max Heap(최대힙)</dt>
      <dd>부모 키&gt;자식 키. 루트에 최대값이 들어간다.</dd>
    </dl>
  </li>
  <li>Min Heap, Max Heap 모두 삭제 연산 시 루트노드를 한다. 이후 힙의 속성을 유지하기 위해 우측 맨 아래 리프노드를 루트 자리에 넣은 후 다시 자식 노드들과 비교하며 자리를 찾는다.</li>
</ul>

<h3 id="3-선언">3. 선언</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="cm">/*...*/</span>
<span class="c1">//PriorityQueue&lt;E&gt; pq=new PriorityQueue&lt;E&gt;();</span>
<span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pq</span><span class="o">=</span><span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="cm">/*...*/</span>
</code></pre></div></div>

<h3 id="4-주요-메소드">4. 주요 메소드</h3>
<ol>
  <li><code class="highlighter-rouge">public boolean offer(E item);</code>
    <ul>
      <li>역할: 우선순위큐에 값을 넣는다.</li>
      <li>파라미터: item(삽입할 값)</li>
      <li>리턴: true(성공), false(실패)</li>
      <li>특징: add(item)메소드와 같다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element poll();</code>
    <ul>
      <li>역할: 루트노드(가중치가 작은/큰)를 삭제한다.</li>
      <li>리턴: 루트노드</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element peek();</code>
    <ul>
      <li>역할: 루트노드를 리턴하되 삭제하지는 않는다.</li>
      <li>리턴: 루트노드</li>
    </ul>
  </li>
</ol>

<h3 id="5-예외처리">5. 예외처리</h3>
<ul>
  <li>NullPointerException: 넣을 아이템이 null인 경우 발생한다.</li>
  <li>ClassCastException: 캐스팅이 불가할 때 발생한다.</li>
</ul>

<h3 id="6-우선순위큐-응용분야">6. 우선순위큐 응용분야</h3>
<ul>
  <li>시뮬레이션 시스템(여기서의 우선순위는 대개 사건의 시각이다).</li>
  <li>네트워크 트래픽 제어.</li>
  <li>운영체제에서 작업 스케쥴링.</li>
</ul>

<h3 id="7-참고">7. 참고</h3>
<ul>
  <li>우선순위큐, 최소 힙, 최대 힙_JAVA <a href="http://blog.naver.com/PostView.nhn?blogId=zxy826&amp;logNo=220804468536&amp;parentCategoryNo=32&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=true&amp;from=search">http://blog.naver.com/PostView.nhn?blogId=zxy826&amp;logNo=220804468536&amp;parentCategoryNo=32&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=true&amp;from=search</a></li>
  <li>Java Queue, Priority Queue 예제 <a href="https://gamjatwigim.tistory.com/72">https://gamjatwigim.tistory.com/72</a></li>
  <li>우선순위 큐(priority queue) <a href="https://medium.com/quantum-ant/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-priority-queue-80a161664e3b">https://medium.com/quantum-ant/%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-priority-queue-80a161664e3b</a></li>
  <li>우선순위 큐(Priority Queue) <a href="https://eremo2002.tistory.com/21">https://eremo2002.tistory.com/21</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 예외처리: java.util.ConcurrentModificationException</title>
	  <link>/blog//java-exception01</link>
	  <author></author>
	  <pubDate>2019-11-01T09:00:00+09:00</pubDate>
	  <guid>/blog//java-exception01</guid>
	  <description><![CDATA[
	     <p><img src="./assets/images/191101_2.PNG" alt="결과화면" /></p>

<h3 id="예시">예시</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="o">(</span><span class="n">Truck</span> <span class="nl">t:</span><span class="n">q</span><span class="o">){</span><span class="c1">//1초 추가</span>
    <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
    <span class="n">answer</span><span class="o">++;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span><span class="c1">//경과시간이 다 채워지면 삭제</span>
        <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>코드 설명: for문을 통해 Queue<Truck> q를 순회한다. if 조건에 맞다면 큐의 값을 삭제한다.</Truck></p>

<h3 id="원인">원인</h3>
<p>for문과 같은 루프문을 통해 데이터를 접근하는 도중에, 데이터 변경이 일어날 때 발생한다.</p>

<h3 id="해결-방법">해결 방법</h3>
<p>Iterator를 사용하여 큐의 원소에 접근, 삭제한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Iterator</span> <span class="n">iter</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
    <span class="n">Truck</span> <span class="n">t</span><span class="o">=(</span><span class="n">Truck</span><span class="o">)</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">++;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">bridge_length</span><span class="o">){</span>
        <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>iterator()메소드를 이용해 iter를 선언, hasNext()로 현재 iter의 다음 원소가 있는지 파악한 후 있다면 next()로 값을 가져온다. remove()로 원소를 삭제한다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 스택: 선언방법과 주요 메소드</title>
	  <link>/blog//java-stack01</link>
	  <author></author>
	  <pubDate>2019-10-30T09:00:00+09:00</pubDate>
	  <guid>/blog//java-stack01</guid>
	  <description><![CDATA[
	     <h2 id="스택"><span style="color:navy">스택</span></h2>
<p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html">https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html</a>
<img src="./assets/images/191030_3.png" alt="스택" /></p>

<h3 id="1-클래스">1. 클래스</h3>
<p><img src="./assets/images/191030_4.PNG" alt="구조" /></p>

<h3 id="2-특징">2. 특징</h3>
<ul>
  <li>후입선출(last-in-first-out, LIFO)</li>
</ul>

<h3 id="3-선언">3. 선언</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/*...*/</span>
<span class="c1">//Stack&lt;E&gt; st=new Stack&lt;E&gt;();</span>
<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="cm">/*...*/</span>
</code></pre></div></div>

<h3 id="4-주요-메소드">4. 주요 메소드</h3>
<ol>
  <li><code class="highlighter-rouge">public void push(E item);</code>
    <ul>
      <li>역할: 탑처럼 아래서 부터 차곡차곡 쌓는다.</li>
      <li>파라미터: item(삽입할 값)</li>
      <li>리턴: item</li>
      <li>특징: addElement(item)메소드와 같다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element pop();</code>
    <ul>
      <li>역할: 스택 맨 위의 값(top)을 삭제한다.</li>
      <li>리턴: top</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public Element peek();</code>
    <ul>
      <li>역할: 스택 맨 위의 값(가장 최근에 넣은 값, top)을 가져온다.</li>
      <li>리턴: top</li>
      <li>특징: 스택에서 top이 삭제되지 않는다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public boolean isEmpty();</code>
    <ul>
      <li>역할: 스택안에 item이 있는지 확인한다.</li>
      <li>리턴: true(스택이 비었을 경우), false(아닌 경우)</li>
      <li>특징: empty()메소드와 같다.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">public int size();</code>
    <ul>
      <li>역할: 스택의 크기를 확인한다.</li>
      <li>리턴: item 갯수</li>
    </ul>
  </li>
</ol>

<h3 id="5-예외처리">5. 예외처리</h3>
<ul>
  <li>EmptyStackException: 스택안에 값이 없을 경우 발생한다.
st.isEmpty()를 이용해 예외처리를 한다.</li>
</ul>

<h3 id="6-스택이-사용되는-곳">6. 스택이 사용되는 곳</h3>
<ul>
  <li>마지막에 등록된 것을 먼저 사용하는 경우.</li>
  <li>웹 브라우저 방문 기록, 뒤로가기.</li>
  <li>실행취소(undo).</li>
  <li>역순 출력.</li>
  <li>수식의 괄호 검사(연산자 우선순위 표현).</li>
  <li>후위표기법 계산.</li>
  <li>OS, 시스템 스택: 프로그램 호출 순서와 복귀 순서는 반대이기 때문에 가장 나중에 호출된 함수가 제일 먼저 실행된다.</li>
  <li>Compilers(컴파일러)</li>
  <li>JVM(자바 가상 머신): 자바가 실행될 때 각각의 스레드는 한 개의 스택을 가지 모든 메소드를 트랙킹한다. 새로운 프레임이 생기면 스택에 삽입, 메소드가 끝나면 스택에서 제거된다.</li>
</ul>

<h3 id="7-참고">7. 참고</h3>
<ul>
  <li><a href="https://wayhome25.github.io/cs/2017/05/28/algorithm/">https://wayhome25.github.io/cs/2017/05/28/algorithm/</a></li>
  <li><a href="https://muckycode.blogspot.com/2015/01/stack.html">https://muckycode.blogspot.com/2015/01/stack.html</a></li>
  <li><a href="https://ryumin13.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D%EC%9D%98-%EC%9D%91%EC%9A%A9">https://ryumin13.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D%EC%9D%98-%EC%9D%91%EC%9A%A9</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
