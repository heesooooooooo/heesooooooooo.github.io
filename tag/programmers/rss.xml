<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_카드 게임</title>
	  <link>/blog//algo-prog42896</link>
	  <author></author>
	  <pubDate>2019-12-03T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42896</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42898">https://programmers.co.kr/learn/courses/30/lessons/42898</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>최종 점수가 최댓값이 되기 위해 어떤 카드를 버리며 게임을 진행할 지 선택해야하므로 모든 경우의 수를 다 따져야 한다.</li>
  <li>현재 위치에서 왼쪽카드만 버릴 경우, 둘다 버릴 경우, 오른쪽 카드 숫자가 더 작아서 오른쪽을 버릴 경우에 따라 다음 점수를 계산하고, 이 중 최댓값을 선택해야하므로 재귀함수를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">;</span><span class="c1">//l, r일때의 최댓값을 저장</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">];</span><span class="c1">//배열 크기는 이곳에서 알 수 있으므로 여기서 초기화</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">dp</span><span class="o">){</span><span class="c1">//배열을 -1로 초기화</span>
            <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">recur</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span><span class="c1">//함수 호출</span>
        <span class="c1">//System.out.println(Arrays.deepToString(dp));</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">recur</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">right</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">l</span><span class="o">==</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">||</span><span class="n">r</span><span class="o">==</span><span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">){</span><span class="c1">//둘중 하나라도 끝나면</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]!=-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//값이 계산되었다면(중복계산 방지)</span>
            <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">),</span> <span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">));</span><span class="c1">//왼쪽만 버릴지, 둘다 버릴지 결정</span>
        <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">[</span><span class="n">l</span><span class="o">]&gt;</span><span class="n">right</span><span class="o">[</span><span class="n">r</span><span class="o">]){</span><span class="c1">//오른쪽도 버릴 수 있을 경우</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">],</span> <span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)+</span><span class="n">right</span><span class="o">[</span><span class="n">r</span><span class="o">]);</span><span class="c1">//버리는게 이득인지 확인</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191203_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">배열 dp는 전역변수로 선언한다.</span></strong>
    <ul>
      <li>재귀함수에서 배열에 값을 저장해야하기 떄문이다.</li>
      <li>recur에 파라미터로 넘길 경우 위치에 따라 배열에 값이 존재하지 않을 수도 있다.</li>
      <li>dp[l][r]은 현재 l, r카드에서 얻을 수 있는 최댓값을 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">배열 dp는 방문하지 않은 것을 알 수 있도록 표시해야한다.</span></strong>
    <ul>
      <li>나는 -1로 초기화해서 아직 값이 저장되어있지 않음을 나타내주었다.</li>
      <li>0으로 초기화하면 애매하다. 왼쪽이나 둘다 버릴 경우 점수가 0이기 때문이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">재귀호출을 통해 왼쪽과 둘다 버리는 경우 중 어느게 더 큰 점수를 리턴하는지 확인한다.</span></strong></li>
  <li><strong><span style="color:navy">왼쪽보다 오른쪽이 더 작다면 오른쪽을 버리는 경우도 확인한다.</span></strong>
    <ul>
      <li>위에서 왼쪽이나 두개 다 버린 것 중 최댓값이 저장되었으므로 이것과 오른쪽만 버리는 경우를 체크해서 더 큰 값을 저장한다.</li>
      <li>이때 오른쪽만 버린다면 오른쪽 카드의 숫자만큼 점수를 얻을 수 있으므로 뒤에 +right[r]을 추가한다. 점수를 획득한 것을 나타내었다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">l 또는 r이 끝난 곳에서부터 0을 리턴해서 타고타고 올라가며 계산한다.</span></strong>
<img src="./assets/images/191203_4.PNG" alt="실행결과" />
    <ul>
      <li>맨처음 recur(0,0,left,right)호출을 시작해서 모든 경우의 수에 따라 재귀호출 경로가 만들어진다.</li>
      <li>맨 마지막에 l 또는 r이 끝난 곳에서 0을 리턴하고, 다시 타고타고 올라가며 +right[r]이 있는 곳에서는 점수를 획득하게 된다.</li>
      <li>마지막에는 dp[0][0]까지 다시 되돌아 올 것이고, 여기에 최종값이 저장된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>뭔가 알 것 같으면서도 아닌 것 같기도 하고 어려운 재귀의 세계…</p>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 10835번. 카드게임 (Java) <a href="https://bcp0109.tistory.com/54">https://bcp0109.tistory.com/54</a></li>
  <li>[ 백준 11062 ] 카드게임 <a href="https://wan088.github.io/algorithm/2018/07/15/algo-cardgame/#fn:1">https://wan088.github.io/algorithm/2018/07/15/algo-cardgame/#fn:1</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_등굣길</title>
	  <link>/blog//algo-prog42898</link>
	  <author></author>
	  <pubDate>2019-12-03T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42898</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42898">https://programmers.co.kr/learn/courses/30/lessons/42898</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>최단거리 구하는 방법을 적용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">puddles</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">route</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">puddles</span><span class="o">){</span><span class="c1">//웅덩이 설정</span>
            <span class="n">route</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]-</span><span class="mi">1</span><span class="o">][</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="mi">1</span><span class="o">]=-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">route</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span><span class="c1">//시작값 초기화</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//웅덩이는 0으로 변경</span>
                    <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//웅덩이가 아니라면</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">){</span><span class="c1">//왼쪽 값을 가져올 수 있다면</span>
                        <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">){</span><span class="c1">//위 값을 가져올 수 있다면</span>
                        <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="o">==</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//목적지에 도착했다면</span>
                    <span class="n">answer</span><span class="o">=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191203_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">최단거리 구하는 방법을 적용한다.</span></strong><br />
<img src="./assets/images/191203_2.png" alt="실행결과" />
    <ul>
      <li>시작점을 포함한 행 열은 1로 초기화한다.</li>
      <li>웅덩이는 -1로 표시한다.</li>
      <li>현재 위치의 값은 왼쪽값+윗쪽값이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">마지막에서만 1,000,000,007로 나누면 효율성 테스트에서 시간 초과가 난다.</span></strong>
    <ul>
      <li>마지막 행에서 여러 경로에 대한 결과값이 저장되므로 이들 중 최댓값이 answer이다.</li>
      <li>정확한 이유는 잘 모르겠지만, 큰 값을 더하는 계속 더하는 것보다 그때그때 특정 값으로 나눈 나머지를 사용하여 값을 간단히 하는게 효율적이어서 그런게 아닐까 싶다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제 풀이법을 알면 코딩하는 것은 그렇게 어렵지는 않지만 그 풀이법을 생각해내는 것이 어렵다. 초등학교때 배운 이 방법을 기억하고 있지 않았더라면 이 문제를 해결하기 위해 얼마나 많은 시간을 투자했어야 할지..</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_정수 삼각형</title>
	  <link>/blog//algo-prog43105</link>
	  <author></author>
	  <pubDate>2019-12-02T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43105</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43105">https://programmers.co.kr/learn/courses/30/lessons/43105</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>배열을 이용해 위아래 서로간 대각선 합을 저장한다.</li>
  <li>맨 마지막 행에서 최댓값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">triangle</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">sum</span><span class="o">[][]=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">];</span><span class="c1">//합을 저장할 배열</span>
         <span class="n">sum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">triangle</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//가장 왼쪽과 오른쪽은 다음 위치가 지정되어있음</span>
             <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
             <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
         <span class="o">}</span>

         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//현재 위치로 올 수 있는 이전 줄 대각선 왼쪽 오른쪽 중 최댓값을 선택</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                 <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">],</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">])+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="n">sum</span><span class="o">[</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span><span class="c1">//마지막 행에서 최댓값을 선택</span>
             <span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">sum</span><span class="o">[</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
         <span class="o">}</span>
         <span class="n">answer</span><span class="o">=</span><span class="n">max</span><span class="o">;</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191202_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">위에서부터 삼각형 원소간의 합을 누적 계산한다.</span></strong>
    <ul>
      <li>이때 가장 왼쪽, 오른쪽 원소는 다음 이동이 지정되어있으므로 미리 계산해둔다.</li>
      <li>아래 칸으로 이동할 수 있는 방법이 두 개인 경우, 지금까지의 누적합에 두 방법을 더해서 더 큰 쪽을 선택한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">마지막 행에서 최댓값을 선택한다.</span></strong>
    <ul>
      <li>마지막 행에서 여러 경로에 대한 결과값이 저장되므로 이들 중 최댓값이 answer이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>대충 어떻게 풀지는 느낌이 오는데 어떤 자료구조를 선택해야할지 등 세세한 부분에서 계속 막힌다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스, 자바] 정수 삼각형 - 동적계획법 <a href="https://lkhlkh23.tistory.com/117">https://lkhlkh23.tistory.com/117</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_타일 장식물</title>
	  <link>/blog//algo-prog43104</link>
	  <author></author>
	  <pubDate>2019-11-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43104</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43104">https://programmers.co.kr/learn/courses/30/lessons/43104</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>타일의 규칙은 피보나치 수열이므로 N까지의 피보나치 값을 계산한다.</li>
  <li>N개의 타일로 구성한 직사각형의 둘레는 4x현재 타일+2x이전 타일이다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">fib</span><span class="o">=</span><span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
        <span class="n">fib</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">fib</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//피보나치 계산</span>
            <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="n">fib</span><span class="o">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="mi">2</span><span class="o">*</span><span class="n">fib</span><span class="o">[</span><span class="n">N</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191130_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">타일의 길이는 피보나치 수열 규칙을 가진다.</span></strong>
    <ul>
      <li>타일은 1 1 2 3 5 8 …와 같이 진행되므로 피보나치수열이다.</li>
      <li>N까지의 피보나치 수열을 계산해서 저장한다. 피보나치수열은 보통 재귀함수를 배울때 대표적인 예시인데, 나는 배열을 통해 계산했다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">직사각형 둘레 길이는 4x현재+2x이전타일이다.</span></strong><br />
<img src="./assets/images/191130_2.png" alt="예시" width="300" height="300" />
    <ul>
      <li>위 그림을 통해 4x현재길이+2x이전길이를 만족함을 알 수 있다.</li>
      <li>처음에는 2*(현재길이+(이전길이+이이전길이))를 생각했는데, 이 공식은 총 세개의 타일 길이 값을 사용해야해서 효율성이 떨어진다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제를 읽었을 때는 막막했는데, 막상 풀이법은 간단했다. 아직은 문제를 보면 어떻게 해결해야할지 감이 안온다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>프로그래머스 LEVEL 3 : 타일 장식물 <a href="https://web2eye.tistory.com/164">https://web2eye.tistory.com/164</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_N으로 표현</title>
	  <link>/blog//algo-prog42895</link>
	  <author></author>
	  <pubDate>2019-11-29T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42895</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42895">https://programmers.co.kr/learn/courses/30/lessons/42895</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<p>=&gt;DFS를 이용한다.</p>
<ol>
  <li>재귀함수를 통해 사칙연산을 수행한다.</li>
  <li>cnt(숫자N을 사용한 횟수)가 8보다 크면 -1을 리턴한다.</li>
  <li>숫자 만들기에 성공하면 answer에 최솟값을 저장한다(처음이라면 그냥 저장, 값이 있다면 비교 후 더 작은 값을 저장).</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//전역변수로 설정</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prev</span><span class="o">){</span>
         <span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="mi">8</span><span class="o">){</span><span class="c1">//8번안에 끝내야한다</span>
             <span class="n">answer</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>
             <span class="k">return</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">if</span><span class="o">(</span><span class="n">prev</span><span class="o">==</span><span class="n">number</span><span class="o">){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">answer</span><span class="o">==-</span><span class="mi">1</span><span class="o">||</span><span class="n">cnt</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">){</span><span class="c1">//처음이거나 기존answer보다 더 최솟값을 발견했다면</span>
                 <span class="n">answer</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
                 <span class="k">return</span><span class="o">;</span>
             <span class="o">}</span>            
         <span class="o">}</span>
         <span class="kt">int</span> <span class="n">NN</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">-</span><span class="n">cnt</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//8번안에 끝내야하므로</span>
             <span class="n">NN</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="n">NN</span><span class="o">+</span><span class="n">N</span><span class="o">;</span><span class="c1">//숫자 N으로 만들 수 있는 수</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">+</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">-</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">*</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">/</span><span class="n">NN</span><span class="o">);</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191129_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">answer은 전역변수여야하고, 0으로 초기화하면 안된다.</span></strong>
    <ul>
      <li>answer을 solution()과 dfs()함수에서 사용해야하므로 전역변수로 설정한다. 재귀호출이 이루어지므로 메소드의 파라미터에 넣어 사용하면 값이 재귀를 호출한 곳에 따라서 달라지므로 안된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">for문과 재귀함수를 통해 가능한 모든 사칙연산을 수행한다.</span></strong>
    <ul>
      <li>일의자리숫자 N을 가지고 할 수 있는 사칙연산을 모두 수행한다.</li>
      <li>그 다음은 십의자리숫자를 가지고 사칙연산이 가능하다. 따라서 NN이라는 변수에 숫자 N으로 만들 수 있는 수를 저장하여 사용한다.</li>
      <li>이때 for문의 범위는 8-cnt번으로 제한한다. 위 문제는 cnt가 8번 안에 만족시켜야한다(그 이상이면 맨 위에서 -1을 리턴한다). i&lt;8로 작성하면 i는 사용횟수를 나타내는 것이 아니므로 cnt가 재귀를 통해 8번이 넘게 반복하게 된다. 따라서 8-cnt로 N의 사요이 8번을 넘어가지 않게 해야한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">prev&gt;number일때 return하는 코드는 작성하면 안된다.</span></strong>
    <ul>
      <li>무심결에 prev가 number보다 커지면 number를 만족시킬 수 있는 방법은 없다고 생각하여 예외처리 코드를 작성했었는데, prev에서 뺄셈이나 나눗셈으로 다시 number에 가까워(같아)질 수 있는 방법이 있으므로 작성하면 안된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드를 봤을때는 되게 간단해보이는데 문제는 그렇지 않았다. 그냥 문제를 주고 풀어라 해도 노가다로 뛸 판에 코딩하라니까 더 어려웠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][JAVA] N으로 표현 <a href="https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84">https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84</a></li>
  <li>[Lv3] N으로 표현 <a href="https://ydeer.tistory.com/42">https://ydeer.tistory.com/42</a></li>
  <li>[그래프] DFS와 BFS 구현하기 :: 마이구미 <a href="https://mygumi.tistory.com/102">https://mygumi.tistory.com/102</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_저울</title>
	  <link>/blog//algo-prog42886</link>
	  <author></author>
	  <pubDate>2019-11-28T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42886</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42886">https://programmers.co.kr/learn/courses/30/lessons/42886</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>추의 무게 순서대로 오름차순 정렬한다.</li>
  <li>현재까지 추를 조합해 잴 수 있는 무게의 최댓값을 answer이라 가정한다.</li>
  <li>answer을 가장 작은 추 무게로 초기화한다.</li>
  <li>0번째 값은 체크했으므로 그 다음 1부터 마지막까지 순회하며</li>
  <li>현재 추(w)가 answer+1보다 크다면 answer+1은 만들 수 없다는 뜻이므로 answer+1을 리턴한다.</li>
  <li>아니라면 answer+w까지는 추를 조합하여 만들 수 있으므로 answer+=w한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">weight</span><span class="o">);</span>        
        <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="n">weight</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span><span class="c1">//무조건 1이어야함        </span>
        <span class="c1">//answer까지는 무게 측정이 가능하다는 뜻임</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">weight</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">weight</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">answer</span><span class="o">+</span><span class="mi">1</span><span class="o">){</span><span class="c1">//answer다음의 answer+1을 만들 수 없다면</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">+=</span><span class="n">weight</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//만들 수 없는 최솟값이므로 만들 수 있는 answer다음의 answer+1을 리턴</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191128_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">weight를 오름차순 정렬한다.</span></strong>
    <ul>
      <li>1부터 시작해서 무게 측정이 가능한지 확인하기 위함이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer은 최대 answer까지 무게 측정이 가능하다는 뜻이다.</span></strong>
    <ul>
      <li>answer을 weight[0]으로 초기화했으므로 현재 1까지는 무게 측정이 가능하다는 의미이다.</li>
      <li>0부터 i까지의 무게 추를 모두 더한 값이 answer이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer까지 측정이 가능하므로 그 다음 숫자인 answer+1이 가능한지 확인해야한다.</span></strong>
    <ul>
      <li>따라서 현재 weight[i]가 answer+1이거나 answer+1안의 범위(weight[i]&lt;=answer+1)에 들어와야한다.</li>
      <li><span style="color:red">만약 weight[i]==answer+1이라면</span> weight[i]하나로 answer+1이 측정 가능하다.</li>
      <li><span style="color:red">weight[i]&lt;answer+1이라면,</span> answer+1은 answer+w-(w-1)로 만들 수 있다. (w-1은 당연히 만들 수 있다. 왜냐하면 w라는 무게는 1부터 i까지의 조합으로 만들 수 있으므로 이전의 값 w-1역시 가능하다.)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">weight[i]가 answer+1보다 크다면 answer+1은 만들 수 없다.</span></strong>
    <ul>
      <li>answer까지는 모든 추를 더해서 만든 최댓값인데, weight[i]가 1이 아니고서야 answer+1을 만들 수 없다.</li>
      <li>따라서 지금까지의 추를 조합해서 만들 수 있는 최댓값은 answer이 마지막이 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer+1이 가능하다면 answer+=weight[i]한다.</span></strong>
    <ul>
      <li>이제 0부터 i까지 조합으로 answer+weight[i]까지 측정이 가능해졌다.</li>
      <li>설명3에서 weight[i]&lt;answer+1일때 answer+1이 가능한 것처럼, answer+2…answer+weight[i]까지도 당연히 가능하다.</li>
      <li>(사실 answer+=weight[i]하는게 잘 와닿지 않는다. 뭔가 당연하면서도 당연하지 않게 느껴져서 여기서 시간을 다썼다.)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">리턴은 측정할 수 없는 수의 최솟값이므로 answer+1을 리턴한다.</span></strong>
    <ul>
      <li>answer은 측정 가능한 값이고, 문제에서 요구하는 것은 측정할 수 없는 최솟값이므로 answer+1이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드를 봤을때는 되게 간단해보이는데 문제는 그렇지 않았다. 그냥 문제를 주고 풀어라 해도 노가다로 뛸 판에 코딩하라니까 더 어려웠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>Greedy ‘저울’ 알고리즘 문제풀이 <a href="https://geehye.github.io/programmers-greedy-07/#">https://geehye.github.io/programmers-greedy-07/#</a></li>
  <li>[백준 #2437번 JAVA] 저울 풀이 <a href="https://plplim.tistory.com/59">https://plplim.tistory.com/59</a></li>
  <li>백준 2437번 저울 <a href="https://jaimemin.tistory.com/756">https://jaimemin.tistory.com/756</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_단속카메라</title>
	  <link>/blog//algo-prog42884</link>
	  <author></author>
	  <pubDate>2019-11-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42884</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42884">https://programmers.co.kr/learn/courses/30/lessons/42884</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>빨리 나간 순서대로 정렬한다.</li>
  <li>진입시점이 늦은 것을 발견했을 때, 해당 나가는 시점을 저장해 앞에까지는 카메라를 만났음을 확정한다. 따라서 카메라++한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">routes</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">routes</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;(){</span><span class="c1">//routes[i][1]기준 오름차순 정렬</span>
             <span class="nd">@Override</span>
             <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">){</span>
                 <span class="k">return</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]-</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
             <span class="o">}</span>
         <span class="o">});</span>

         <span class="kt">int</span> <span class="n">latest</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span><span class="c1">//Integer의 최솟값으로 초기화       </span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">routes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//모든 경로를 순회</span>
             <span class="k">if</span><span class="o">(</span><span class="n">latest</span><span class="o">&lt;</span><span class="n">routes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]){</span><span class="c1">//현재 기준 진입시점이 가장 늦은 차를 발견하면</span>
                 <span class="n">latest</span><span class="o">=</span><span class="n">routes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span><span class="c1">//해당 차의 나가는 점을 저장</span>
                 <span class="n">answer</span><span class="o">++;</span><span class="c1">//현재 차까지 경로에 카메라를 하나 추가하여 최소 한번쯤은 카메라를 만나는 것을 보장</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191127_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">routes를 빨리 나간 순서대로 정렬한다.</span></strong>
    <ul>
      <li>차량이 나가기 전에 최소 한 번 카메라를 만나면 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">진입시점이 늦은 차량을 찾는다.</span></strong>
    <ul>
      <li><span style="color:red">차들의 경로가 겹친다면</span> 가장 늦게 들어온 차의 진입시점에 카메라를 놓으면 된다.</li>
      <li>그러면 겹치는 차들은 카메라를 최소 한 번 만났으므로 선상에서 제외한다.</li>
      <li>뒤의 값들은 현재까지의 가장 늦게 나가는 차량 뒤에 진입하므로(차들의 경로가 겹친다고 가정하고 있음!) latest에 가장 늦게 들어온 차의 나가는 시점을 저장한다.</li>
      <li><span style="color:red">차들의 경로가 겹치지 않더라도 문제없다.</span></li>
      <li>경로가 겹치지 않는다는 것은 앞에까지의 차들은 계산이 끝났다는 뜻이다. 내 진입시점이 현재로선 가장 늦으므로 위 if문을 만족하여 카메라를 추가하게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">latest는 가장 작은 값으로 초기화되야 한다.</span></strong>
    <ul>
      <li>routes에서 진입시점이 가장 작은 값이 무엇인지 알 수 없기 때문에, 그보다 더 작은 값을 저장하여 if문에서 비교가 가능하도록 해야한다. 문제에서는 차량 진입, 나가는 시점의 범위를 주었으므로 -30000으로 초기화해도 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>접근 방식을 모르겠어서 구글링하다가 엄청 간단하게 해결한 코드가 있어서 그 코드를 이해하는데 시간을 다썼다. 주석이라도 한줄 달아줬다면 좋았을텐데…. 주석의 중요성 다시 한 번 느낀다. 어쨌든 이런 생각을 하는게 대단할 뿐</p>

<h3 id="참고">참고</h3>
<ul>
  <li>Greedy ‘단속카메라’ 알고리즘 문제풀이 <a href="https://geehye.github.io/programmers-greedy-06/#">https://geehye.github.io/programmers-greedy-06/#</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_섬 연결하기</title>
	  <link>/blog//algo-prog42861</link>
	  <author></author>
	  <pubDate>2019-11-26T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42861</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42861">https://programmers.co.kr/learn/courses/30/lessons/42861</a></p>

<h3 id="테스트케이스-추가">테스트케이스 추가</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">n(int)</th>
      <th style="text-align: center">costs(int[][])</th>
      <th style="text-align: center">Return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">[[0, 1, 1], [2, 3, 1], [0, 2, 2], [0, 3, 3]]</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">[[0, 1, 1], [2, 3, 2], [4, 5, 2], [2, 4, 3], [1, 5, 4]]</td>
      <td style="text-align: center">11</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<p>=&gt; 크루스칼(Kruskal) 알고리즘을 이용한다.</p>
<ol>
  <li>비용을 오름차순으로 정렬한다.</li>
  <li>사이클이 생기지 않도록 처음부터 체크하며 연결한다.
    <ul>
      <li>섬 둘다 true면 연결되었으므로 넘어감</li>
      <li>둘 다 false면 boolean 변수로 체크해두고 다음으로 넘어감</li>
      <li>둘 중 하나가 false면 연결해주고, 앞에서 둘다 false라 넘어간 것이 있는지 체크. 있다면 앞에서부터 다시 체크.</li>
    </ul>
  </li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">costs</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span><span class="c1">//true면 섬이 연결된 것</span>

        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">costs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;(){</span><span class="c1">//비용 기준 오름차순 정렬</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">){</span>
                <span class="k">return</span> <span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">]-</span><span class="n">b</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="kt">int</span> <span class="n">connect</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//섬들이 모두 연결되었는지 체크</span>
        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//섬들을 순회하는 인덱스</span>
        <span class="kt">int</span> <span class="n">a</span><span class="o">=-</span><span class="mi">1</span><span class="o">,</span><span class="n">b</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//두 섬을 가져오는 변수</span>

        <span class="n">visit</span><span class="o">[</span><span class="n">costs</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//시작점</span>
        <span class="kt">boolean</span> <span class="n">passIdx</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="c1">//둘다 F라 뛰어넘은 경우 true로 저장</span>
        <span class="k">while</span><span class="o">(</span><span class="n">connect</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">costs</span><span class="o">.</span><span class="na">length</span><span class="o">){</span><span class="c1">//모든 섬이 연결될때까지&amp;&amp;i가 인덱스 범위를 넘어가지 않게</span>
            <span class="n">a</span><span class="o">=</span><span class="n">costs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">b</span><span class="o">=</span><span class="n">costs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">a</span><span class="o">]&amp;&amp;!</span><span class="n">visit</span><span class="o">[</span><span class="n">b</span><span class="o">]){</span><span class="c1">//둘다 F면</span>
                <span class="n">passIdx</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(!(</span><span class="n">visit</span><span class="o">[</span><span class="n">a</span><span class="o">]&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">b</span><span class="o">])){</span><span class="c1">//둘중 하나가 F면</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">a</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">b</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                <span class="n">connect</span><span class="o">++;</span>
                <span class="n">answer</span><span class="o">+=</span><span class="n">costs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span><span class="c1">//비용 계산</span>
                <span class="k">if</span><span class="o">(</span><span class="n">passIdx</span><span class="o">){</span><span class="c1">//둘다 F라 패스한 것이 있으므로 다시 돌아가 체크</span>
                    <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="c1">//i=1부터 순회하기 위함(처음은 무조건 연결되었으므로 볼 필요도 없음). 밑에서 i++됨</span>
                    <span class="n">passIdx</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">i</span><span class="o">++;</span><span class="c1">//다음 섬으로 인덱스 이동</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191126_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">비용을 기준으로 오름차순 정렬한다.</span></strong>
    <ul>
      <li>이를 통해 최소 비용으로 섬을 연결한다는 조건을 만족시킨다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">섬 간의 연결은 둘 중 하나가 false일 경우에만 가능하다.</span></strong>
    <ul>
      <li>섬 간의 연결 유무는 boolean[] visit를 이용한다. 연결되었으면 true, 아니면 false이다.</li>
      <li>섬 a, b가 둘 다 true인 경우는 연결되었다는 뜻이므로 패스한다.</li>
      <li>둘 다 false인 경우에는 연결하지 않는다. 현재 연결된 섬들에서는 a, b로 이동할 수 없기 때문이다. 일단은 passIdx를 통해 이런 상황이 있음을 표시하고, 다음으로 넘어간다. 나중에 a, b중 하나와 연결이 된다면 다시 되돌아와 연결해주면 된다.</li>
      <li>둘 중 하나가 false일 때 연결해준다. 하나는 true이므로 섬들과 연결되어있다는 뜻이고, 하나는 false이므로 연결지어줄 수 있기 때문이다.</li>
      <li>섬끼리 연결되었다면 boolean[] visit의 해당 인덱스를 true로 바꾼다. connect++하여 연결된 섬의 숫자를 카운트한다. 비용도 answer에 추가한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">연결에 성공한 경우에는 passIdx를 체크한다.</span></strong>
    <ul>
      <li>passIdx는 비용이 적어서 우선순위가 컸지만, 그때 상황으로는 연결할 수 없을 때 true를 저장한다. 하지만 새로운 연결이 생성된 지금에는 이전에는 할 수 없었던 섬 연결이 가능할지도 모른다. 따라서 i=1부터 다시 체크하여 연결할 수 있다면 해준다.</li>
      <li>처음에는 passIdx를 int형으로 선언하여 연결 못하고 넘어간 인덱스 번호를 저장했었다. i=1부터 순회하지 않고 놓친 부분으로 바로 들어갈 수 있게 하여 효율성을 높이고자 했다. 하지만 이렇게 구현하면 안된다. 이 경우 위 추가된 테스트케이스2에서 실패한다. [0,1,1]에서 섬을 연결하고 [2,3,2]~[2,4,3]까지는 모두 연결할 수 없어 패스하게 되는데, passIdx를 int형으로 선언하여 인덱스 값을 저장한다면 값이 계속 덮여 제일 마지막 [2,4,3]의 인덱스 3을 저장하게 되어 앞에 두 값들은 무시하게 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>이런거 이론으로 알고리즘 시간에 배웠었는데 열심히 공부해둘걸T_T. 처음 코드는 테스트2~7까지 모조리 실패하고, 다음은 4, 6, 7을 실패해서 도대체 놓친 부분이 뭔지 고민하느라 힘들었다. 케이스 조건 생각해내는게 힘들다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[Lv3] 섬 연결하기 <a href="https://ydeer.tistory.com/52">https://ydeer.tistory.com/52</a></li>
  <li>[알고리즘] 크루스칼 알고리즘(Kruskal Algorithm) <a href="https://brenden.tistory.com/36">https://brenden.tistory.com/36</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_구명보트</title>
	  <link>/blog//algo-prog42885</link>
	  <author></author>
	  <pubDate>2019-11-25T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42885</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42885">https://programmers.co.kr/learn/courses/30/lessons/42885</a></p>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>오름차순으로 정렬한다.</li>
  <li>앞뒤 인덱스를 둬서 체크한다.</li>
  <li>탈출할 수 있으면 해당 값을 삭제한다.</li>
  <li>다시 i, j 인덱스를 원위치로 두고 체크한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">rescue</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">j</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">++;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)&lt;=</span><span class="n">limit</span><span class="o">){</span>
                <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                <span class="n">j</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="n">j</span><span class="o">--;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="mi">0</span><span class="o">){</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="n">answer</span><span class="o">++;</span>
                    <span class="n">j</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">people</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">people</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">rescue</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191125_1.PNG" alt="실행결과" />
실패.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>바보같이 int[]는 오름차순으로 정렬 못한다고 생각하고(내림차순이 Integer[]로 변환후 사용인데) List로 바꿔서 사용했다. 리스트에서 값을 모두 체크하고 삭제하는 과정때문에 효율성이 낮아졌다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>오름차순으로 정렬하되, int[]를 그대로 사용한다.</li>
  <li>앞뒤 인덱스 i, j를 두어 체크한다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">people</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">people</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">j</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">people</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">people</span><span class="o">[</span><span class="n">j</span><span class="o">--]&gt;</span><span class="n">limit</span><span class="o">){</span>
                <span class="n">answer</span><span class="o">++;</span><span class="c1">//j꺼</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">++;</span><span class="c1">//i(+j)꺼</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-코드-설명">3. 코드 설명</h3>
<ul>
  <li>Arrays.sort()로 people을 오름차순 정렬한다.</li>
  <li>i는 앞에서부터, j는 뒤에서부터 순회한다.</li>
  <li>i, j가 만나면 배열 원소들을 모두 읽은 것이므로 종료한다.</li>
  <li>for문: for문의 조건 중 i&lt;j가 아니라 i&lt;=j 이유는, i가 혼자 남았을 경우 i의 answer++을 위해 for문에 들어오게 하도록 하기 위함이다.</li>
  <li>while문: 해당 while문은 i+j값이 limit를 초과하는 경우를 체크한다. i+j&lt;=limit를 만족하지 않는다는 뜻은, j와 더해서 limit를 만족할 값은 배열에 없다는 뜻이다. j가 최댓값이고 i가 최솟값인데 i와 만족하지 않는다면 i보다 큰 값들은 당연히 만족하지 않는다.<br />
따라서 j는 홀로 탈출해야하므로 j의 answer을 더한다.<br />
j–는 while문 안에 넣을 수 없다. j–가 while문 안에 있다면 i+j&lt;=limit인 경우에는 해당 것에 대해 answer++을 한 후 j가 앞으로 인덱스 조정이 일어나지 않기 때문이다.</li>
  <li>while문을 탈출한 경우는 i에 만족하는 j가 있거나, 없을 경우이다. 있다면 i+j것을, 없다면 i 홀로 탈출하므로 answer++이다.</li>
</ul>

<h3 id="4-결과">4. 결과</h3>
<p><img src="./assets/images/191125_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>그래도 나름 처음 접근은 좋았다! 오름차순으로 정렬해 인덱스를 앞뒤로 순회하면서 문제를 해결한다는 것은 맞았다. 이를 간단하고 효율적으로 코딩하는 것에서 헤맸지만..</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_큰 수 만들기</title>
	  <link>/blog//algo-prog42883</link>
	  <author></author>
	  <pubDate>2019-11-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42883</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42883">https://programmers.co.kr/learn/courses/30/lessons/42883</a></p>

<h3 id="테스트케이스-추가">테스트케이스 추가</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">number(string)</th>
      <th style="text-align: center">k(int)</th>
      <th style="text-align: center">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">“10000”</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">“100”</td>
    </tr>
  </tbody>
</table>

<h2 id="-ᐛ-و-첫-번째-도전"><span style="color:navy">( ᐛ )و 첫 번째 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>number을 charAt()으로 하나씩 비교한다.</li>
  <li>지금 값이 스택 탑보다 크면 팝하고 k–한다(지금값&lt;=스택값 될때까지).</li>
  <li>k&gt;0까지만 팝할 수 있다.</li>
  <li>k가 끝났으면 나머지 number을 스택에 푸시한다.</li>
  <li>숫자가 끝났는데도 k&gt;0이라면 스택에서 갯수만큼 팝한다(뒤에서 삭제).</li>
  <li>스택을 팝하면서 앞에서 추가한다(스택은 LIFO이므로.)</li>
</ol>

<h3 id="2-구현">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="kt">char</span> <span class="n">num</span><span class="o">,</span> <span class="n">stNum</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span><span class="c1">//number순회</span>
            <span class="n">num</span><span class="o">=</span><span class="n">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//하나씩 추출</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">stNum</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stNum</span><span class="o">&lt;</span><span class="n">num</span><span class="o">){</span><span class="c1">//스택팝보다 큰 수를 넣어야함</span>
                    <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                    <span class="n">k</span><span class="o">--;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span><span class="c1">//스택이 정리되었으므로 푸시</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span><span class="c1">//숫자가 끝났는데도 k가 남았다면 그만큼 팝</span>
            <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span><span class="c1">//최종 값 생성</span>
            <span class="n">answer</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()+</span><span class="n">answer</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191121_1.PNG" alt="실행결과" />
실패.</p>

<h3 id="4-문제점">4. 문제점</h3>
<p>시간초과는 StringBuilder를 이용하고, 실패한 테스트는 위 테스트케이스를 만족하도록 코드를 수정한다.</p>

<h2 id="-ᐛ-و-두-번째-도전"><span style="color:navy">( ᐛ )و 두 번째 도전</span></h2>

<h3 id="1-설계-1">1. 설계</h3>
<ol>
  <li>while(k&gt;0)에서 스택에 값이 있을 때 팝할 수 있도록 조건을 추가한다.</li>
  <li>문자열 연결을 StringBuilder을 사용하여 시간을 줄인다.</li>
</ol>

<h3 id="2-구현-1">2. 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="kt">char</span> <span class="n">num</span><span class="o">,</span> <span class="n">stNum</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span><span class="c1">//number순회</span>
            <span class="n">num</span><span class="o">=</span><span class="n">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//하나씩 추출</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">stNum</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stNum</span><span class="o">&lt;</span><span class="n">num</span><span class="o">){</span><span class="c1">//스택팝보다 큰 수를 넣어야함</span>
                    <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                    <span class="n">k</span><span class="o">--;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span><span class="c1">//스택이 정리되었으므로 푸시</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()&amp;&amp;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span><span class="c1">//숫자가 끝났는데도 k가 남았다면 그만큼 팝</span>
            <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">k</span><span class="o">--;</span>
        <span class="o">}</span>
        <span class="c1">//최종 값 생성</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">();</span><span class="c1">//sb에 역순으로 저장되었으므로 뒤집어줌</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="3-코드-설명">3. 코드 설명</h3>
<ul>
  <li>Stack<Chracter> st: number을 charAt()으로 하나씩 비교하여 저장한다.</Chracter></li>
  <li>StringBuilder sb: 문자열을 연결할 때 시간을 줄여준다.</li>
  <li>char num: number.charAt()로 추출한 값이다.</li>
  <li>
    <h2 id="char-stnum-스택의-탑-값이다">char stNum: 스택의 탑 값이다.</h2>
  </li>
  <li>스택에는 탑보다 큰 수를 넣어야한다.</li>
  <li>탑이 num보다 작을 경우에는 탑을 팝한다. 이때 스택이 비어있지 않고 뺄 수 있는 기회 k가 남아있어야한다. 팝한 후에는 k를 하나 줄여서 이를 센다.</li>
  <li>스택의 정리가 끝났다면 현재 값 num을 푸시한다.</li>
  <li>number 순회가 끝났는데도 k가 남아있다면 그 갯수만큼 스택에서 뺀다. answer에는 최댓값이 들어가야하므로 스택의 탑을 팝하면 자릿수가 작은 일의자리부터 차례대로 빠진다.</li>
  <li>k도 계산이 끝났다면 StringBuilder을 이용해서 스택을 팝하여 문자열(최댓값 숫자)을 생성한다. 스택은 LIFO이므로 sb에는 거꾸로 문자가 이어진다.</li>
  <li>따라서 sb.reverse()로 문자열을 한 번 뒤집고, 형변환을 거쳐 리턴한다.</li>
</ul>

<h3 id="4-결과">4. 결과</h3>
<p><img src="./assets/images/191121_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>처음에는 number을 int형으로 배열에 저장한 후, 이전 문제에서 배웠던 perm()을 구현하여 k자리 조합을 모두 찾은 후 Math.max()을 이용해 문제를 풀까 했다. 그러지 않아서 다행이다. 아직까지도 문제를 보면 어떻게 효율적으로 풀 지 정리가 안된다T_T.</p>

	  ]]></description>
	</item>


</channel>
</rss>
