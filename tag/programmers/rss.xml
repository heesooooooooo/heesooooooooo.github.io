<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_네트워크</title>
	  <link>/blog//algo-prog43162</link>
	  <author></author>
	  <pubDate>2019-12-05T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43162</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43162">https://programmers.co.kr/learn/courses/30/lessons/43162</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>연결된 노드를 끝까지 찾아가야하므로 DFS이다. 따라서 재귀함수를 사용한다.</li>
  <li>solution()에서 n개의 노드들을 확인한다. 아직 방문하지 않았다면 방문한다.</li>
  <li>재귀로 현재 노드와 연결된 것들도 모두 방문한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">computers</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//n개의 노드 체크</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span><span class="c1">//아직 방문하지 않았다면</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">computers</span><span class="o">);</span><span class="c1">// 현재노드와 연결된 노드들도 찾아서 방문</span>
                <span class="n">answer</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">me</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">computers</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//나와 연결된 노드들을 모두 확인</span>
            <span class="k">if</span><span class="o">(</span><span class="n">computers</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]==</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="n">visit</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span><span class="c1">//나와 연결되어있는데 방문하지 않았다면</span>
                <span class="n">visit</span><span class="o">[</span><span class="n">me</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//방문</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">visit</span><span class="o">,</span> <span class="n">computers</span><span class="o">);</span><span class="c1">//방문한 곳을 기준으로 재귀호출</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191205_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">메인문에서 모든 노드들을 체크한다.</span></strong>
    <ul>
      <li>1부터 n까지 노드들을 확인한다.</li>
      <li>아직 방문하지 않았다면 그 노드를 기준으로 연결된 노드들을 확인한다.</li>
      <li>현재 노드와 연결된 노드들을 찾는 것은 네트워크 하나를 찾는 것과 같으므로 answer++한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">연결된 노드를 확인하기 위해 재귀함수를 사용한다.</span></strong>
    <ul>
      <li>특정 노드와 연결된 노드들을 모두 찾아야 하므로 DFS이다(나와 연결된 노드의 끝까지 방문해야하기때문).</li>
      <li>solution()에서 i번째 노드와 연결된 것들을 찾기위해 dfs를 호출하면, computers[i]행의 원소들을 순회하며 연결된 노드들을 찾고 방문한다.</li>
      <li>연결된 노드를 찾으면 그 노드를 기준으로 다시 dfs를 재귀호출하여 그 노드와 연결된 노드들을 또 찾는다.</li>
      <li>이렇게 하면 마지막까지 도달하게 되고, 그 과정에서 방문한 노드들은 true가 되어 중복 방문을 피할 수 있게 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제가 노드들의 방문이길래 당연히 BFS인줄 알았다. 분발하자T_T</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][JAVA] 네트워크 <a href="https://jayrightthere.tistory.com/entry/DFSJAVA-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">https://jayrightthere.tistory.com/entry/DFSJAVA-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 깊이/너비 우선 탐색(DFS/BFS)_타겟 넘버</title>
	  <link>/blog//algo-prog43165</link>
	  <author></author>
	  <pubDate>2019-12-05T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43165</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43165">https://programmers.co.kr/learn/courses/30/lessons/43165</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS문제이므로 재귀를 이용한다.</li>
  <li>덧셈이나 뺄셈을 이용해 숫자를 계산하므로 이 두가지의 경우에 따라 재귀를 호출하면 된다.</li>
  <li>배열 numbers의 값을 모두 사용하면 숫자가 target과 맞는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">){</span><span class="c1">//numbers숫자를 모두 사용했다면</span>
            <span class="k">return</span> <span class="n">sum</span><span class="o">==</span><span class="n">target</span><span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//target과 같은지에 따라 값 리턴</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span><span class="c1">//덧셈 또는 뺄셈으로 재귀호출. 두 호출 끝의 리턴값을 더해서 answer세야하므로 +</span>
            <span class="k">return</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">+</span><span class="n">numbers</span><span class="o">[</span><span class="n">idx</span><span class="o">])+</span><span class="n">dfs</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">-</span><span class="n">numbers</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191205_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">모든 인덱스를 방문해야하므로 DFS를 사용한다.</span></strong>
    <ul>
      <li>배열 numbers의 원소을 더하거나 빼서 target이 되는 모든 수를 찾아야하므로 DFS를 이용한다.</li>
      <li>DFS는 재귀나 스택을 사용하는데, 이 문제에서는 재귀를 썼다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">인덱스가 마지막 노드까지 방문했느냐에 따라서 다음 재귀를 호출할지 결정한다.</span></strong>
    <ul>
      <li>숫자를 모두 사용했다면 지금까지 계산한 sum이 target과 맞는지 확인한다. 맞다면 answer++하기위해 1을 리턴, 아니라면 0을 리턴한다.</li>
      <li>아직 다음 노드가 존재할 경우 현재 원소의 값을 sum에 더하거나 뺀다(4번째 파라미터). 그리고 다음 방문을 위해 idx를 하나 증가(3번째 파라미터)시킨다.</li>
      <li>이때 재귀호출한 두 함수 사이의 +는, 각 경우에 따른 재귀 리턴값을 모두 더해서 방법의 수를 계산하기 위함이다. 최종적으로 solution함수에서 호출한 dfs(numbers, target, 0, 0)에 총 방법의 수가 리턴된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>재귀로 풀어야겠다고 느낌은 왔는데, 안에 파라미터를 어떻게 사용할지, 점화식은 어떻게 작성해야할지 헷갈린다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스 알고리즘] 타켓넘버 - 깊이탐색 DFS <a href="https://lkhlkh23.tistory.com/74">https://lkhlkh23.tistory.com/74</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_도둑질</title>
	  <link>/blog//algo-prog42897</link>
	  <author></author>
	  <pubDate>2019-12-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42897</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42897">https://programmers.co.kr/learn/courses/30/lessons/42897</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>첫 번째 집을 훔치는 것과 아닌 것에 따라 값이 달라진다.</li>
  <li>두 경우에 따른 값을 저장할 배열을 두개 생성한다.</li>
  <li>현재 집의 돈을 훔치는게 이득인지 체크한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">money</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">money</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span><span class="c1">//마지막은 훔칠 수 없으므로 -1</span>
         <span class="kt">int</span><span class="o">[]</span> <span class="n">dp2</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">money</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>

         <span class="c1">//dp 첫 번째 집을 훔치는 경우</span>
         <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">money</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
         <span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">money</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span><span class="c1">//0번째 집을 훔쳤으므로 1번은 훔칠 수 없으므로 현재까지의 최댓값(dp[0])을 저장</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dp</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">]+</span><span class="n">money</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
         <span class="o">}</span>

         <span class="c1">//dp2 두 번쨰 집부터 훔치는 경우</span>
         <span class="n">dp2</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">money</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dp2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
             <span class="n">dp2</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp2</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">]+</span><span class="n">money</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp2</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
         <span class="o">}</span>

         <span class="n">answer</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">dp</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">],</span> <span class="n">dp2</span><span class="o">[</span><span class="n">dp2</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191204_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">경우의 수는 두 개이다.</span></strong>
    <ul>
      <li>첫 번째 집을 훔치는 경우(dp), 두 번째 집부터 훔치는 경우(dp2)로 나뉜다.</li>
      <li>첫 번째 집을 훔친다면 마지막은 훔칠 수 없으므로 배열의 크기는 money.length-1이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">돈을 훔칠지 말지 결정한다.</span></strong>
    <ul>
      <li>훔칠 수 있다면 dp[i-2]+money[i]이다(한 단계 건너뛰고 훔칠 수 있으므로). 지금 훔친다면 dp[i-1]의 값은 사용할 수 없다.</li>
      <li>따라서 dp[i-2]+money[i]&gt;dp[i-1]라면 훔치고, 아니라면 훔치지 않는다.</li>
      <li>훔치지 않는다면 다음에서 dp[i-1]값을 사용한다는 뜻이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>처음에는 집을 기준으로 한 번 건너뛸지 두 번 할지에 따라서 코드를 작성할까 했는데, 돈을 기준으로 코드를 구상하면 더 깔끔하고 좋은 것 같다. 근데 그 생각의 전환이 어렵다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[Algorithm]프로그래머스-도둑질 <a href="https://doohong.github.io/2019/03/14/Algorithm-%20thievery/">https://doohong.github.io/2019/03/14/Algorithm-%20thievery/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_서울에서 경산까지</title>
	  <link>/blog//algo-prog42899</link>
	  <author></author>
	  <pubDate>2019-12-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42899</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42899">https://programmers.co.kr/learn/courses/30/lessons/42899</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>i번째 도시 j분까지의 최대 모금액을 저장할 배열을 생성한다.</li>
  <li>현재 도시의 도보, 자전거 중 큰 모금액을 선택한다.</li>
  <li>이전 도시까지의 모금액에 더한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">K</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">travel</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">travel</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">K</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">money</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">wT</span><span class="o">,</span> <span class="n">wM</span><span class="o">,</span> <span class="n">bT</span><span class="o">,</span> <span class="n">bM</span><span class="o">;</span><span class="c1">//walkTime,Money, bikeTime,Money</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">travel</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//위치</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">K</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span><span class="c1">//시간</span>
                <span class="n">money</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">wT</span><span class="o">=</span><span class="n">travel</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
                <span class="n">wM</span><span class="o">=</span><span class="n">travel</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
                <span class="n">bT</span><span class="o">=</span><span class="n">travel</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span>
                <span class="n">bM</span><span class="o">=</span><span class="n">travel</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">3</span><span class="o">];</span>
                <span class="c1">//둘 중 최대 모금액 체크</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">wT</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">wM</span><span class="o">+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">wT</span><span class="o">]&gt;</span><span class="n">money</span><span class="o">){</span><span class="c1">//도보</span>
                    <span class="n">money</span><span class="o">=</span><span class="n">wM</span><span class="o">+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">wT</span><span class="o">];</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">bT</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">bM</span><span class="o">+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">bT</span><span class="o">]&gt;</span><span class="n">money</span><span class="o">){</span><span class="c1">//자전거</span>
                    <span class="n">money</span><span class="o">=</span><span class="n">bM</span><span class="o">+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">bT</span><span class="o">];</span>
                <span class="o">}</span>
                <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">money</span><span class="o">==-</span><span class="mi">1</span><span class="o">?</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">:</span><span class="n">money</span><span class="o">;</span><span class="c1">//시간초과로 방문할수없다면 MAX저장, i번째도시 j분까지의 최대 모금액 저장</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">dp</span><span class="o">[</span><span class="n">travel</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">K</span><span class="o">];</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191204_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">for문에서 j는 0분부터 K분까지 모두 순회한다.</span></strong>
    <ul>
      <li>0분부터 시작해서 K까지 증가하며 이전에 방문한 도시가 있는지 체크한다. 있다면 현재 dp[i][j]는 유효하다는 뜻이다. 없다면 현재 dp는 방문할 수 없는 조건이라는 뜻이다.</li>
      <li>이전 도시가 있다면 거기까지의 최댓값에 현재에서 얻을 수 있는 최댓값을 더하는 식으로 알고리즘이 전개된다.</li>
      <li>참고로 i는 dp를 통해 이전 도시까지의 최댓값을 알아야하므로 i-1을 사용해야하고, 따라서 1부터 시작한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">현재 위치에서 도보와 자전거 중 최대 모금액을 찾는다.</span></strong>
    <ul>
      <li>이때 money에 이전 위치까지의 모금액을 포함해 최댓값을 저장한다.</li>
      <li>최대 금액은 이전 위치까지의 모금액에 따라 달라진다. 단순히 현재 위치에서 도보와 자전거 금액을 비교해선 안된다.</li>
      <li>이전까지의 모금액을 알기 위해 dp[i-1][j-wT]를 방문한다. 이때 i-1은 이전 위치, j-wT는 현재 시간j에서 도보시간wT를 뺀 값이다. 그러면 이전 시간으로 돌아갈 수 있다.</li>
      <li>j-wT가 인덱스 범위를 벗어나지 않도록 체크하는 것이 &amp;&amp;앞의 조건문이다.</li>
      <li>인덱스 범위를 벗어난다면 money에는 값이 갱신되지 않는다. 이 경우는 dp[i][j]가 travel의 위치, 시간에 포함되지 않는 경우이다. 우리는 dp배열 크기를 모두 사용하지 않는다. dp배열을 [travel.length+1][K+1]로 선언한 이유는 마지막에 도착하는 [travel.length][K]를 사용하기 위해서이다. 테스트1을 예로 들었을때, 우리는 dp[1][3]은 사용하지 않는다. 도시1일때 3초인 경우는 없다. 이 경우 if문을 만족하지 않아 money가 갱신되지 않는다. 결국 방문할 수 없는 조건이라는 뜻이다.
<img src="./assets/images/191204_3.png" alt="실행결과" width="300" height="300" /></li>
      <li>결국 위 배열 사이에 Integer.MAX_VALUE의 뜻은 dp[i][j]가 방문할 수 없는 잘못된 조건이라는 뜻이고, 해당 위치에 방문했다는 뜻은 특정 j에서 이전에 방문한 도시가 존재하는지 확인하러 왔다는 것인데, MAX가 있으므로 지금 j 위치로 올 수 있는 경우는 없다고 알게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">dp[i][j]에 최대 모금액을 저장한다.</span></strong>
    <ul>
      <li>위에서 if문을 실행했다면 money에는 -1 또는 도보, 자전거를 포함한 모금액이 들어갔을 것이다.</li>
      <li>-1인 경우에는 Integer.MAX_VALUE로 int최댓값을 저장해야한다. 나중에 dp[i][j]를 방문했을때 가장 큰 값이 들어가야 money의 갱신이 일어나지 않기 떄문이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">dp[travel.length][K]에 최댓값이 저장된다.</span></strong>
    <ul>
      <li>해당 값을 answer로 리턴하면 된다.</li>
      <li>사실 이해가 안된다. i야 그렇다 치고 K분 이전에 도착하는게 최적일 수 있는데 그러면 항상 dp[travel.length][K]에 들어간다고 할 수 없지 않나?</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>어렵다 어려워…모든 경우의 수를 생각해야하므로 당연히 재귀를 호출할 것이라고 생각했는데, 다른 사람들의 풀이과정에서 재귀를 한 번도 못봤다. 그리고 이게 초등부 문제라니 도대체 2000년대에 무슨 일이 있었던거지</p>

<h3 id="참고">참고</h3>
<ul>
  <li>서울에서 경산까지 <a href="https://webfirewood.tistory.com/97">https://webfirewood.tistory.com/97</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_등굣길</title>
	  <link>/blog//algo-prog42898</link>
	  <author></author>
	  <pubDate>2019-12-03T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42898</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42898">https://programmers.co.kr/learn/courses/30/lessons/42898</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>최단거리 구하는 방법을 적용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">puddles</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">route</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">puddles</span><span class="o">){</span><span class="c1">//웅덩이 설정</span>
            <span class="n">route</span><span class="o">[</span><span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]-</span><span class="mi">1</span><span class="o">][</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="mi">1</span><span class="o">]=-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">route</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span><span class="c1">//시작값 초기화</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//웅덩이는 0으로 변경</span>
                    <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span><span class="o">{</span><span class="c1">//웅덩이가 아니라면</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">){</span><span class="c1">//왼쪽 값을 가져올 수 있다면</span>
                        <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">){</span><span class="c1">//위 값을 가져올 수 있다면</span>
                        <span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="o">==</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//목적지에 도착했다면</span>
                    <span class="n">answer</span><span class="o">=</span><span class="n">route</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]%</span><span class="mi">1000000007</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191203_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">최단거리 구하는 방법을 적용한다.</span></strong><br />
<img src="./assets/images/191203_2.png" alt="실행결과" />
    <ul>
      <li>시작점을 포함한 행 열은 1로 초기화한다.</li>
      <li>웅덩이는 -1로 표시한다.</li>
      <li>현재 위치의 값은 왼쪽값+윗쪽값이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">마지막에서만 1,000,000,007로 나누면 효율성 테스트에서 시간 초과가 난다.</span></strong>
    <ul>
      <li>마지막 행에서 여러 경로에 대한 결과값이 저장되므로 이들 중 최댓값이 answer이다.</li>
      <li>정확한 이유는 잘 모르겠지만, 큰 값을 더하는 계속 더하는 것보다 그때그때 특정 값으로 나눈 나머지를 사용하여 값을 간단히 하는게 효율적이어서 그런게 아닐까 싶다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제 풀이법을 알면 코딩하는 것은 그렇게 어렵지는 않지만 그 풀이법을 생각해내는 것이 어렵다. 초등학교때 배운 이 방법을 기억하고 있지 않았더라면 이 문제를 해결하기 위해 얼마나 많은 시간을 투자했어야 할지..</p>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_카드 게임</title>
	  <link>/blog//algo-prog42896</link>
	  <author></author>
	  <pubDate>2019-12-03T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42896</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42898">https://programmers.co.kr/learn/courses/30/lessons/42898</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>최종 점수가 최댓값이 되기 위해 어떤 카드를 버리며 게임을 진행할 지 선택해야하므로 모든 경우의 수를 다 따져야 한다.</li>
  <li>현재 위치에서 왼쪽카드만 버릴 경우, 둘다 버릴 경우, 오른쪽 카드 숫자가 더 작아서 오른쪽을 버릴 경우에 따라 다음 점수를 계산하고, 이 중 최댓값을 선택해야하므로 재귀함수를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">;</span><span class="c1">//l, r일때의 최댓값을 저장</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">];</span><span class="c1">//배열 크기는 이곳에서 알 수 있으므로 여기서 초기화</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">dp</span><span class="o">){</span><span class="c1">//배열을 -1로 초기화</span>
            <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">recur</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span><span class="c1">//함수 호출</span>
        <span class="c1">//System.out.println(Arrays.deepToString(dp));</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">recur</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">right</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">l</span><span class="o">==</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">||</span><span class="n">r</span><span class="o">==</span><span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">){</span><span class="c1">//둘중 하나라도 끝나면</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]!=-</span><span class="mi">1</span><span class="o">){</span><span class="c1">//값이 계산되었다면(중복계산 방지)</span>
            <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">),</span> <span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">));</span><span class="c1">//왼쪽만 버릴지, 둘다 버릴지 결정</span>
        <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">[</span><span class="n">l</span><span class="o">]&gt;</span><span class="n">right</span><span class="o">[</span><span class="n">r</span><span class="o">]){</span><span class="c1">//오른쪽도 버릴 수 있을 경우</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">],</span> <span class="n">recur</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)+</span><span class="n">right</span><span class="o">[</span><span class="n">r</span><span class="o">]);</span><span class="c1">//버리는게 이득인지 확인</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191203_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">배열 dp는 전역변수로 선언한다.</span></strong>
    <ul>
      <li>재귀함수에서 배열에 값을 저장해야하기 떄문이다.</li>
      <li>recur에 파라미터로 넘길 경우 위치에 따라 배열에 값이 존재하지 않을 수도 있다.</li>
      <li>dp[l][r]은 현재 l, r카드에서 얻을 수 있는 최댓값을 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">배열 dp는 방문하지 않은 것을 알 수 있도록 표시해야한다.</span></strong>
    <ul>
      <li>나는 -1로 초기화해서 아직 값이 저장되어있지 않음을 나타내주었다.</li>
      <li>0으로 초기화하면 애매하다. 왼쪽이나 둘다 버릴 경우 점수가 0이기 때문이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">재귀호출을 통해 왼쪽과 둘다 버리는 경우 중 어느게 더 큰 점수를 리턴하는지 확인한다.</span></strong></li>
  <li><strong><span style="color:navy">왼쪽보다 오른쪽이 더 작다면 오른쪽을 버리는 경우도 확인한다.</span></strong>
    <ul>
      <li>위에서 왼쪽이나 두개 다 버린 것 중 최댓값이 저장되었으므로 이것과 오른쪽만 버리는 경우를 체크해서 더 큰 값을 저장한다.</li>
      <li>이때 오른쪽만 버린다면 오른쪽 카드의 숫자만큼 점수를 얻을 수 있으므로 뒤에 +right[r]을 추가한다. 점수를 획득한 것을 나타내었다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">l 또는 r이 끝난 곳에서부터 0을 리턴해서 타고타고 올라가며 계산한다.</span></strong>
<img src="./assets/images/191203_4.PNG" alt="실행결과" />
    <ul>
      <li>맨처음 recur(0,0,left,right)호출을 시작해서 모든 경우의 수에 따라 재귀호출 경로가 만들어진다.</li>
      <li>맨 마지막에 l 또는 r이 끝난 곳에서 0을 리턴하고, 다시 타고타고 올라가며 +right[r]이 있는 곳에서는 점수를 획득하게 된다.</li>
      <li>마지막에는 dp[0][0]까지 다시 되돌아 올 것이고, 여기에 최종값이 저장된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>뭔가 알 것 같으면서도 아닌 것 같기도 하고 어려운 재귀의 세계…</p>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 10835번. 카드게임 (Java) <a href="https://bcp0109.tistory.com/54">https://bcp0109.tistory.com/54</a></li>
  <li>[ 백준 11062 ] 카드게임 <a href="https://wan088.github.io/algorithm/2018/07/15/algo-cardgame/#fn:1">https://wan088.github.io/algorithm/2018/07/15/algo-cardgame/#fn:1</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_정수 삼각형</title>
	  <link>/blog//algo-prog43105</link>
	  <author></author>
	  <pubDate>2019-12-02T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43105</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43105">https://programmers.co.kr/learn/courses/30/lessons/43105</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>배열을 이용해 위아래 서로간 대각선 합을 저장한다.</li>
  <li>맨 마지막 행에서 최댓값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">triangle</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">sum</span><span class="o">[][]=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">];</span><span class="c1">//합을 저장할 배열</span>
         <span class="n">sum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">triangle</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//가장 왼쪽과 오른쪽은 다음 위치가 지정되어있음</span>
             <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
             <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
         <span class="o">}</span>

         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">triangle</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//현재 위치로 올 수 있는 이전 줄 대각선 왼쪽 오른쪽 중 최댓값을 선택</span>
             <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                 <span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">],</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">])+</span><span class="n">triangle</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="n">sum</span><span class="o">[</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span><span class="c1">//마지막 행에서 최댓값을 선택</span>
             <span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">sum</span><span class="o">[</span><span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
         <span class="o">}</span>
         <span class="n">answer</span><span class="o">=</span><span class="n">max</span><span class="o">;</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191202_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">위에서부터 삼각형 원소간의 합을 누적 계산한다.</span></strong>
    <ul>
      <li>이때 가장 왼쪽, 오른쪽 원소는 다음 이동이 지정되어있으므로 미리 계산해둔다.</li>
      <li>아래 칸으로 이동할 수 있는 방법이 두 개인 경우, 지금까지의 누적합에 두 방법을 더해서 더 큰 쪽을 선택한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">마지막 행에서 최댓값을 선택한다.</span></strong>
    <ul>
      <li>마지막 행에서 여러 경로에 대한 결과값이 저장되므로 이들 중 최댓값이 answer이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>대충 어떻게 풀지는 느낌이 오는데 어떤 자료구조를 선택해야할지 등 세세한 부분에서 계속 막힌다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스, 자바] 정수 삼각형 - 동적계획법 <a href="https://lkhlkh23.tistory.com/117">https://lkhlkh23.tistory.com/117</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_타일 장식물</title>
	  <link>/blog//algo-prog43104</link>
	  <author></author>
	  <pubDate>2019-11-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog43104</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43104">https://programmers.co.kr/learn/courses/30/lessons/43104</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>타일의 규칙은 피보나치 수열이므로 N까지의 피보나치 값을 계산한다.</li>
  <li>N개의 타일로 구성한 직사각형의 둘레는 4x현재 타일+2x이전 타일이다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">fib</span><span class="o">=</span><span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
        <span class="n">fib</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">fib</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//피보나치 계산</span>
            <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">answer</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="n">fib</span><span class="o">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="mi">2</span><span class="o">*</span><span class="n">fib</span><span class="o">[</span><span class="n">N</span><span class="o">-</span><span class="mi">2</span><span class="o">];</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191130_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">타일의 길이는 피보나치 수열 규칙을 가진다.</span></strong>
    <ul>
      <li>타일은 1 1 2 3 5 8 …와 같이 진행되므로 피보나치수열이다.</li>
      <li>N까지의 피보나치 수열을 계산해서 저장한다. 피보나치수열은 보통 재귀함수를 배울때 대표적인 예시인데, 나는 배열을 통해 계산했다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">직사각형 둘레 길이는 4x현재+2x이전타일이다.</span></strong><br />
<img src="./assets/images/191130_2.png" alt="예시" width="300" height="300" />
    <ul>
      <li>위 그림을 통해 4x현재길이+2x이전길이를 만족함을 알 수 있다.</li>
      <li>처음에는 2*(현재길이+(이전길이+이이전길이))를 생각했는데, 이 공식은 총 세개의 타일 길이 값을 사용해야해서 효율성이 떨어진다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>문제를 읽었을 때는 막막했는데, 막상 풀이법은 간단했다. 아직은 문제를 보면 어떻게 해결해야할지 감이 안온다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>프로그래머스 LEVEL 3 : 타일 장식물 <a href="https://web2eye.tistory.com/164">https://web2eye.tistory.com/164</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 동적계획법(Dynamic Programming)_N으로 표현</title>
	  <link>/blog//algo-prog42895</link>
	  <author></author>
	  <pubDate>2019-11-29T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42895</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42895">https://programmers.co.kr/learn/courses/30/lessons/42895</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<p>=&gt;DFS를 이용한다.</p>
<ol>
  <li>재귀함수를 통해 사칙연산을 수행한다.</li>
  <li>cnt(숫자N을 사용한 횟수)가 8보다 크면 -1을 리턴한다.</li>
  <li>숫자 만들기에 성공하면 answer에 최솟값을 저장한다(처음이라면 그냥 저장, 값이 있다면 비교 후 더 작은 값을 저장).</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="c1">//전역변수로 설정</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prev</span><span class="o">){</span>
         <span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="mi">8</span><span class="o">){</span><span class="c1">//8번안에 끝내야한다</span>
             <span class="n">answer</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>
             <span class="k">return</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">if</span><span class="o">(</span><span class="n">prev</span><span class="o">==</span><span class="n">number</span><span class="o">){</span>
             <span class="k">if</span><span class="o">(</span><span class="n">answer</span><span class="o">==-</span><span class="mi">1</span><span class="o">||</span><span class="n">cnt</span><span class="o">&lt;</span><span class="n">answer</span><span class="o">){</span><span class="c1">//처음이거나 기존answer보다 더 최솟값을 발견했다면</span>
                 <span class="n">answer</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
                 <span class="k">return</span><span class="o">;</span>
             <span class="o">}</span>            
         <span class="o">}</span>
         <span class="kt">int</span> <span class="n">NN</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">-</span><span class="n">cnt</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span><span class="c1">//8번안에 끝내야하므로</span>
             <span class="n">NN</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="n">NN</span><span class="o">+</span><span class="n">N</span><span class="o">;</span><span class="c1">//숫자 N으로 만들 수 있는 수</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">+</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">-</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">*</span><span class="n">NN</span><span class="o">);</span>
             <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">prev</span><span class="o">/</span><span class="n">NN</span><span class="o">);</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">dfs</span><span class="o">(</span><span class="n">N</span><span class="o">,</span> <span class="n">number</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
         <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191129_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">answer은 전역변수여야하고, 0으로 초기화하면 안된다.</span></strong>
    <ul>
      <li>answer을 solution()과 dfs()함수에서 사용해야하므로 전역변수로 설정한다. 재귀호출이 이루어지므로 메소드의 파라미터에 넣어 사용하면 값이 재귀를 호출한 곳에 따라서 달라지므로 안된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">for문과 재귀함수를 통해 가능한 모든 사칙연산을 수행한다.</span></strong>
    <ul>
      <li>일의자리숫자 N을 가지고 할 수 있는 사칙연산을 모두 수행한다.</li>
      <li>그 다음은 십의자리숫자를 가지고 사칙연산이 가능하다. 따라서 NN이라는 변수에 숫자 N으로 만들 수 있는 수를 저장하여 사용한다.</li>
      <li>이때 for문의 범위는 8-cnt번으로 제한한다. 위 문제는 cnt가 8번 안에 만족시켜야한다(그 이상이면 맨 위에서 -1을 리턴한다). i&lt;8로 작성하면 i는 사용횟수를 나타내는 것이 아니므로 cnt가 재귀를 통해 8번이 넘게 반복하게 된다. 따라서 8-cnt로 N의 사요이 8번을 넘어가지 않게 해야한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">prev&gt;number일때 return하는 코드는 작성하면 안된다.</span></strong>
    <ul>
      <li>무심결에 prev가 number보다 커지면 number를 만족시킬 수 있는 방법은 없다고 생각하여 예외처리 코드를 작성했었는데, prev에서 뺄셈이나 나눗셈으로 다시 number에 가까워(같아)질 수 있는 방법이 있으므로 작성하면 안된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드를 봤을때는 되게 간단해보이는데 문제는 그렇지 않았다. 그냥 문제를 주고 풀어라 해도 노가다로 뛸 판에 코딩하라니까 더 어려웠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스][JAVA] N으로 표현 <a href="https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84">https://jayrightthere.tistory.com/entry/DFSJAVA-N%EC%9C%BC%EB%A1%9C-%ED%91%9C%ED%98%84</a></li>
  <li>[Lv3] N으로 표현 <a href="https://ydeer.tistory.com/42">https://ydeer.tistory.com/42</a></li>
  <li>[그래프] DFS와 BFS 구현하기 :: 마이구미 <a href="https://mygumi.tistory.com/102">https://mygumi.tistory.com/102</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 탐욕법(Greedy)_저울</title>
	  <link>/blog//algo-prog42886</link>
	  <author></author>
	  <pubDate>2019-11-28T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42886</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42886">https://programmers.co.kr/learn/courses/30/lessons/42886</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>추의 무게 순서대로 오름차순 정렬한다.</li>
  <li>현재까지 추를 조합해 잴 수 있는 무게의 최댓값을 answer이라 가정한다.</li>
  <li>answer을 가장 작은 추 무게로 초기화한다.</li>
  <li>0번째 값은 체크했으므로 그 다음 1부터 마지막까지 순회하며</li>
  <li>현재 추(w)가 answer+1보다 크다면 answer+1은 만들 수 없다는 뜻이므로 answer+1을 리턴한다.</li>
  <li>아니라면 answer+w까지는 추를 조합하여 만들 수 있으므로 answer+=w한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">weight</span><span class="o">);</span>        
        <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="n">weight</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span><span class="c1">//무조건 1이어야함        </span>
        <span class="c1">//answer까지는 무게 측정이 가능하다는 뜻임</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">weight</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">weight</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">answer</span><span class="o">+</span><span class="mi">1</span><span class="o">){</span><span class="c1">//answer다음의 answer+1을 만들 수 없다면</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">answer</span><span class="o">+=</span><span class="n">weight</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="c1">//만들 수 없는 최솟값이므로 만들 수 있는 answer다음의 answer+1을 리턴</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/191128_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">weight를 오름차순 정렬한다.</span></strong>
    <ul>
      <li>1부터 시작해서 무게 측정이 가능한지 확인하기 위함이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer은 최대 answer까지 무게 측정이 가능하다는 뜻이다.</span></strong>
    <ul>
      <li>answer을 weight[0]으로 초기화했으므로 현재 1까지는 무게 측정이 가능하다는 의미이다.</li>
      <li>0부터 i까지의 무게 추를 모두 더한 값이 answer이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer까지 측정이 가능하므로 그 다음 숫자인 answer+1이 가능한지 확인해야한다.</span></strong>
    <ul>
      <li>따라서 현재 weight[i]가 answer+1이거나 answer+1안의 범위(weight[i]&lt;=answer+1)에 들어와야한다.</li>
      <li><span style="color:red">만약 weight[i]==answer+1이라면</span> weight[i]하나로 answer+1이 측정 가능하다.</li>
      <li><span style="color:red">weight[i]&lt;answer+1이라면,</span> answer+1은 answer+w-(w-1)로 만들 수 있다. (w-1은 당연히 만들 수 있다. 왜냐하면 w라는 무게는 1부터 i까지의 조합으로 만들 수 있으므로 이전의 값 w-1역시 가능하다.)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">weight[i]가 answer+1보다 크다면 answer+1은 만들 수 없다.</span></strong>
    <ul>
      <li>answer까지는 모든 추를 더해서 만든 최댓값인데, weight[i]가 1이 아니고서야 answer+1을 만들 수 없다.</li>
      <li>따라서 지금까지의 추를 조합해서 만들 수 있는 최댓값은 answer이 마지막이 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">answer+1이 가능하다면 answer+=weight[i]한다.</span></strong>
    <ul>
      <li>이제 0부터 i까지 조합으로 answer+weight[i]까지 측정이 가능해졌다.</li>
      <li>설명3에서 weight[i]&lt;answer+1일때 answer+1이 가능한 것처럼, answer+2…answer+weight[i]까지도 당연히 가능하다.</li>
      <li>(사실 answer+=weight[i]하는게 잘 와닿지 않는다. 뭔가 당연하면서도 당연하지 않게 느껴져서 여기서 시간을 다썼다.)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">리턴은 측정할 수 없는 수의 최솟값이므로 answer+1을 리턴한다.</span></strong>
    <ul>
      <li>answer은 측정 가능한 값이고, 문제에서 요구하는 것은 측정할 수 없는 최솟값이므로 answer+1이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>
<p>코드를 봤을때는 되게 간단해보이는데 문제는 그렇지 않았다. 그냥 문제를 주고 풀어라 해도 노가다로 뛸 판에 코딩하라니까 더 어려웠다.</p>

<h3 id="참고">참고</h3>
<ul>
  <li>Greedy ‘저울’ 알고리즘 문제풀이 <a href="https://geehye.github.io/programmers-greedy-07/#">https://geehye.github.io/programmers-greedy-07/#</a></li>
  <li>[백준 #2437번 JAVA] 저울 풀이 <a href="https://plplim.tistory.com/59">https://plplim.tistory.com/59</a></li>
  <li>백준 2437번 저울 <a href="https://jaimemin.tistory.com/756">https://jaimemin.tistory.com/756</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
