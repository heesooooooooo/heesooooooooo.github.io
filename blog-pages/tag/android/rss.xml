<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[Android] AAC(Android Architecture Components) 정리</title>
	  <link>/blog//android-aac01</link>
	  <author></author>
	  <pubDate>2021-03-08T09:00:00+09:00</pubDate>
	  <guid>/blog//android-aac01</guid>
	  <description><![CDATA[
	     <h2 id="aac">AAC</h2>
<p><img src="./assets/images/210308_1.png" alt="" /></p>
<ul>
  <li>테스트와 유지보수가 쉬운 앱을 디자인할 수 있도록 돕는 라이브러리의 모음이다.</li>
  <li>안드로이드 앱을 만들면서 만날 수 있는 문제들을 쉽게 해결할 수 있도록 한다.</li>
  <li>총 5개의 라이브러리(Lifecycles, LiveData, ViewModel, Room, Paging)로 구성되어 있다.</li>
  <li>안드로이드는 Activity, Service, BroadcastReceiver, ContentProvider 컴포넌트들이 있고, 생명주기가 다르기 때문에 이러한 컴포넌트들을 잘 고려&amp;연결하여 앱을 잘 만들어야 하는데, 구글이 이 고민을 줄이기 위해 AAC를 만들었다.</li>
</ul>

<h3 id="1-lifecycles">1. Lifecycles</h3>
<ul>
  <li>생명주기의 모니터링을 돕는다.</li>
  <li>크게 두 가지로 구성되어 있다.</li>
</ul>

<h4 id="1-lifecycle-owner">(1) Lifecycle Owner</h4>
<ul>
  <li>자신의 생명주기를 담은 객체이다.</li>
  <li>Activity, Fragment에서 생명주기르 분리하여 Lifecycle 객체에 담는다.</li>
  <li>Lifecycle 객체를 통해 다른 곳에서 해당 화면의 생명주기를 모니터링할 수 있다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">LifecycleActivity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MyLocationListener</span> <span class="n">myLocationListener</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">myLocationListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyLocationListener</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getLifecycle</span><span class="o">(),</span> <span class="n">location</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// update UI</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">MyLocationListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">enabled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Lifecycle</span> <span class="n">lifecycle</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">MyLocationListener</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Lifecycle</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="n">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enable</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">enabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">lifecycle</span><span class="o">.</span><span class="na">getCurrentState</span><span class="o">().</span><span class="na">isAtLeast</span><span class="o">(</span><span class="n">STARTED</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// connect if not connected</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h4 id="2-lifecycle-observer">(2) Lifecycle Observer</h4>

<ul>
  <li>화면밖에서도 생명주기에 따른 동작을 정의하기 위해서 원하느 클래스에 LifecycleObserver 인터페이스를 구현하고, 넘겨받은 Lifecycle Owner객체에 구현한 LifecyclerObserver를 등록해야 한다.</li>
  <li>annotaion을 이용하여 Lifecycle Owner의 생명주기에 따른 동작할 메소드를 정의할 수 있다.</li>
  <li>Lifecycles를 통해 화면 밖에서 화면의 생명주기를 모니터링하고, 동작을 정의할 수 있다. -&gt; 더 직관적인 생명주기 프로그래밍을 가능하게 한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MyLocationListener</span> <span class="kd">implements</span> <span class="n">LifecycleObserver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">MyLocationListener</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Lifecycle</span> <span class="n">lifecycle</span><span class="o">,</span> <span class="n">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lifecycle</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="nd">@OnLifecycleEvent</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">Event</span><span class="o">.</span><span class="na">ON_START</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Do something</span>
    <span class="o">}</span>
    
    <span class="nd">@OnLifecycleEvent</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">Event</span><span class="o">.</span><span class="na">ON_STOP</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Do something</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="2-livedata">2. LiveData</h3>
<ul>
  <li>데이터를 개선된 Observable로 wrapping하여 생명주기와 데이터 변경을 인지할 수 있도록 한다.</li>
  <li>데이터 모델을 wrapping해서 생명주기와 데이터 변경을 자연스럽게 모델 스스로 인지할 수 있도록 한다.</li>
  <li>위에서 예시로 든 MyLocationListener를 LiveData로 다시 구현할 수 있다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MyLocationListener</span> <span class="kd">extends</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">Location</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">MyLocationListener</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// 1개 이상의 active observer</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActive</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Do something</span>
    <span class="o">}</span>

    <span class="c1">// 0개의 active observer</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onInactive</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Do something</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>LiveData는 Active observer의 개수에 따라 onActive(), onInactive()가 불린다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">LifecycleActivity</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">Location</span><span class="o">&gt;</span> <span class="n">myLocationListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyLocationListener</span><span class="o">();</span>
        <span class="c1">// Active, Inactive를 판단하기 위해 observe() 할 때 Lifecycle를 넘긴다.</span>
        <span class="n">myLocationListener</span><span class="o">.</span><span class="na">observe</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">location</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// Data가 변경되면 동작할 콜백을 등록</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Observer는 LiveData.observe()로 등록하며, 이 메소드로 데이터 변경을 구독한다.</li>
  <li><strong>Active observer</strong>는 생명주기가 최소 Resumed, Started에 있는 Observer를 말한다.</li>
  <li>Observer가 생명주기에 따라 active, inactive 상태를 판단하기 위해 observer()를 호출할 때 Lifecycle을 넘긴다.</li>
  <li>LiveData는 Active observer 개수로 생명주기를 간접적으로 인지한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MyLocationListener</span> <span class="kd">extends</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">Location</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">LocationManager</span> <span class="n">locationManager</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">LocationListener</span> <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocationListener</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLocationChanged</span><span class="o">(</span><span class="n">Location</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// setValue()로 데이터를 변경하고 구독하는 Observer들에게 이벤트를 전달</span>
            <span class="n">setValue</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>LiveData는 observe()에서 넘어온 Lifecycle로 생명주기를 모니터링하고, 함께 받은 콜백으로 데이터 변경 이벤트를 구독한다.</li>
  <li>콜백은 LiveData.setValue()로 데이터를 변경하면 호출된다.</li>
</ul>

<h3 id="3-viewmodel">3. ViewModel</h3>
<ul>
  <li>앱의 생명주기를 고려하여 UI 관련 데이터를 저장하고 관리하는 컴포넌트이다.</li>
  <li>데이터를 쉽게 생명주기와 분리하여 관리할 수 있도록 돕는다.</li>
  <li>AAC의 ViewModeel을 상속받은 뷰모델은 ViewModelProviders로 Scpoe를 관리할 수 있다.</li>
  <li>해당 Scope내에서는 하나의 인스턴스만을 유지하여 작업이 중복되거나 데이터가 소실되지 않도록 한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">MyViewModel</span> <span class="kd">extends</span> <span class="n">ViewModel</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">userData</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUser</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userData</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">userData</span> <span class="o">=</span> <span class="n">webservice</span><span class="o">.</span><span class="na">fetchUser</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">userData</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">LifecycleActivity</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="s">"userId@gmail.com"</span><span class="o">;</span>
        <span class="c1">// 처음이면 this Scope에 종속된 MyViewModel를 생성한다.</span>
        <span class="c1">// this Scope에 종속된 MyViewModel가 이미 있다면 불러온다.</span>
        <span class="n">ViewModelProviders</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
                <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">MyViewModel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="c1">// 화면회전이 일어나 다시 호출되어도 같은 인스턴스 이므로 중복작업이 일어나지 않는다.</span>
                <span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">userId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">observe</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">user</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">// update UI</span>
                <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="4-room">4. Room</h3>
<ul>
  <li>ORM(Object Relation Mapping. Cursor 단위로 통신하는 쿼리를 객체 단위로 통신할 수 있도록 돕는다) 라이브러리 중 하나로, Annotation 기반이다.</li>
</ul>

<h4 id="1-annotation-기반의-정의와-자동-매칭">(1) Annotation 기반의 정의와 자동 매칭</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="c1">// Database 정의. 테이블 및 버전을 함께 적는다.</span>
<span class="c1">// RoomDatabase를 상속받는다.</span>
<span class="nd">@Database</span><span class="o">(</span><span class="n">entities</span> <span class="o">=</span> <span class="o">{</span><span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">version</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">MyDatabase</span> <span class="kd">extends</span> <span class="n">RoomDatabase</span> <span class="o">{</span>
    <span class="c1">// Dao를 선언한다.</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">UserDao</span> <span class="nf">userDao</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 정의한 Database 객체를 가져온다.</span>
<span class="kd">public</span> <span class="n">MyDatabase</span> <span class="nf">getMyDatabase</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">MyDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">Room</span>
            <span class="o">.</span><span class="na">databaseBuilder</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="n">MyDatabase</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// Entity Annotation으로 테이블 정의. 인스턴스 변수들이 곧 Column이다.</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="c1">// PrimaryKey Annotation으로 키를 정의한다.</span>
    <span class="nd">@PrimaryKey</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">uid</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// DAO 정의</span>
<span class="nd">@Dao</span>
<span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
    <span class="c1">// Query Annotation으로 쿼리를 정의한다.</span>
    <span class="c1">// 파라미터로 전달할 값을 : 기호 다음에 같은 이름으로 선언한다. 여기서는 :first, :last 이다.</span>
    <span class="c1">// FROM 절로 넘긴 테이블과 매칭되는 모델로 반환값을 선언하면 알아서 맞는 객체로 매핑해준다. 여기서는 User이다.</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"SELECT * FROM user WHERE first_name :first AND last_name :last"</span><span class="o">)</span>
    <span class="n">User</span> <span class="nf">findByName</span><span class="o">(</span><span class="n">String</span> <span class="n">first</span><span class="o">,</span> <span class="n">String</span> <span class="n">last</span><span class="o">);</span>

    <span class="c1">// 파라미터로 객체 그대로를 넘깁니다. 값 매칭은 Room이 인스턴스 변수를 보고 알아서 해줍니다.</span>
    <span class="nd">@Insert</span>
    <span class="kt">void</span> <span class="nf">insertAll</span><span class="o">(</span><span class="n">User</span><span class="o">...</span> <span class="n">users</span><span class="o">);</span>
    <span class="nd">@Delete</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="nd">@Update</span>
    <span class="kt">void</span> <span class="nf">updateAll</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">);</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h4 id="2-컴파일-타임-쿼리-검증">(2) 컴파일 타임 쿼리 검증</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="c1">// User 테이블인데 실수로 FROM에 users로 적었다. 이럴경우 Room은 컴파일 타임에 에러를 뱉어 실수를 빨리 발견하도록 돕는다.</span>
<span class="nd">@Query</span><span class="o">(</span><span class="s">"SELECT uid, firstName, lastName FROM users WHERE uid :uid"</span><span class="o">)</span>
<span class="n">User</span> <span class="nf">findByUid</span><span class="o">(</span><span class="n">String</span> <span class="n">uid</span><span class="o">);</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Room은 원래 런타임으로 테스트해야만 제대로 동작하는지 알 수 있는 쿼리를 컴파일 타임에 검증하여, 정확한 쿼리를 빨리 짤 수 있도록 돕는다.</li>
</ul>

<h4 id="3-실시간-값-추적-observability">(3) 실시간 값 추적 (Observability)</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="c1">// User를 LiveData로 Wrapping하여 반환한다.</span>
<span class="nd">@Query</span><span class="o">(</span><span class="s">"SELECT uid, firstName, lastName FROM user WHERE uid :uid"</span><span class="o">)</span>
<span class="n">LiveData</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findByUid</span><span class="o">(</span><span class="n">String</span> <span class="n">uid</span><span class="o">);</span>

<span class="cm">/*
 * Dao에서 LiveData로 반환된 값을 ViewModel을 거쳐 뷰에서 observe()하면 데이터베이스의 값이 변경될 때 실시간으로 추적할 수 있다.
 */</span>

<span class="kd">class</span> <span class="nc">MyViewModel</span> <span class="kd">extends</span> <span class="n">ViewModel</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">userData</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">MyViewModel</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Dao에서 LiveData로 반환된 값을 반환한다.</span>
    <span class="kd">public</span> <span class="n">LiveData</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUser</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userData</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">userData</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findByUid</span><span class="o">(</span><span class="s">"userId"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">userData</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">LifecycleActivity</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="s">"userId@gmail.com"</span><span class="o">;</span>
        <span class="n">ViewModelProviders</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
                <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">MyViewModel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">userId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">observe</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">user</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">// Room의 Dao가 반환한 LiveData를 구독함으로써 데이터베이스 변경을 실시간으로 추적한다.</span>
                <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Room은 LiveData와 연계하여 데이터베이스의 값을 실시간으로 추적할 수 있다.</li>
  <li>다른 ORM은 Observability를 구현하려면 많은 고민이 필요하지만, Room은 반환 타입을 LiveData로 바꾸기만 하면 쉽게 구현할 수 있다.</li>
</ul>

<h3 id="5-paging">5. Paging</h3>
<p><img src="./assets/images/210308_2.png" alt="" /></p>
<ul>
  <li>리스트 뷰에서 컨텐츠를 특정 기준으로 범위를 나누고, 스크롤을 따라 범위 단위로 로드되도록 하는 것을 Paging이라고 한다.</li>
  <li>Paging에는 세 가지 작업이 필요하다.</li>
  <li>
    <ol>
      <li>데이터를 Page 단위로 가져오는 쿼리</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>데이터를 특정 기준으로 Page 나누기</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>중복 아이템 검사</li>
    </ol>
  </li>
  <li>위 세 가지를 구현하는 것은 귀찮은 일이 많은데, Paging Library는 이를 쉽게 구현할 수 있도록 도와준다.</li>
  <li>Paging Library는 세 가지로 구성되어 있다. DataSource, PagedList, PagedListAdapter</li>
</ul>

<h4 id="1-datasource">(1) DataSource</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="c1">// 반환 타입을 DataSource로 하면 자동으로 PositionalDataSource를 생성한다.</span>
<span class="nd">@Query</span><span class="o">(</span><span class="s">"select * from users WHERE age &gt; :age order by name DESC, id ASC"</span><span class="o">)</span>
<span class="n">DataSource</span><span class="o">.</span><span class="na">Factory</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="nf">usersOlderThan</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">);</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Local 또는 Network에서 데이터를 가져오는 쿼리를 담고 있다.</li>
  <li>PagedKeyedDataSource, ItemKeyedDataSource, PositionalDataSource 3가지가 있으며, 키 속성에 따라 맞는 클래스를 상속받아 쿼리를 구현해야 한다.</li>
</ul>

<h4 id="2-pagedlist">(2) PagedList</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="n">LiveData</span><span class="o">&lt;</span><span class="n">PagedList</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;</span> <span class="n">pagedItems</span> <span class="o">=</span>
        <span class="n">LivePagedListBuilder</span><span class="o">(</span><span class="n">myDataSource</span><span class="o">,</span> <span class="cm">/* page size */</span> <span class="mi">50</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setFetchExecutor</span><span class="o">(</span><span class="n">myNetworkExecutor</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Page 속성과 DataSource를 가지고 있다. Page 속성에 맞춰 DataSource로 맞는 범위를 데이터로 불러온다.</li>
  <li>LivePagedListBuilder에 Page 속성과 DataSource를 정의하고 빌드하면, LiveData&lt;PagedList<Item>&gt; 타입을 반환한다.</Item></li>
</ul>

<h4 id="3-pagedlistadapter">(3) PagedListAdapter</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="c1">// DiffUtil 구현. PagedListAdapter Constructor에 넘겨준다.</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">ItemCallback</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">DIFF_CALLBACK</span> <span class="o">=</span>
            <span class="k">new</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">ItemCallback</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areItemsTheSame</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">User</span> <span class="n">oldUser</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">User</span> <span class="n">newUser</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">oldUser</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">newUser</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areContentsTheSame</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">User</span> <span class="n">oldUser</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">User</span> <span class="n">newUser</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">oldUser</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">newUser</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>PagedList를 UI에 보여주고 아이템 중복을 검사한다. 다음 Page에 도달하면 데이터를 PagedList에게 요청한다.</li>
  <li>Paging은 Page가 밀리는 등 여러 경우에 아이템이 밀려 중복이 발생할 수 있따. DiffUtil에 기준을 정의해 PagedListAdapter의 Constructor에 넘겨주면, 기준에 걸리는 중복 아이템은 UI에 보여주지 않는다.</li>
</ul>

<h3 id="mvp에-aac를-활용하는-방법">MVP에 AAC를 활용하는 방법</h3>

<h4 id="1-mvp-with-full-aac">1. MVP with full AAC</h4>
<p><img src="./assets/images/210308_3.png" alt="" /></p>
<ul>
  <li>구글이 가이드하는 MVVM에 Presenter를 추가한 모습이다.</li>
  <li>ViewModel은 Model에 집중하고, Presenter가 View와 통신한다. -&gt; 역할 세분화</li>
  <li>하지만 기본 MVP에 MVVM을 넣어야 하므로 레거시를 활용할 수 없고 새롭게 설계해야 한다.</li>
</ul>

<h4 id="2-mvp-with-part-of-aac">2. MVP with part of AAC</h4>
<p><img src="./assets/images/210308_4.png" alt="" /></p>
<ul>
  <li>1에서 ViewModel을 뺀 모습이다.</li>
  <li>기존 MVP를 유지하면서 필요한 부분에만 AAC를 활용하는 방식이다.</li>
  <li>MVP 레거시에서 가장 쉽게 AAC를 적용할 수 있는 설계이다.</li>
</ul>

<h4 id="3-mvp-with-livedata">3. MVP with LiveData</h4>
<p><img src="./assets/images/210308_5.png" alt="" /></p>
<ul>
  <li>2에서 ViewModel의 LiveData를 Presenter에서 사용한다.</li>
  <li>Presenter에서 통신하는 데이터를 실시간으로 모니터링할 수 있다.</li>
  <li>MVP를 유지하면서도 대부분의 AAC를 활용한다.</li>
</ul>

<h4 id="4-mvp-without-aac">4. MVP without AAC</h4>
<p><img src="./assets/images/210308_6.png" alt="" /></p>
<ul>
  <li>대부분의 실무앱은 RxJava로 데이터를 통신하므로 3번처럼 적용하기 쉽지 않다.</li>
  <li>그래서 LiveData의 실시간 모니터링을 RxJava를 활용하여 직접 구현하였다.</li>
  <li>Repository에 Observer를 두어 데이터가 변경될 때마다 이벤트를 보내고, 구독하는 UI에서 모니터링한다.</li>
</ul>

<h5 id="참고">참고</h5>
<ul>
  <li>Android Architecture Components 소개 (1) <a href="https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-1-8e04491be1f6">https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-1-8e04491be1f6</a></li>
  <li>Android Architecture Components 소개 (2) <a href="https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-2-d41a9272e692">https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-2-d41a9272e692</a></li>
  <li>Android Architecture Components 소개 (3) (완) <a href="https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-3-52980a9e22af">https://medium.com/@maryangmin/android-architecture-components-%EC%86%8C%EA%B0%9C-3-52980a9e22af</a></li>
  <li>[Android] 안드로이드 AAC <a href="https://velog.io/@hwi_chance/Android-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-AAC">https://velog.io/@hwi_chance/Android-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-AAC</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>[Android] 코루틴(Coroutine) 정리</title>
	  <link>/blog//android-coroutine01</link>
	  <author></author>
	  <pubDate>2021-03-08T09:00:00+09:00</pubDate>
	  <guid>/blog//android-coroutine01</guid>
	  <description><![CDATA[
	     <p>코루틴의 핵심은 <em>light-weight thread</em>이다.</p>

<h3 id="globalscope">GlobalScope</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">kotlinx.coroutines.*</span> 
<span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span> 
    <span class="n">GlobalScope</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="c1">// launch new coroutine in background and continue </span>
        <span class="n">delay</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)</span> <span class="c1">// non-blocking delay for 1 second (default time unit is ms) </span>
        <span class="n">println</span><span class="o">(</span><span class="s">"World!"</span><span class="o">)</span> <span class="c1">// print after delay </span>
    <span class="o">}</span> 
    <span class="n">println</span><span class="o">(</span><span class="s">"Hello,"</span><span class="o">)</span> <span class="c1">// main thread continues while coroutine is delayed </span>
    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000L</span><span class="o">)</span> <span class="c1">// block main thread for 2 seconds to keep JVM alive </span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>위 예제는 GlobalScope에서 코루틴을 실행한 모습이다.</li>
  <li>launch는 coroutine의 Builder이며, 이를 이용해서 코드를 coroutineScope안에서 실행시킨다.</li>
  <li>GlobalScope의 lifetime은 전체 application process에 의존하므로, application이 종료되면 같이 끝나기 때문에, 끝에서 sleep을 걸고 기다려야 launch 내부 동작을 실행할 수 있다.</li>
  <li>안드로이드에서는 sleep을 걸지 않아도 “Hello, World!”가 출력된다. Activity를 finish()하더라도 process 자체가 죽지 않기 때문에, sleep이 없어도 coroutine 내부 코드는 그대로 실행된다. 하지만 저가형 단말에서는 메모리 문제로 finish()와 함께 process가 kill될 수도 있기 때문에 반드시 coroutine 동작이 유지된다고 판단할 수도 없다.</li>
  <li>delay는 thread를 차단하지 않으며, coroutine에서만 사용할 수 있다.</li>
</ul>

<h3 id="runblocking">runBlocking</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="n">fun</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span> 
    <span class="n">runBlocking</span><span class="o">&lt;</span><span class="n">Unit</span><span class="o">&gt;</span> <span class="o">{</span> 
        <span class="n">launch</span> <span class="o">{</span> 
            <span class="n">delay</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)</span> 
            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"World"</span><span class="o">)</span> 
        <span class="o">}</span> 
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Hello"</span><span class="o">)</span> 
        <span class="n">delay</span><span class="o">(</span><span class="mi">2000L</span><span class="o">)</span> 
    <span class="o">}</span> 
    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"End function"</span><span class="o">)</span> 
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>runBlocking을 만나면 main thread는 내부 코드가 완료될 때까지 block된다.</li>
  <li>Hello \n World \ End function 순으로 찍힌다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="n">GlobalScope</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="c1">// launch new coroutine in background and continue</span>
    <span class="n">delay</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)</span> <span class="c1">// non-blocking delay for 1 second (default time unit is ms)</span>
    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"sequence"</span><span class="o">,</span><span class="s">"4"</span><span class="o">)</span> <span class="c1">// print after delay</span>
<span class="o">}</span>

<span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"sequence"</span><span class="o">,</span><span class="s">"1"</span><span class="o">)</span>

<span class="n">runBlocking</span> <span class="o">{</span> <span class="c1">// but this expression blocks the main thread</span>
    <span class="n">delay</span><span class="o">(</span><span class="mi">4000L</span><span class="o">)</span> <span class="c1">// ... while we delay for 2 seconds to keep JVM alive</span>
    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"sequence"</span><span class="o">,</span><span class="s">"3"</span><span class="o">)</span>
<span class="o">}</span>

<span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"sequence"</span><span class="o">,</span><span class="s">"2"</span><span class="o">)</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>위 코드는 1 4 3 2 순으로 찍힌다.</li>
  <li><em>GlobalScope의 delay는 main thread를 막지 않고, runBlocking은 막는다</em></li>
</ul>

<h3 id="join">join()</h3>
<ul>
  <li>다른 코루틴이 작동하는 동안 delay하는 것은 좋지 않은 방법이다.</li>
  <li>백그라운드 작업이 완료될 때까지 join()을 사용하여 명시적으로 기다려야 한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">=</span> <span class="n">runBlocking</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">job</span> <span class="o">=</span> <span class="n">GlobalScope</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="c1">// launch new coroutine and keep a reference to its Job</span>
    <span class="n">delay</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"World!"</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"Hello,"</span><span class="o">)</span>
    <span class="n">job</span><span class="o">.</span><span class="na">join</span><span class="o">()</span> <span class="c1">// wait until child coroutine completes</span>
<span class="o">}</span>

<span class="o">-</span> </pre></td></tr></tbody></table></code></pre></figure>

<h5 id="참고">참고</h5>
<ul>
  <li>[Kotlin] 코틀린 - 코루틴#1 기본! <a href="https://tourspace.tistory.com/150">https://tourspace.tistory.com/150</a></li>
  <li>안드로이드 Kotlin Coroutines 정리 Part 1 <a href="https://eso0609.tistory.com/73">https://eso0609.tistory.com/73</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android] 디자인 패턴 정리</title>
	  <link>/blog//android-design-pattern01</link>
	  <author></author>
	  <pubDate>2021-03-04T09:00:00+09:00</pubDate>
	  <guid>/blog//android-design-pattern01</guid>
	  <description><![CDATA[
	     <p>다양한 문제 상황에 대한 재사용 가능한 해결책<br />
Creational(창조), Structural(구조), Behavioral(행동)으로 구분된다.</p>

<h3 id="creational-pattern">Creational Pattern</h3>
<ul>
  <li>클래스의 인스턴스를 만드는 것과 관련이 있다.</li>
</ul>

<p><em>Singleton Pattern</em></p>
<ul>
  <li>싱글톤 패턴이란, 하나의 인스턴스를 하나만 생성한다는 뜻이다.</li>
  <li>하나의 클래스에 대해 최초 한 번만 메모리에 할당한다.</li>
  <li>고정된 메모리 영역에 하나의 인스턴스만을 생성한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="n">public</span> <span class="k">class</span> <span class="nc">Single</span><span class="p">{</span>
    <span class="n">private</span> <span class="n">static</span> <span class="n">Single</span> <span class="n">instance</span><span class="o">=</span><span class="n">null</span><span class="p">;</span>
    
    <span class="n">private</span> <span class="n">Single</span><span class="p">(){}</span>

    <span class="n">public</span> <span class="n">static</span> <span class="n">Single</span> <span class="n">getInstance</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">instance</span><span class="o">==</span><span class="n">null</span><span class="p">){</span>
            <span class="n">instance</span><span class="o">=</span><span class="n">new</span> <span class="n">Single</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></pre></td></tr></tbody></table></code></pre></figure>

<p><strong>장점</strong></p>
<ul>
  <li>고정된 영역에 인스턴스를 하나만 생성하기 때문에 메모리 낭비를 방지한다.</li>
  <li>인스턴스를 전역적으로 사용할 수 있다. -&gt; 다른 클래스의 인스턴스들과 데이터를 공유하고 변경할 수 있다.
<strong>단점</strong></li>
  <li>싱글톤 인스턴스에게 많은 일을 위임하면 다른 클래스의 인스턴스간에 결합도가 높아진다. -&gt; 개방폐쇄원칙 위배</li>
  <li>멀티스레드 환경에서 데이터 동기화 문제가 발생할 수 있다. -&gt; synchroized 키워드 이용</li>
</ul>

<h3 id="structural-pattern">Structural Pattern</h3>
<ul>
  <li>클래스와 인스턴스의 관계를 조정하고 맞춰가는 것이 목적이다.</li>
</ul>

<p><em>Adapter Pattern</em></p>
<ul>
  <li>상호 접근이 불가한 객체들간에 연결해주는 역할을 한다.</li>
  <li>클래스나 인스턴스의 관계를 조정하고 구조를 짜맞추는 패턴들이 포함된다.</li>
  <li>MainActivity의 RecyclerView와 ViewHolder의 itemView는 상호 접근이 불가한 객체이다. AdapterSample 클래스를 구현하여 Adapter 패턴을 구현하여 두 객체를 연결해준다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdapterSample</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span class="o">&lt;</span><span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="o">{</span>
        <span class="n">TextView</span> <span class="n">tv_main</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">View</span> <span class="n">itemView</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
            <span class="n">tv_main</span> <span class="o">=</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_main</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">AdapterSample</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="n">mData</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@NonNull</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ViewHolder</span> <span class="nf">onCreateViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">viewType</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
        <span class="n">LayoutInflater</span> <span class="n">inflater</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutInflater</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span>
                <span class="n">Context</span><span class="o">.</span><span class="na">LAYOUT_INFLATER_SERVICE</span><span class="o">);</span>
        <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">rv_item_main</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">vh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">vh</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBindViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">ViewHolder</span> <span class="n">holder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
        <span class="n">holder</span><span class="o">.</span><span class="na">tv_main</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="behavior-pattern">Behavior Pattern</h3>
<ul>
  <li>클래스와 인스턴스가 동작하는 방식이나 소통하는 방식을 다루는 패턴이다.</li>
</ul>

<p><em>Template Method</em></p>
<ul>
  <li>어떤 동작의 알고리즘을 단위 기능 모듈로 분류하고 이들간의 동작 순서를 정의한다. 그리고 나서 단위 기능을 바로 구현하는 것이 아니라, 몇몇은 그 클래스를 상속할 자식 클래스에 위임한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AutoCar</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playWithOwenr</span><span class="o">(){</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"on"</span><span class="o">,</span><span class="s">"시동켜기"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"side_break"</span><span class="o">,</span><span class="s">"해제"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"start"</span><span class="o">,</span><span class="s">"D"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"operation"</span><span class="o">,</span><span class="s">"자동"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"break"</span><span class="o">,</span><span class="s">"브레이크"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ManualCar</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playWithOwenr</span><span class="o">(){</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"on"</span><span class="o">,</span><span class="s">"시동켜기"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"side_break"</span><span class="o">,</span><span class="s">"해제"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"start"</span><span class="o">,</span><span class="s">"2단"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"operation"</span><span class="o">,</span><span class="s">"수동"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"break"</span><span class="o">,</span><span class="s">"브레이크"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>AutoCar와 ManualCar는 start, operation를 제외하고 로그가 같다. 이것을 Template Method를 적용할 수 있다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playWithOwner</span><span class="o">(){</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"on"</span><span class="o">,</span><span class="s">"시동켜기"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"side_break"</span><span class="o">,</span><span class="s">"해제"</span><span class="o">);</span>
        <span class="n">play</span><span class="o">();</span>
        <span class="n">stopBreak</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">play</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">stopBreak</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"break"</span><span class="o">,</span><span class="s">"브레이크"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AutoCar</span> <span class="kd">extends</span> <span class="n">Car</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">play</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"start"</span><span class="o">,</span><span class="s">"2단"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"operation"</span><span class="o">,</span><span class="s">"수동"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">stopBreak</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">stopBreak</span><span class="o">();</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"break"</span><span class="o">,</span><span class="s">"강력한 브레이크"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ManualCar</span> <span class="kd">extends</span> <span class="n">Car</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">play</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"start"</span><span class="o">,</span><span class="s">"2단"</span><span class="o">);</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"operation"</span><span class="o">,</span><span class="s">"수동"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">stopBreak</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">stopBreak</span><span class="o">();</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"break"</span><span class="o">,</span><span class="s">"부드러운 브레이크"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>상위 클래스에게 공통적인 로직은 템플릿 메소드로 두고, 구체적인 클래스에서 스타일에 맞게 구현을 강제하기 위해 추상메소드를 사용하고, Hook 메소드를 두는 패턴을 템플릿 메소드 패턴 (Template Method Pattern) 이라고 한다.</li>
</ul>

<h5 id="참고">참고</h5>
<ul>
  <li>[Android] 디자인패턴 1 - 디자인패턴이란? <a href="https://jroomstudio.tistory.com/20">https://jroomstudio.tistory.com/20</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android] Recyclerview 정리</title>
	  <link>/blog//android-recyclerview01</link>
	  <author></author>
	  <pubDate>2021-03-03T09:00:00+09:00</pubDate>
	  <guid>/blog//android-recyclerview01</guid>
	  <description><![CDATA[
	     <h2 id="recyclerview를-사용하는-이유">Recyclerview를 사용하는 이유</h2>
<h3 id="listview">ListView</h3>
<p><img src="./assets/images/210303_1.png" alt="" /></p>
<ul>
  <li>목록을 구현하는데 사용하는 레이아웃</li>
  <li>View를 재활용하는 방식으로, 화면에 보여질 뷰를 처음 inflate한 후 스크롤시 재활용하는 방식</li>
  <li>화면에 보이지 않는 View도 미리 그려 놓는다.</li>
</ul>

<h4 id="재활용">재활용</h4>
<ul>
  <li>특정 position이 보이면 getView()가 호출되고 화면에 아이템이 변경된다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre> <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">viewGroup</span><span class="o">){</span>
        <span class="n">UserItem</span> <span class="n">item</span><span class="o">=</span> <span class="n">userItemItems</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">view</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">View</span> <span class="n">itemView</span><span class="o">=</span><span class="n">layoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item_friend</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>

            <span class="n">TextView</span> <span class="n">tvNickname</span><span class="o">=</span><span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_friend_nickname</span><span class="o">);</span>
            <span class="n">TextView</span> <span class="n">tvEmail</span><span class="o">=</span><span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_friend_email</span><span class="o">);</span>

            <span class="n">tvNickname</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getNickname</span><span class="o">());</span>
            <span class="n">tvEmail</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>

            <span class="k">return</span> <span class="n">itemView</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="n">TextView</span> <span class="n">tvNickname</span><span class="o">=</span><span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_friend_nickname</span><span class="o">);</span>
            <span class="n">TextView</span> <span class="n">tvEmail</span><span class="o">=</span><span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_friend_email</span><span class="o">);</span>

            <span class="n">tvNickname</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getNickname</span><span class="o">());</span>
            <span class="n">tvEmail</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>

            <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>파라미터 view가 위 그림에서 재활용되는 ScrapView[]이다. view는 최초 한번만 null이 들어오고 이후 호출되면 이미 생성된 view가 들어오므로, 조건문을 통해 최초 한 번만(view==null) inflate하면 된다.</li>
</ul>

<h3 id="viewholder-패턴">ViewHolder 패턴</h3>
<ul>
  <li>아이템에 접근하기 위해 inflate된 view를 findViewById()로 찾는다. 이는 고비용을 야기할 수 있으므로, getTag(), setTag()를 이용하여 ViewHolder를 가져오고, 여기서 아이템에 접근하는 방식으로 사용한다.</li>
  <li>ViewHolder 패턴을 강제적으로 사용하지 않기 때문에, 이를 사용하지 않는다면 고비용의 findViewById()가 자주 호출될 수 있다.</li>
</ul>

<h3 id="recyclerview">RecyclerView</h3>
<ul>
  <li>RecyclerView는 Adapter를 사용하고, 메모리 참조를 유지하기 위해 ViewHolder를 만들어야 한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdapterSample</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span class="o">&lt;</span><span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewHolder</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="o">{</span>
        <span class="n">TextView</span> <span class="n">tv_main</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nf">ViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">View</span> <span class="n">itemView</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
            <span class="n">tv_main</span> <span class="o">=</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_main</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">AdapterSample</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="n">mData</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@NonNull</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ViewHolder</span> <span class="nf">onCreateViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">viewType</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
        <span class="n">LayoutInflater</span> <span class="n">inflater</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutInflater</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span>
                <span class="n">Context</span><span class="o">.</span><span class="na">LAYOUT_INFLATER_SERVICE</span><span class="o">);</span>
        <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">rv_item_main</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">vh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterSample</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">vh</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBindViewHolder</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">ViewHolder</span> <span class="n">holder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
        <span class="n">holder</span><span class="o">.</span><span class="na">tv_main</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<p><strong>onCreateViewHolder()</strong>
아이템 뷰를 위한 뷰홀더 객체를 생성하여 리턴한다.</p>

<p><strong>onBindViewHolder()</strong>
position에 해당하는 데이터를 뷰홀더의 아이템뷰에 표시한다.</p>

<p><strong>getItemCount()</strong>
전체 데이터 개수를 리턴한다.</p>

<p><em>RecyclerView의 구성요소</em></p>

<p><img src="./assets/images/210304_1.png" alt="" /></p>

<p>리사이클러뷰는 <strong>Adapter, LayoutManager</strong>를 사용한다. 만들어진 각 아이템뷰는 <strong>ViewHolder</strong>에 저장되어 화면에 표시되고 필요에 따라 생성 또는 재활용(recycle)된다.</p>

<h4 id="adapter">Adapter</h4>
<ul>
  <li>사용자의 데이터 리스트로부터 아이템 뷰를 생성</li>
</ul>

<h4 id="layoutmanager">LayoutManager</h4>
<ul>
  <li>어떤 형태로 아이템을 배치할 것인지 결정</li>
  <li>RecyclerView의 아이템을 배치하고, 화면 밖으로 전환된 아이템을 재활용할 시기를 알려준다.</li>
  <li>ex) LinearLayoutManager, GridLayoutManager, StaggeredGridLayoutManager</li>
</ul>

<h4 id="viewholder">ViewHolder</h4>
<ul>
  <li>화면에 표시될 아이템 뷰를 저장하는 객체</li>
  <li>RecyclerViewHolder를 상속받아 구현한다.</li>
  <li>구현된 뷰홀더는 Adapter로부터 onCreateViewHolder(), onBindViewHolder() 메소드를 오버라이드하여 각각 생성과 데이터 표시를 하여 화면에 출력한다.</li>
</ul>

<h5 id="참고">참고</h5>
<ul>
  <li>[Android] 리스트뷰 포퍼먼스 팁 <a href="https://rednine.tistory.com/762">https://rednine.tistory.com/762</a></li>
  <li>[안드로이드] ListView vs RecyclerView <a href="https://woovictory.github.io/2019/01/03/Android-Diff-of-ListView-and-RecyclerView/#search">https://woovictory.github.io/2019/01/03/Android-Diff-of-ListView-and-RecyclerView/#search</a></li>
  <li>Android RecyclerView Tutorial with Kotlin <a href="https://www.raywenderlich.com/1560485-android-recyclerview-tutorial-with-kotlin">https://www.raywenderlich.com/1560485-android-recyclerview-tutorial-with-kotlin</a></li>
  <li>[Android] 디자인패턴 1 - 디자인패턴이란? <a href="https://jroomstudio.tistory.com/20">https://jroomstudio.tistory.com/20</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android/WebRTC] WebRTC 개념</title>
	  <link>/blog//android-webrtc02</link>
	  <author></author>
	  <pubDate>2021-02-04T09:00:00+09:00</pubDate>
	  <guid>/blog//android-webrtc02</guid>
	  <description><![CDATA[
	     <ul>
  <li>Web Real-Time Communications</li>
  <li>별도의 소프트웨어없이 음성, 영상, 텍스트, 파일 등의 데이터를 브라우저끼리 주고 받을 수 있게 만든 기술</li>
  <li>P2P 통신에 최적화</li>
  <li>MediaStream: 카메라, 마이크 등의 데이터 스트림에 접근</li>
  <li>RTCPeerConnection: 암호화, 대역폭 관리, 오디오/비디오 연결 담당</li>
  <li>RTCDataChannel: 음성, 영상 데이터가 아닌, json/text 데이터를 주고받음</li>
</ul>

<h3 id="수행-과정">수행 과정</h3>
<p><img src="./assets/images/210204_1.jpeg" alt="이미지" width="70%" height="70%" /></p>
<ol>
  <li>Fetching: peer에게 보낼 나의 음성, 영상 데이터를 수집</li>
  <li>Signaling: peer와 연결하기 위해 peer의 정보를 탐색</li>
  <li>Connection: 발견된 peer와 P2P connection 진행. 채널을 개방해둠</li>
  <li>Communication: 개방해놓은 채널을 통해 데이터를 주고받음</li>
</ol>

<h3 id="signaling">Signaling</h3>
<ul>
  <li>Peer들이 데이터를 교환할 수 있게 처리해주는 과정</li>
  <li>peer들이 통신하기 위해서는 서버가 필요하고, 서버를 통해 서로의 SessionDescription을 교환해야함</li>
  <li>ICE Framework를 사용해 내 ip, port를 찾아서 서로의(peer) network 정보를 교환</li>
  <li>SDP 형식을 따르는 offer, answer를 주고받으며 Media Capability(각자 사용 가능한 코덱, 해상도 등이 무엇인지) 교환</li>
  <li>Session Control Messages(통신 연결의 초기화, 종료)를 교환</li>
</ul>

<h3 id="stunturn-server">STUN/TURN Server</h3>
<ul>
  <li>P2P 통신이 가능하도록 해줌</li>
  <li>peer들이 연결하려면 서로의 ip를 알아야하는데, 실제로는 방화벽 등으로 peer들간의 연결이 쉽지 않음 이때 STUN, TURN 서버를 사용한다.</li>
</ul>

<h3 id="stun">STUN</h3>
<ul>
  <li>Session Traversal Utilities for NAT</li>
  <li>NAT 환경에서 내 ip 주소를 알려줌</li>
  <li>클라이언트 A는 STUN 서버를 통해 내 ip 주소가 뭔지 받고, 접근 가능한지 알아냄</li>
</ul>

<h3 id="nat">NAT</h3>
<ul>
  <li>Network Address Translation</li>
  <li>단말에 공개 ip 주소를 할당하기 위해 사용됨</li>
  <li>모든 단말들은 라우터에 연결되어있고, 라우터는 공개, 비공개 ip 주소를 가지고 있음</li>
  <li>peer간의 요청은 단말의 private ip로부터 라우터의 공개 ip 주소, 유일한 포트 기반으로 가능해짐</li>
</ul>

<h3 id="turn">TURN</h3>
<ul>
  <li>Traversal Using Relays around NAT</li>
  <li>어떤 라우터들은 네트워크에 연결할 수 있는 제한이 있어서, STUN으로 공개 ip 주소를 알아내도 모두가 연결할 수 있는 것은 아님 -&gt; TURN 서버가 필요</li>
  <li>몇몇 라우터는 Symmetric NAT(이전에 연결한 적이 있는 연결들만 허용함)을 채용하고 있음 -&gt; TURN 서버와 연결하고 모든 정보를 그 서버에 전달하는 것으로 Symmetric NAT 제한을 우회하는 방식으로 진행</li>
  <li>TURN 서버와 연결한 후 모든 peer들에게 모든 패킷을 보내고 다시 본인에게 전달해달라고 해야하므로 오버헤드가 발생</li>
</ul>

<h3 id="sdp">SDP</h3>
<ul>
  <li>Session Description Protocol</li>
  <li>스트리밍 미디어 포맷</li>
  <li>해상도, 형식, 코덱, 암호화 등의 멀티미디어 컨텐츠의 연결을 설명하기 위한 표준 프로토콜</li>
  <li>peer간의 ice candidate 교환 후 createOffer()로 offer SDP를 생성(내가 사용 가능한 코덱, 해상도 등의 정보가 담김) 및 전송</li>
  <li>offer sdp를 받은 peer는 setRemoteDescription()을 수행</li>
  <li>받은 peer는 createAnswer()로 answer SDP를 생성하고 전달</li>
  <li>쌍방으로 모두 진행되야 함</li>
  <li>둘 다 setRemoteDescription()이 수행되면 P2P 연결 성공</li>
</ul>

<h3 id="ice-candidate">ICE Candidate</h3>
<ul>
  <li>Interactive Connectivity Establishment</li>
  <li>브라우저가 peer를 통한 연결이 가능하도록 하게 해주는 프레임워크</li>
  <li>내 네트워크 정보</li>
  <li>onIceCandidate()로 내 ice candidate를 확보해서 전달</li>
  <li>peer의 candidate가 도착하면, addIceCandidate()로 peer의 네트워크 정보를 등록해야함</li>
</ul>

<h4 id="참고">참고</h4>
<ul>
  <li>[WebRTC] WebRTC란? <a href="https://medium.com/@hyun.sang/webrtc-webrtc%EB%9E%80-43df68cbe511">https://medium.com/@hyun.sang/webrtc-webrtc%EB%9E%80-43df68cbe511</a></li>
  <li>2018 webRTC 정리 <a href="http://jaynewho.com/post/36">http://jaynewho.com/post/36</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android/STOMP] STOMP 사용</title>
	  <link>/blog//android-stomp01</link>
	  <author></author>
	  <pubDate>2021-02-04T09:00:00+09:00</pubDate>
	  <guid>/blog//android-stomp01</guid>
	  <description><![CDATA[
	     <p>Simple Text Oriented Messaging Protocol</p>

<h2 id="-setting">👊 Setting</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">repositories</span> <span class="o">{</span> 
    <span class="n">jcenter</span><span class="o">()</span>
    <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s">"https://jitpack.io"</span> <span class="o">}</span>
<span class="o">}</span>
<span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">NaikSoftware</span><span class="o">:</span><span class="nl">StompProtocolAndroid:</span><span class="mf">1.6</span><span class="o">.</span><span class="mi">6</span><span class="err">'</span>
<span class="o">}</span>
</code></pre></div></div>
<p><a href="https://github.com/NaikSoftware/StompProtocolAndroid">https://github.com/NaikSoftware/StompProtocolAndroid</a>를 이용하였다.</p>

<h3 id="1-stomp-생성-및-connect">1. STOMP 생성 및 Connect</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="kd">private</span> <span class="n">StompClient</span> <span class="n">stompClient</span><span class="o">;</span>
<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">StompHeader</span><span class="o">&gt;</span> <span class="n">headerList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">initStomp</span><span class="o">(){</span>
    <span class="n">stompClient</span><span class="o">=</span> <span class="n">Stomp</span><span class="o">.</span><span class="na">over</span><span class="o">(</span><span class="n">Stomp</span><span class="o">.</span><span class="na">ConnectionProvider</span><span class="o">.</span><span class="na">OKHTTP</span><span class="o">,</span> <span class="n">wsServerUrl</span><span class="o">);</span>

    <span class="n">stompClient</span><span class="o">.</span><span class="na">lifecycle</span><span class="o">().</span><span class="na">subscribe</span><span class="o">(</span><span class="n">lifecycleEvent</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">lifecycleEvent</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">case</span> <span class="nl">OPENED:</span>
                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Stomp connection opened"</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="nl">ERROR:</span>
                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Error"</span><span class="o">,</span> <span class="n">lifecycleEvent</span><span class="o">.</span><span class="na">getException</span><span class="o">());</span>
                <span class="k">if</span><span class="o">(</span><span class="n">lifecycleEvent</span><span class="o">.</span><span class="na">getException</span><span class="o">().</span><span class="na">getMessage</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">"EOF"</span><span class="o">)){</span>
                    <span class="n">isUnexpectedClosed</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="nl">CLOSED:</span>
                <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Stomp connection closed"</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">isUnexpectedClosed</span><span class="o">){</span>
                    <span class="cm">/**
                        * EOF Error
                        */</span>
                    <span class="n">initStomp</span><span class="o">();</span>
                    <span class="n">isUnexpectedClosed</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">});</span>

    <span class="c1">// add Header</span>
    <span class="n">headerList</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">headerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StompHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span> <span class="n">G</span><span class="o">.</span><span class="na">accessToken</span><span class="o">));</span>
    <span class="n">stompClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">headerList</span><span class="o">);</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>먼저 stomp.over()로 stompClient를 생성한다.</li>
  <li>첫 번째 파라미터는 connection이다. 현재 OkHttp와 JWS가 가능하다.</li>
  <li>두 번째 파라미터는 연결하고자 하는 서버 주소이다.</li>
  <li>다음은 stompClient의 lifeCycle에 따라 필요한 조건이 있을 경우 선언한다.</li>
  <li>헤더에 추가해야할 것이 있다면 StompHeader()를 이용해서 만든다.</li>
  <li>이제 connect()로 연결!</li>
</ul>

<h4 id="주소는-ws">⭐⭐주소는 ws</h4>
<ul>
  <li>연결하려는 주소가 http로 시작하면 ws, https는 wss로 시작하며, 마지막에 /websocket을 꼭 붙여야 한다.</li>
  <li>connect에 성공하면 101을 받는다.</li>
</ul>

<h3 id="2-send-subscribe">2. Send, Subscribe</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="cm">/**
* 보낼 JSONObject 만들기
* */</span>
<span class="n">stompClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"send할 주소"</span><span class="o">,</span> <span class="n">jsonObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">()).</span><span class="na">subscribe</span><span class="o">();</span>
        

<span class="n">stompClient</span><span class="o">.</span><span class="na">topic</span><span class="o">(</span><span class="s">"subscribe할 주소"</span><span class="o">).</span><span class="na">subscribe</span><span class="o">(</span><span class="n">topicMessage</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">JSONParser</span> <span class="n">parser</span><span class="o">=</span><span class="k">new</span> <span class="n">JSONParser</span><span class="o">();</span>
    <span class="n">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">topicMessage</span><span class="o">.</span><span class="na">getPayload</span><span class="o">());</span>
    <span class="o">...</span>
<span class="o">});</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>tooooooo easy!0!</li>
  <li>send()할때 뒤에 .subscribe() 잊지 말자.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android] Service 정리</title>
	  <link>/blog//android-service01</link>
	  <author></author>
	  <pubDate>2021-02-04T09:00:00+09:00</pubDate>
	  <guid>/blog//android-service01</guid>
	  <description><![CDATA[
	     <h3 id="service">Service</h3>
<ul>
  <li>FG, BG, binder</li>
  <li>back으로 종료하는 경우 service는 살아있고, overview로 종료하면 서비스가 종료된다고 알고 있다.</li>
  <li>startService로 실행한 서비스는 (중간에 bindService 진행해도) stopService로 종료해야 끝난다.</li>
  <li>bindSerivce로 실행하면 unbindService로 종료한다.</li>
  <li>참고로 bindService는 바인딩이 모두 해제되어야 종료된다.</li>
  <li>startService는 onStartCommand()를 진행, bindService는 바로 onBind() 진행한다.</li>
  <li>보통 service 호출 및 종료를 같은 액티비티(프래그먼트)에서 진행하지 않는데, 확실하게 죽이고 싶으면 같은 곳에서 하는게 좋다.</li>
</ul>

<h3 id="stopservice가-ondestroy를-호출하지-않을-때">stopService가 onDestroy()를 호출하지 않을 때</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">getActivity</span><span class="o">().</span><span class="na">bindService</span><span class="o">(</span><span class="n">LoginActivity</span><span class="o">.</span><span class="na">getPushIntent</span><span class="o">(),</span> <span class="n">mConnection</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">BIND_ADJUST_WITH_ACTIVITY</span><span class="o">);</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>flag를 Context.BIND_AUTO_CREATE가 아니라 위의 값으로 변경</li>
  <li>근데 같은 코드지만 디바이스마다 onDestory()가 호출되는 시간이 달라보였다🤷‍♂️.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android/error] ListView Item에 중복된 값이 나오는 문제 해결</title>
	  <link>/blog//android-error01</link>
	  <author></author>
	  <pubDate>2021-02-04T09:00:00+09:00</pubDate>
	  <guid>/blog//android-error01</guid>
	  <description><![CDATA[
	     <h3 id="-문제">🤦‍ 문제</h3>
<ul>
  <li>Adapter를 이용하여 ListView에 item을 띄우는 과정에서, 화면을 스크롤하면 밑에 있는 값들이 제대로 안나옴</li>
  <li>List에는 제대로 들어가는데, 화면에 이상하게 띄우는 듯</li>
</ul>

<h3 id="-해결">💃 해결</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre> <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">viewGroup</span><span class="o">){</span>
        <span class="n">GroupItem</span> <span class="n">item</span><span class="o">=</span> <span class="n">groupItems</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">view</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">View</span> <span class="n">itemView</span><span class="o">=</span><span class="n">layoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item_group</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
            <span class="n">CircleImageView</span> <span class="n">iv</span><span class="o">=</span><span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">iv_group</span><span class="o">);</span>
            <span class="n">TextView</span> <span class="n">tvTitle</span><span class="o">=</span><span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_groupmsg</span><span class="o">);</span>
            <span class="n">tvTitle</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="n">Glide</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">itemView</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getProfile</span><span class="o">()).</span><span class="na">error</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">profile_default</span><span class="o">).</span><span class="na">into</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>

            <span class="k">return</span> <span class="n">itemView</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="n">CircleImageView</span> <span class="n">iv</span><span class="o">=</span><span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">iv_group</span><span class="o">);</span>
            <span class="n">TextView</span> <span class="n">tvTitle</span><span class="o">=</span><span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_groupmsg</span><span class="o">);</span>
            <span class="n">tvTitle</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="n">Glide</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">view</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getProfile</span><span class="o">()).</span><span class="na">error</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">profile_default</span><span class="o">).</span><span class="na">into</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>이런식으로 view가 null인지 아닌지로 나눠서 코드를 작성해야 한다.</li>
  <li>UI가 view를 reuse하기 때문에, view가 null이면 새로 만들고, 아니라면 기존 인스턴스에 item을 넣어야 된다고 한다.</li>
</ul>

<h3 id="참고">참고</h3>
<ul>
  <li>Duplicated entries in ListView <a href="https://stackoverflow.com/questions/8261376/duplicated-entries-in-listview">https://stackoverflow.com/questions/8261376/duplicated-entries-in-listview</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android/WebRTC] WebRTC 세팅 및 sdp, candidate 생성</title>
	  <link>/blog//android-webrtc01</link>
	  <author></author>
	  <pubDate>2021-01-31T09:00:00+09:00</pubDate>
	  <guid>/blog//android-webrtc01</guid>
	  <description><![CDATA[
	     <h3 id="-setting">👊 Setting</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">webrtc</span><span class="o">:</span><span class="n">google</span><span class="o">-</span><span class="nl">webrtc:</span><span class="mf">1.0</span><span class="o">.+</span><span class="err">'</span>
</code></pre></div></div>
<p>로 추가 가능하나, 블로그 대부분의 예시가 arr파일로 되어있어서 나도 arr 파일을 사용하였다 😎</p>
<ul>
  <li>아래 코드는 audio를 가져오는 코드로, video도 생성하고 싶은 경우 VideoTrack을 이용하면 쉽게 구현할 수 있다.</li>
</ul>

<h3 id="1-webrtc-세팅">1. WebRTC 세팅</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">feature</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.hardware.camera"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">feature</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.hardware.camera.autofocus"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">feature</span>
    <span class="nl">android:</span><span class="n">glEsVersion</span><span class="o">=</span><span class="s">"0x00020000"</span>
    <span class="nl">android:</span><span class="n">required</span><span class="o">=</span><span class="s">"true"</span> <span class="o">/&gt;</span>

<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.INTERNET"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.CHANGE_NETWORK_STATE"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.READ_EXTERNAL_STORAGE"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.RECORD_AUDIO"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.MODIFY_AUDIO_SETTINGS"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">"android.permission.CAMERA"</span> <span class="o">/&gt;</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>먼저, 필요한 permission을 AndroiMenifest.xml에 추가한다.</li>
  <li>다음으로, WebRTC에 필요한 생성 및 초기화를 진행한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">initWebRTC</span><span class="o">(){</span>
    <span class="n">PeerConnectionFactory</span><span class="o">.</span><span class="na">initializeAndroidGlobals</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

    <span class="n">PeerConnectionFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PeerConnectionFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
    <span class="n">peerConnectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PeerConnectionFactory</span><span class="o">(</span><span class="n">options</span><span class="o">);</span>

    <span class="n">audioConstraints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MediaConstraints</span><span class="o">();</span>
    <span class="n">audioSource</span> <span class="o">=</span> <span class="n">peerConnectionFactory</span><span class="o">.</span><span class="na">createAudioSource</span><span class="o">(</span><span class="n">audioConstraints</span><span class="o">);</span>
    <span class="n">localAudioTrack</span> <span class="o">=</span> <span class="n">peerConnectionFactory</span><span class="o">.</span><span class="na">createAudioTrack</span><span class="o">(</span><span class="s">"101"</span><span class="o">,</span> <span class="n">audioSource</span><span class="o">);</span>
    <span class="n">localAudioTrack</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

    <span class="n">sdpConstraints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MediaConstraints</span><span class="o">();</span>
    <span class="n">sdpConstraints</span><span class="o">.</span><span class="na">mandatory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">MediaConstraints</span><span class="o">.</span><span class="na">KeyValuePair</span><span class="o">(</span><span class="s">"offerToReceiveAudio"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">));</span>
    <span class="n">sdpConstraints</span><span class="o">.</span><span class="na">mandatory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">MediaConstraints</span><span class="o">.</span><span class="na">KeyValuePair</span><span class="o">(</span><span class="s">"offerToReceiveVideo"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">));</span> 

    <span class="n">stream</span> <span class="o">=</span> <span class="n">peerConnectionFactory</span><span class="o">.</span><span class="na">createLocalMediaStream</span><span class="o">(</span><span class="s">"102"</span><span class="o">);</span>
    <span class="n">stream</span><span class="o">.</span><span class="na">addTrack</span><span class="o">(</span><span class="n">localAudioTrack</span><span class="o">);</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>audioSource를 생성하기 위해 PeerConnectionFactory을 생성 및 초기화한다.</li>
  <li>audioConstraints를 통해 audio를 생성하고, localAudioTrack으로 audio를 setEnable한다.</li>
  <li>sdpConstraints는 SDP 정보를 생성하는 것으로, 연결하고자 하는 Peer간의 미디어와 네트워크에 관한 정보를 이해하기 위해 사용된다.</li>
  <li>마지막으로 stream을 통해 생성한 audioTrack을 넣으면 WebRTC 초기 세팅이 끝난다.</li>
</ul>

<h3 id="2-sdp와-icecandidate-전달">2. SDP와 IceCandidate 전달</h3>

<ul>
  <li>두 Peer가 서버와 연결되면, 같은 dest를 가지고 있는 Peer들은 sdp와 candidate를 교환해야 한다.</li>
  <li>SDP(Session Description Protocol)은 미디어 정보를 서로 교환한다.</li>
  <li>sdp는 (연결하고자 하는) A가 만든 sdp(createOffer())와, 상대방(A)의 sdp를 받고 제대로 받았음을 send할 B의 sdp(createAnswer())가 필요하다.</li>
</ul>

<h4 id="createoffer">createOffer()</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPeer</span><span class="o">(){</span>
    <span class="o">...</span>
    <span class="k">if</span><span class="o">(</span><span class="n">initCall</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">newPeer</span><span class="o">.</span><span class="na">createOffer</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomSdpObserver</span><span class="o">(</span><span class="s">"newPeerCreateOffer"</span><span class="o">)</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreateSuccess</span><span class="o">(</span><span class="n">SessionDescription</span> <span class="n">sessionDescription</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kd">super</span><span class="o">.</span><span class="na">onCreateSuccess</span><span class="o">(</span><span class="n">sessionDescription</span><span class="o">);</span>
                    <span class="n">createdDescription</span><span class="o">(</span><span class="n">sessionDescription</span><span class="o">,</span> <span class="n">peerUuid</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">},</span> <span class="n">sdpConstraints</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>createOffer()로 sdp를 생성하면, onCreateSuccess()의 파라미터 sessionDescription으로 생성된 sdp를 확인할 수 있다. 이제 생성된 sdp를 서버로 전송해주면 된다.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createdDescription</span><span class="o">(</span><span class="n">SessionDescription</span> <span class="n">sessionDescription</span><span class="o">,</span> <span class="n">String</span> <span class="n">peerUuid</span><span class="o">){</span>
    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"createdDescription"</span><span class="o">);</span>

    <span class="n">CustomPeerConnection</span> <span class="n">tempPeer</span><span class="o">=</span> <span class="n">peerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">peerUuid</span><span class="o">);</span>
    <span class="n">tempPeer</span><span class="o">.</span><span class="na">pc</span><span class="o">.</span><span class="na">setLocalDescription</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomSdpObserver</span><span class="o">(</span><span class="s">"createdDescription"</span><span class="o">),</span> <span class="n">sessionDescription</span><span class="o">);</span>

    <span class="cm">/**
      * createOffer()한 sdp를 서버로 전송
      */</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h4 id="createanswer">createAnswer()</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="n">tempPeer</span><span class="o">.</span><span class="na">pc</span><span class="o">.</span><span class="na">createAnswer</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomSdpObserver</span><span class="o">(</span><span class="s">"offer createAnswer"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreateSuccess</span><span class="o">(</span><span class="n">SessionDescription</span> <span class="n">sessionDescription</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreateSuccess</span><span class="o">(</span><span class="n">sessionDescription</span><span class="o">);</span>
        <span class="n">tempPeer</span><span class="o">.</span><span class="na">pc</span><span class="o">.</span><span class="na">setLocalDescription</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomSdpObserver</span><span class="o">(</span><span class="s">"offer setLocal"</span><span class="o">),</span> <span class="n">sessionDescription</span><span class="o">);</span>
        <span class="n">createdDescription</span><span class="o">(</span><span class="n">sessionDescription</span><span class="o">,</span> <span class="n">peerUuid</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">},</span> <span class="k">new</span> <span class="n">MediaConstraints</span><span class="o">());</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>상대방의 sdp를 제대로 받았음을 전송하는 sdp이다.</li>
  <li>sdp 교환이 끝나면, Ice Candidates를 교환한다.</li>
</ul>

<h3 id="onicecandidate">onIceCandidate()</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="n">PeerConnection</span> <span class="n">newPeer</span><span class="o">=</span><span class="n">peerConnectionFactory</span><span class="o">.</span><span class="na">createPeerConnection</span><span class="o">(</span><span class="n">iceServerList</span><span class="o">,</span> <span class="n">sdpConstraints</span><span class="o">,</span>
    <span class="k">new</span> <span class="nf">CustomPeerConnectionObserver</span><span class="o">(</span><span class="s">"newPeerCreation"</span><span class="o">)</span> <span class="o">{</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onIceCandidate</span><span class="o">(</span><span class="n">IceCandidate</span> <span class="n">iceCandidate</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"onIceCandidate"</span><span class="o">);</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">onIceCandidate</span><span class="o">(</span><span class="n">iceCandidate</span><span class="o">);</span>
            <span class="cm">/**
                * 생성된 iceCandidate(파라미터 값)을 서버로 전송
                */</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAddStream</span><span class="o">(</span><span class="n">MediaStream</span> <span class="n">mediaStream</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">onAddStream</span><span class="o">(</span><span class="n">mediaStream</span><span class="o">);</span>
            <span class="n">gotRemoteStream</span><span class="o">(</span><span class="n">mediaStream</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">});</span>

<span class="n">newPeer</span><span class="o">.</span><span class="na">addStream</span><span class="o">(</span><span class="n">stream</span><span class="o">);</span>
        </pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>onAddStream이 호출되면 Peer 연결에 성공했다는 뜻이다.</li>
  <li>A와 B가 iceCandidate 교환에 성공하면, connection되어 audio 전송이 가능해진다.</li>
</ul>

<h3 id="4-참고">4. 참고</h3>
<h4 id="customsdpobserverjava">CustomSdpObserver.java</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="kd">class</span> <span class="nc">CustomSdpObserver</span> <span class="kd">implements</span> <span class="n">SdpObserver</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getCanonicalName</span><span class="o">();</span>

    <span class="n">CustomSdpObserver</span><span class="o">(</span><span class="n">String</span> <span class="n">logTag</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tag</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">tag</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">logTag</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreateSuccess</span><span class="o">(</span><span class="n">SessionDescription</span> <span class="n">sessionDescription</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span> <span class="s">"onCreateSuccess() called with: sessionDescription = ["</span> <span class="o">+</span> <span class="n">sessionDescription</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSetSuccess</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span> <span class="s">"onSetSuccess() called"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreateFailure</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span> <span class="s">"onCreateFailure() called with: s = ["</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSetFailure</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span> <span class="s">"onSetFailure() called with: s = ["</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>CustomSdpObserver는 SdpObserver를 implement하여, SDP와 관련된 이벤트들을 체크한다.</li>
  <li>SdpObserver가 필요한 곳에 override method를 다 써줄 순 없으니까 Custom class를 하나 생성하여, 필요한 메소드가 있을 경우 override해준다.</li>
</ul>

<h4 id="음량-조절-기능">음량 조절 기능</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">muteAudio</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">action</span><span class="o">){</span>
    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"muteAudio"</span><span class="o">);</span>
    <span class="n">stream</span><span class="o">.</span><span class="na">audioTracks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setVolume</span><span class="o">(</span><span class="kt">long</span> <span class="n">uid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">volume</span><span class="o">){</span>
    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"setVolume "</span><span class="o">+</span><span class="n">uid</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">volume</span><span class="o">);</span>
    <span class="n">audioMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">uid</span><span class="o">).</span><span class="na">setVolume</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">volume</span><span class="o">);</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>audio, video는 MediaStream에서 관리한다.</li>
  <li>
    <p>initWebRTC()에서 audio, video를 세팅해주고 addTrack()으로 나의 audio 데이터를 담았다.</p>
  </li>
  <li>참고로, MediaStream에는 audioTracks와 videoTracks가 존재한다(둘다 LinkedList).</li>
  <li>그래서 내 audio는 media.audioTrack.get(0)이 된다.</li>
  <li>
    <p>음소거 기능은 setEnabled()로 관리하며, false가 음소거이다.</p>
  </li>
  <li>audio는 LinkedList형태로 peer들이 들어올 때마다 뒤에서 삽입되므로 해당 인덱스를 찾는다면 특정 peer의 음량을 조절할 수 있다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Android/React-Native] Windows 설치 및 프로젝트 실행</title>
	  <link>/blog//android-react-setup</link>
	  <author></author>
	  <pubDate>2020-11-22T09:00:00+09:00</pubDate>
	  <guid>/blog//android-react-setup</guid>
	  <description><![CDATA[
	     <h2 id="설치">설치</h2>

<h3 id="1-nvm과-node">1. nvm과 node</h3>
<ul>
  <li><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a>에서 nvm-setup.zip 다운로드</li>
  <li>압축해제 및 설치</li>
  <li>nvm install <버전></버전></li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="n">nvm</span> <span class="n">install</span> <span class="mf">10.16</span><span class="o">.</span><span class="mi">2</span> <span class="c1">// 설치</span>
<span class="n">nvm</span> <span class="n">use</span> <span class="mf">10.16</span><span class="o">.</span><span class="mi">2</span> <span class="c1">// 활성화</span>

<span class="c1">// 버전 확인으로 제대로 설치되었는지 체크</span>
<span class="n">node</span> <span class="o">-</span><span class="n">v</span>
<span class="n">npm</span> <span class="o">-</span><span class="n">v</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="2-java-open-jdk">2. Java open jdk</h3>
<ul>
  <li>Java 유저라면 있을테니까 패스</li>
  <li>버전 체크로 설치되어 있는지 체크</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">java</span> <span class="o">-</span><span class="n">version</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>설치 후 환경변수(JAVA_HOME) 등록</li>
</ul>

<h3 id="3-python">3. Python</h3>
<ul>
  <li><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">python</span> <span class="o">--</span><span class="n">version</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>버전 체크로 설치 확인</li>
  <li>나의 경우 구체적인 버전이 나오지 않고 Python이라고만 출력되었는데도 문제 X</li>
</ul>

<h3 id="4-react-native-cli">4. React Native CLI</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">cli</span>
<span class="n">react</span><span class="o">-</span><span class="kd">native</span> <span class="o">--</span><span class="n">version</span> <span class="c1">//버전 체크</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="5-안드로이드-스튜디오">5. 안드로이드 스튜디오</h3>
<ul>
  <li>기존에 있어서 설치 패스</li>
  <li>설치 후 시스템 환경 변수 편집&gt; 환경 변수&gt; 시스템 변수&gt; 새로 만들기</li>
  <li>변수 이름: ANDROID_HOME <br />
변수 값: 안드로이드 실행&gt; File&gt; Settings&gt; Appearance&amp;Behavior&gt; System Setting&gt; Android SDK 에 Android SDK Location
<img src="./assets/images/201122_2.PNG" alt="이미지1" /></li>
  <li>이번에는 시스템 변수 Path 편집</li>
  <li>새로 만들기&gt; 위에 변수값\platform-tools 추가</li>
  <li>cmd 켜놓았다면 다 끄고 재실행</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">adb</span> <span class="c1">// adb 명령어가 먹는지 확인</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="6-vs-code">6. VS Code</h3>
<ul>
  <li>이미 설치되어 있어서 패스</li>
</ul>

<h2 id="프로젝트-생성-및-실행">프로젝트 생성 및 실행</h2>

<h3 id="1-vs-code로-프로젝트-생성">1. VS Code로 프로젝트 생성</h3>
<ul>
  <li>상단에서 터미널 열기</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">cd</span> <span class="o">&lt;</span><span class="err">위치</span><span class="o">&gt;</span> <span class="c1">// 프로젝트 생성할 폴더로 이동</span>
<span class="n">react</span><span class="o">-</span><span class="kd">native</span> <span class="n">init</span> <span class="o">&lt;</span><span class="err">프로젝트</span> <span class="err">이름</span><span class="o">&gt;</span> <span class="c1">//프로젝트 생성</span></pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>파일&gt; 폴더 열기로 생성한 프로젝트 불러오기</li>
</ul>

<h3 id="2-안드로이드-에뮬레이터-또는-디바이스-실행">2. 안드로이드 에뮬레이터 또는 디바이스 실행</h3>
<ul>
  <li>안드로이드 스튜디오 실행</li>
  <li>에뮬레이터를 사용하려고 한다면 미리 실행시켜 놓고 react를 돌려야 함</li>
  <li>에뮬레이터 설치 안했다면 설치</li>
  <li>build.gradle Module의 targetSdkVersion과 맞는 에뮬레이터 설치</li>
  <li>AVD Manager에서 Create Virutal Device로 설치 가능</li>
  <li>상단에서 AVD Manager 클릭후 Action에서 실행하여 에뮬레이터 구동
 <img src="./assets/images/201122_3.PNG" alt="이미지2" /></li>
  <li>다시 vs 터미널</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">adb</span> <span class="n">devices</span> <span class="c1">// 현재 연결된 디바이스와 에뮬레이터 확인 가능</span>
<span class="n">npx</span> <span class="n">react</span><span class="o">-</span><span class="kd">native</span> <span class="n">run</span><span class="o">-</span><span class="n">android</span> <span class="c1">// 실행</span></pre></td></tr></tbody></table></code></pre></figure>

	  ]]></description>
	</item>


</channel>
</rss>
