<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[Python/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 문자열 압축</title>
	  <link>/blog//algo-python-prog60057</link>
	  <author></author>
	  <pubDate>2021-02-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog60057</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60057">https://programmers.co.kr/learn/courses/30/lessons/60057</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>문자열 자를 사이즈를 구한다.</li>
  <li>기준 문자열(temp_s)와 현재 문자열(s[i:i+size])가 같으면 cnt++한다.</li>
  <li>아니라면, result에 저장한다.</li>
  <li>압축된 문자열 길이와 answer 중 min 값을 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>    
    
    <span class="k">for</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c"># 압축 길이</span>
        <span class="n">temp_s</span><span class="o">=</span><span class="n">s</span><span class="p">[:</span><span class="n">size</span><span class="p">]</span>
        <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span>
        <span class="n">result</span><span class="o">=</span><span class="s">""</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">size</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span><span class="o">==</span><span class="n">temp_s</span><span class="p">:</span>
                <span class="n">cnt</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cnt</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
                <span class="n">result</span><span class="o">+=</span><span class="n">temp_s</span>
                <span class="n">temp_s</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">size</span><span class="p">]</span>
                <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">cnt</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
        <span class="n">result</span><span class="o">+=</span><span class="n">temp_s</span>
        <span class="n">answer</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210223_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">압축 길이를 구한다</span></strong>
    <ul>
      <li>for문을 1~len(s)//2+1까지 체크하면 된다.</li>
      <li>압축 길이가 s의 반 이상을 넘어가면 뒤에 문자열로는 압축시킬 수 없으므로 len(s)/2 이상은 체크하지 않아도 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">조건에 맞게 문자열을 압축한다</span></strong>
    <ul>
      <li>문자열이 같으면 cnt++한다.</li>
      <li>다르다면, result에 현재 문자열을 넣는다. cnt는 cnt&gt;1만 result에 넣는다.</li>
      <li>이제 다음 체크할 문자열을 temp_s에 넣는다. 현재 s[i]가 다른 문자이므로 i를 포함하고 size만큼 길이를 가진다.</li>
      <li>cnt도 초기화.</li>
      <li>마지막 i가 temp_s와 같으면 result에 추가되지않고 for문을 종료하게 된다. 이 값을 넣어줘야 하므로 for문 밖에서 result에 다시 추가해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<ul>
  <li>문자열 압축-프로그래머스(python)(2020 Kakao 공채) <a href="https://velog.io/@devjuun_s/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4python2020-Kakao-%EA%B3%B5%EC%B1%84">https://velog.io/@devjuun_s/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4python2020-Kakao-%EA%B3%B5%EC%B1%84</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 괄호 변환</title>
	  <link>/blog//algo-python-prog60058</link>
	  <author></author>
	  <pubDate>2021-02-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog60058</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60058">https://programmers.co.kr/learn/courses/30/lessons/60058</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>문제 조건에 맞게 진행</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">balance</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="nb">open</span><span class="o">=</span><span class="n">close</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">val</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="nb">open</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">close</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">if</span> <span class="nb">open</span><span class="o">==</span><span class="n">close</span><span class="p">:</span> <span class="k">return</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">return</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">correct</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="n">stack</span><span class="o">=</span><span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">ch</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">'('</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span> <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">')'</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="n">result</span><span class="o">=</span><span class="s">""</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">ch</span><span class="o">==</span><span class="s">'('</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="s">')'</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">result</span><span class="o">+=</span><span class="s">'('</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">==</span><span class="s">''</span><span class="p">:</span> <span class="k">return</span> <span class="s">''</span>
    
    <span class="n">answer</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">idx</span><span class="o">=</span><span class="n">balance</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="n">u</span><span class="o">=</span><span class="n">p</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span>
    <span class="n">v</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">idx</span><span class="p">:]</span>
    <span class="k">if</span><span class="p">(</span><span class="n">correct</span><span class="p">(</span><span class="n">u</span><span class="p">)):</span>
        <span class="k">return</span> <span class="n">u</span><span class="o">+</span><span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">answer</span><span class="o">=</span><span class="s">'('</span><span class="o">+</span><span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">+</span><span class="s">')'</span>
        <span class="n">u</span><span class="o">=</span><span class="n">u</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">answer</span><span class="o">+=</span><span class="n">reverse</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210223_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">균형잡힌 문자열 체크</span></strong>
    <ul>
      <li>balance(w)</li>
      <li>w를 순회하며 여는괄호(open), 닫는괄호(close) 개수가 같아지는 인덱스를 리턴한다.</li>
      <li>for문을 끝까지 돈다면 w는 균형잡힌 문자열이 아니므로 0을 리턴한다.</li>
      <li>list(w)하면 문자열 w이 Char Array로 저장된다.</li>
      <li>enumerate()하면 튜플 형태로 반환되어 for문에서 index, value 형태로 사용할 수 있다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">올바른 괄호 문자열 체크</span></strong>
    <ul>
      <li>correct(w)</li>
      <li>스택을 이용한다. ‘(‘면 push한다.</li>
      <li>’)’면 스택에 값이 존재하고 top이 ‘(‘일 때 pop한다.</li>
      <li>top이 ‘)’면 push.</li>
      <li>스택이 비어있으면 잘못된 문자열이므로 False를 리턴한다.</li>
      <li>for문을 다 돌았을 때, 스택이 비어있어야 올바른 문자열이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">올바른 괄호 문자열이 아니라면</span></strong>
    <ul>
      <li>4-4에서 u의 첫 번째, 마지막을 slice로 지운 후, reverse()로 괄호 방향을 뒤집어서 붙인다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2021 KAKAO BLIND RECRUITMENT: 순위 검색</title>
	  <link>/blog//algo-python-prog72412</link>
	  <author></author>
	  <pubDate>2021-02-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog72412</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72412">https://programmers.co.kr/learn/courses/30/lessons/72412</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>info[i]의 점수를 제외한 데이터와 ‘-‘를 가지고 모든 경우의 수를 만든다.</li>
  <li>만든 경우의 수는 key가 되고, 점수는 value가 된다. value는 리스트 형태로 만들어서 오름차순 정렬 후 이분탐색으로 사용한다.</li>
  <li>query[i]가 해시맵의 key에 있다면 그 value를 통해 점수 조건에 맞는 개수를 answer에 넣으면 된다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
<span class="kn">import</span> <span class="nn">bisect</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="n">query</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">hashmap</span><span class="o">=</span><span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>
        <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">data</span><span class="o">=</span><span class="n">i</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">score</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="n">comb</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="n">n</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">comb</span><span class="p">:</span>
                <span class="n">_data</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">c_idx</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">_data</span><span class="p">[</span><span class="n">c_idx</span><span class="p">]</span><span class="o">=</span><span class="s">'-'</span>
                <span class="n">_data</span><span class="o">=</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">_data</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">_data</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">_data</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">_data</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">score</span><span class="p">]</span>
                    
    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
        <span class="n">value</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">query</span><span class="p">:</span>
        <span class="n">q</span><span class="o">=</span><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">q</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">if</span> <span class="n">i</span><span class="o">!=</span><span class="s">'and'</span><span class="p">]</span>
        <span class="n">q_score</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">q_cnd</span><span class="o">=</span><span class="n">q</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">q_cnd</span><span class="o">=</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">q_cnd</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">q_cnd</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
            <span class="n">value_list</span><span class="o">=</span><span class="n">hashmap</span><span class="p">[</span><span class="n">q_cnd</span><span class="p">]</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">value_list</span><span class="p">)</span><span class="o">-</span><span class="n">bisect</span><span class="o">.</span><span class="n">bisect_left</span><span class="p">(</span><span class="n">value_list</span><span class="p">,</span> <span class="n">q_score</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">value_list</span><span class="p">)))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="n">answer</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210222_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">조합을 구한다</span></strong>
    <ul>
      <li>조합으로 만드는 인덱스는 data(info[i]의 점수를 제외한 데이터들)에 ‘-‘를 넣을 위치가 된다.</li>
      <li>(), (0), (1), … (0,1,2,3) == ‘-‘ 위치</li>
      <li>생성한 경우의 수 리스트(_data)를 join연산으로 하나의 문자열로 바꾼 후 _data에 넣는다.</li>
      <li>_data가 hashmap에 있다면 value(리스트 형) 뒤에 추가한다.</li>
      <li>아니라면, hashmap에 추가.</li>
      <li>value 이분탐색을 위해 오름차순 정렬한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">해시맵에서 조건에 맞는 값을 리턴한다</span></strong>
    <ul>
      <li>q를 스페이스 기준, and를 제외하고 배열에 넣는다.</li>
      <li>q_cnd(점수를 제외한 데이터)가 해시맵에 존재한다면, 해당 value에서 이분탐색으로 q_score의 삽입 위치를 찾는다(bisect_left 사용)</li>
      <li>리턴받은 숫자가 조건에 맞지 않는 개수이므로 value.size()에서 리턴숫자를 뺀 값이 정답이 된다. answer에 넣는다.</li>
      <li>해시맵에 없다면 0을 answer에 넣는다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>
<ul>
  <li>[프로그래머스] 순위 검색 / Python <a href="https://dev-note-97.tistory.com/131">https://dev-note-97.tistory.com/131</a></li>
  <li>[프로그래머스] 순위 검색(Python) <a href="https://velog.io/@study-dev347/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89Python">https://velog.io/@study-dev347/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89Python</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2021 KAKAO BLIND RECRUITMENT: 메뉴 리뉴얼</title>
	  <link>/blog//algo-prog72411</link>
	  <author></author>
	  <pubDate>2021-02-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog72411</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72411">https://programmers.co.kr/learn/courses/30/lessons/72411</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>orders[i]의 조합을 구한다. 이때 조합의 길이는 course 값을 이용한다.</li>
  <li>구한 조합은 combMap에 저장한다. 조합한 메뉴 길이가 가장 긴 것을 리턴해야하므로(같은 값이 있으면 여러 개 리턴) sizeMap에 메뉴 길이의 발생 횟수의 최댓값을 저장한다.</li>
  <li>combMap, sizeMap이 완료하면, entrySet()로 순회하며, 조합 i의 개수가 2 이상이고, 조합들 중 i 문자열 길이와 같은 것 중 최댓값 개수인 것만 result에 저장한다.</li>
  <li>배열 형태로 리턴해야하므로 result(ArrayList)를 Array로 변환해서 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">combMap</span><span class="o">;</span>
    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sizeMap</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">orders</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">course</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="n">combMap</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">sizeMap</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">order:</span><span class="n">orders</span><span class="o">){</span>
            <span class="kt">char</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="n">order</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
            <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">c:</span><span class="n">course</span><span class="o">){</span>
                <span class="n">comb</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(),</span> <span class="n">array</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="nl">entry:</span><span class="n">combMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()==</span><span class="n">sizeMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">())){</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="n">answer</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">comb</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()==</span><span class="n">depth</span><span class="o">){</span>
            <span class="n">combMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">combMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="mi">0</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
            <span class="n">sizeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">sizeMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="mi">0</span><span class="o">),</span> <span class="n">combMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">())));</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">comb</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="n">array</span><span class="o">,</span> <span class="n">depth</span><span class="o">);</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210221_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">조합을 구한다</span></strong>
    <ul>
      <li><strong>comb()</strong></li>
      <li>idx: array 순회 인덱스. array[idx]를 선택할지 말지 체크한다.</li>
      <li>sb: 조합 생성하는 StringBuilder. 문자열 삽입이 빈번히 일어나므로 String보다 StringBuilder를 사용하는 것이 낫다.</li>
      <li>array: 조합할 문자 배열 대상</li>
      <li>depth: 만들 조합의 길이</li>
      <li>“XY”, “YX”는 같은 것으로 생각하므로, solution()에서 comb()를 호출하기 전 Arrays.sort()로 조합할 char 배열을 오름차순 정렬한다.</li>
      <li>조합 생성이 완료되면 combMap에 sb를 넣는다. value는 조합을 통해 생성된 sb의 횟수이다.</li>
      <li>sizeMap에 sb.length()의 max를 저장한다. 조합 문자열의 길이가 같은 것 중 max만 리턴할 수 있으므로, 이를 체크하기 위해 사용할 것이다.</li>
      <li>재귀로 조합을 찾는다. 이때 array[i]를 선택하거나 하지 않는 경우를 생각한다. 선택한 경우로 재귀를 돌고 오면, sb에는 array[i]가 아직 들어가있으므로 deleteCharAt()으로 array[i]를 삭제해야 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">조합 중 조건에 맞는 값을 리턴한다</span></strong>
    <ul>
      <li>조합 횟수가 2 이상이고 길이가 최댓값인 것만 result에 넣는다.</li>
      <li>오름차순으로 정렬하여 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[Python/프로그래머스] 2021 KAKAO BLIND RECRUITMENT: 메뉴 리뉴얼</title>
	  <link>/blog//algo-python-prog72411</link>
	  <author></author>
	  <pubDate>2021-02-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-python-prog72411</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72411">https://programmers.co.kr/learn/courses/30/lessons/72411</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>order의 조합을 구한다.</li>
  <li>hashmap에 조합 별 개수를 세서 저장한다.</li>
  <li>조합 길이의 최댓값을 size에 저장한다.</li>
  <li>조합 빈도수(hashmap)이 2 이상이고 최댓값(size)인 결과를 answer에 넣는다.</li>
  <li>answer을 오름차순 정렬하여 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="o">/**</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="n">HEESOO</span>
 <span class="o">*</span>
 <span class="o">*/</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">orders</span><span class="p">,</span> <span class="n">course</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">hashmap</span><span class="o">=</span><span class="p">{}</span>
    <span class="n">size</span><span class="o">=</span><span class="p">{}</span>
    <span class="k">for</span> <span class="n">order</span> <span class="ow">in</span> <span class="n">orders</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">course</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">comb</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
                <span class="n">menu</span><span class="o">=</span><span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">comb</span><span class="p">))</span>
                <span class="k">if</span> <span class="n">menu</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)</span> <span class="ow">in</span> <span class="n">size</span><span class="p">:</span>
                    <span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)],</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">menu</span><span class="p">)]</span><span class="o">=</span><span class="n">hashmap</span><span class="p">[</span><span class="n">menu</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">size</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">)]:</span>
            <span class="n">answer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/210221_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">조합을 구한다</span></strong>
    <ul>
      <li>combinations로 조합을 구한다.</li>
      <li>“XY”, “YX”는 같은 것으로 생각하기 때문에 sorted()로 오름차순 정렬한 후, join()으로 문자열을 합친다.</li>
      <li>hashmap에 menu가 있다면 하나 증가, 없다면 1을 넣어준다.</li>
      <li>size는 문자열 길이의 max를 저장한다. size에 len(menu) 값이 들어가있다면 최댓값으로 갱신, 없다면 현재 hashmap[menu]를 넣는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">조합 중 조건에 맞는 값을 리턴한다</span></strong>
    <ul>
      <li>조합 횟수가 2 이상이고 길이가 최댓값인 것만 answer에 넣는다.</li>
      <li>오름차순으로 정렬하여 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2018 KAKAO BLIND RECRUITMENT: [3차] 방금그곡</title>
	  <link>/blog//algo-prog17683</link>
	  <author></author>
	  <pubDate>2020-11-24T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog17683</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17683">https://programmers.co.kr/learn/courses/30/lessons/17683</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>i번째 음악의 재생시간을 계산한다.</li>
  <li>라디오에서 플레이할 수 있는 시간이 음악길이보다 더 짧다면 라디오 길이만큼만 cut한다.</li>
  <li>아니라면(음악이 반복될 수 있다면) 그만큼 계산한다.</li>
  <li>완성된 노래에 m이 존재한다면 list에 Node(음악이름, 재생시간) 형태로 넣는다.</li>
  <li>list에 값이 하나 이상 존재한다면 재생시간기준 내림차순 정렬한다.</li>
  <li>맨 첫 번째 값이 정답이다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">m</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">musicinfos</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">"(None)"</span><span class="o">;</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 조건 만족하는 값들 모두 저장</span>
        <span class="n">m</span><span class="o">=</span><span class="n">removeSharp</span><span class="o">(</span><span class="n">m</span><span class="o">);</span> <span class="c1">// # 제거</span>
        
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">music:</span><span class="n">musicinfos</span><span class="o">){</span>
            <span class="n">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="n">music</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">time</span><span class="o">=</span><span class="n">getTime</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span> <span class="c1">// 음악시간 가져오기</span>
            <span class="n">String</span> <span class="n">info</span><span class="o">=</span><span class="n">removeSharp</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span> <span class="c1">// # 제거</span>
            <span class="c1">// 재생 가능 시간이 음악보다 짧다면</span>
            <span class="k">if</span><span class="o">(</span><span class="n">time</span><span class="o">&lt;=</span><span class="n">info</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="n">info</span><span class="o">=</span><span class="n">info</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">time</span><span class="o">);</span>
            <span class="k">else</span><span class="o">{</span> <span class="c1">// 음악이 replay될 수 있다면</span>
                <span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="n">time</span><span class="o">/</span><span class="n">info</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="c1">// 몇번 반복 가능한지 저장</span>
                <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">info</span><span class="o">);</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">c</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">info</span><span class="o">);</span> <span class="c1">// c번 반복                </span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">time</span><span class="o">%</span><span class="n">info</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span> <span class="c1">// c반복하고 나머지도 저장</span>
                <span class="n">info</span><span class="o">=</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="c1">// 멜로디가 존재한다면 list에 add</span>
            <span class="k">if</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">m</span><span class="o">))</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">time</span><span class="o">));</span>
        <span class="o">}</span>
        
        <span class="c1">// 방금그곡을 찾았으면</span>
        <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;=</span><span class="mi">1</span><span class="o">){</span>
            <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;(){</span> <span class="c1">// 음악시간 기준 내림차순 정렬</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Node</span> <span class="n">n1</span><span class="o">,</span> <span class="n">Node</span> <span class="n">n2</span><span class="o">){</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">n1</span><span class="o">.</span><span class="na">time</span><span class="o">&gt;</span><span class="n">n2</span><span class="o">.</span><span class="na">time</span><span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">n1</span><span class="o">.</span><span class="na">time</span><span class="o">==</span><span class="n">n2</span><span class="o">.</span><span class="na">time</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="n">answer</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">name</span><span class="o">;</span> <span class="c1">// 첫번째가 정답</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">removeSharp</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">){</span> <span class="c1">// C#-&gt;c로 변환</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">before</span><span class="o">={</span><span class="s">"C#"</span><span class="o">,</span> <span class="s">"D#"</span><span class="o">,</span> <span class="s">"F#"</span><span class="o">,</span> <span class="s">"G#"</span><span class="o">,</span> <span class="s">"A#"</span><span class="o">};</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">after</span><span class="o">={</span><span class="s">"c"</span><span class="o">,</span> <span class="s">"d"</span><span class="o">,</span> <span class="s">"f"</span><span class="o">,</span> <span class="s">"g"</span><span class="o">,</span> <span class="s">"a"</span><span class="o">};</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="n">before</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">after</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTime</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">e</span><span class="o">){</span> <span class="c1">// 플레이 시간 리턴</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">ss</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">ee</span><span class="o">=</span><span class="n">e</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">sTime</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ss</span><span class="o">[</span><span class="mi">0</span><span class="o">])*</span><span class="mi">60</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ss</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
        <span class="kt">int</span> <span class="n">eTime</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ee</span><span class="o">[</span><span class="mi">0</span><span class="o">])*</span><span class="mi">60</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ee</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
        <span class="k">return</span> <span class="n">eTime</span><span class="o">-</span><span class="n">sTime</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
    <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">n</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201124_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
시간 계산에서 분 단위로 바꿔서 계산하지 않고 바로 hhmm형태로 뺐더니 테스트케이스 27, 30에서 실패했다. 예를 들어, 12:59, 13:00이면 1을 리턴해야하는데 나의 경우 41을 리턴했기 때문이다.<br />
그리고 (None)에 `도 없어야 한다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">m에서 #을 제거한다</span></strong>
    <ul>
      <li>문자 하나당 1분이 걸린다고 계산하기 위해서는 C#같이 두자리 문자도 하나로 변환해야 한다.</li>
      <li>C#-&gt;c로 변환해주자.</li>
      <li>removeSharp()에서 이 역할을 수행하고 변환된 문자열을 리턴한다.</li>
      <li>#이 붙는 경우가 정해져있으므로 before 배열에 넣고, 인덱스를 맞춰서 after에 소문자로 변환할 값을 넣는다.</li>
      <li>for문으로 s에서 before[i]가 존재한다면, replaceAll()로 after[i]로 바꾼다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">m에서 #을 제거한다</span></strong>
    <ul>
      <li>musicinfos에서 음악 정보는 문자열 하나로 이루어져있고, 그 안에서 ‘,’로 구분되므로 split()로 나눈다.</li>
      <li>getTime()을 이용해 음악의 재생시간을 time에 저장한다.</li>
      <li>getTime() 역시 :로 구분되므로 split()한 후, 분 형태로 계산하고 리턴한다.</li>
      <li>악보(array[3])도 removeSharp()로 #을 제거한다.</li>
      <li>라디오에서 플레이할 수 있는 시간(info)가 악보(time)보다 더 짧다면 info에 맞춰서 자르고 info에 저장한다.</li>
      <li>반복이 가능하다면 그만큼 반복해서 info에 저장해야한다.</li>
      <li>문자열의 삽입이 여러 번 이루어지므로 immutable한 String 클래스에서 작업을 수행하는 것보다 StringBuilder가 낫다.</li>
      <li>반복 횟수는 time/info.length()이고, 반복하고 남은 것은 나머지 연산으로 더해준다.</li>
      <li>라디오에서 플레이할 음 info에 m이 존재한다면 list에 넣는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">list를 sort해서 정답을 리턴한다</span></strong>
    <ul>
      <li>위 조건을 만족하는 노래가 하나 이상이라면, comparator로 정렬해야 한다.</li>
      <li>정렬 기준은 time이 큰 것이 앞으로 가도록 한다.</li>
      <li>time이 같을 수도 있다. 이때는 먼저 들어온 값이 우선순위를 가진다. return 0하면 자리 변화가 일어나지 않기 때문에 들어온 순서대로 놓이게 되므로 문제 없다.</li>
      <li>answer는 맨 첫번째 값이 된다.</li>
      <li>list에 값이 없다면 당연히 정렬도 하지 않고, 바로 answer의 초기값인 (None)을 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2018 KAKAO BLIND RECRUITMENT: [1차] 캐시</title>
	  <link>/blog//algo-prog17680</link>
	  <author></author>
	  <pubDate>2020-11-23T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog17680</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17680">https://programmers.co.kr/learn/courses/30/lessons/17680</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>LinkedList를 이용하여 LRU를 구현한다.</li>
  <li>앞 쪽에는 방금 참조된 것, 뒤로 갈수록 참조된 시간이 예전이다.</li>
  <li>list에 city가 있으면 제거하고 맨 앞으로 이동, 없다면 캐시크기 체크하고 뒤에 넣는다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">cities</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 캐시크기가 0이면 다 miss</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">cities</span><span class="o">.</span><span class="na">length</span><span class="o">*</span><span class="mi">5</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">city:</span><span class="n">cities</span><span class="o">){</span>
            <span class="n">city</span><span class="o">=</span><span class="n">city</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">city</span><span class="o">)){</span> <span class="c1">// list에 존재 (hit)</span>
                <span class="n">list</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">city</span><span class="o">);</span> <span class="c1">// 방금 참조되었으므로 맨 앞으로</span>
                <span class="n">answer</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span> <span class="c1">// list에 없음 (miss)</span>
                <span class="c1">// 캐시가 꽉 찼으면 맨 뒤를 삭제</span>
                <span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="n">cacheSize</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
                <span class="n">list</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
                <span class="n">answer</span><span class="o">+=</span><span class="mi">5</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201123_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
HashMap과 배열을 써야하나 했는데 간단한 방법이 있었다</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">LinkedList로 LRU를 구현한다</span></strong>
    <ul>
      <li>LRU는 가장 예전에 참조된 것을 삭제하는 것이다.</li>
      <li>list의 앞으로 갈수록 최근에 참조된 것, 뒤로 갈수록 예전에 참조된 것으로 한다.</li>
      <li>list.remove(city)로 city가 리스트에 있는지 확인한다. 있다면 삭제한 후 true를 리턴받는다.</li>
      <li>true는 list에 있어서 삭제했다는 뜻이므로 방금 참조했으므로 addFirst(city)로 맨 앞으로 옮긴다. 또한 hit이므로 answer+=1.</li>
      <li>false는 캐시에 없으므로 miss라는 뜻이다. 캐시가 꽉 찼는지 list.size()==cacheSize로 확인한다.</li>
      <li>꽉 찼다면 맨 뒤에가 참조가 예전에 된 것이므로 pollLast()로 지운다. 참고로 그냥 poll(), pop()은 맨 앞을 지우는 메소드이다.</li>
      <li>city를 방금 참조했으므로 맨 앞에 삽입한다.</li>
      <li>miss니까 answer+=5</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 캐시 (Java) <a href="https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BA%90%EC%8B%9C-Java">https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BA%90%EC%8B%9C-Java</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2018 KAKAO BLIND RECRUITMENT: [1차] 프렌즈4블록</title>
	  <link>/blog//algo-prog17679</link>
	  <author></author>
	  <pubDate>2020-11-17T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog17679</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17679">https://programmers.co.kr/learn/courses/30/lessons/17679</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>(i, j)에서 오른쪽, 아래, 오른쪽 대각선 밑이 같은 알파벳인지 체크한다.</li>
  <li>4개가 모두 같다면 visit를 true로 바꾼다.</li>
  <li>visit 배열을 열 방향으로 탐색하면서 true인 곳을 answer++한다.</li>
  <li>true인 곳을 위의 값으로 대체한다. 대체값은 ‘0’으로 바꾼다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
    <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">answer</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 초기화</span>
        <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
            <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">toCharArray</span><span class="o">();</span>
        
        <span class="c1">// 맵이 더 이상 변경 없을 때까지 반복</span>
        <span class="k">while</span><span class="o">(</span><span class="n">checkMap</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">)){</span> <span class="c1">// 4개 블록이 있는지 체크</span>
            <span class="n">dropMap</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span> <span class="c1">// 있다면 그 부분 지우고 블록 drop</span>
        <span class="o">}</span>        
        
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
        <span class="kt">boolean</span> <span class="n">flag</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span> <span class="c1">// 맵의 변경가능 유무 체크</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="sc">'0'</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span> <span class="c1">// 빈 블록</span>
                <span class="kt">char</span> <span class="n">val</span><span class="o">=</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// 비교 대상</span>
                <span class="c1">// 오른쪽, 아래, 대각선이 모두 val과 같다면</span>
                <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]==</span><span class="n">val</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">val</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]==</span><span class="n">val</span><span class="o">){</span>
                    <span class="n">flag</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span> <span class="c1">//  맵 변경가능</span>
                    <span class="c1">// 없앨 위치를 모두 true로 변경</span>
                    <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dropMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span> <span class="c1">// 열 기준</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span> <span class="c1">// 위에서 아래로</span>
                <span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]){</span> <span class="c1">// 없애야하는 블록</span>
                    <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span> <span class="c1">// 체크했으니까 다시 초기화</span>
                    <span class="n">answer</span><span class="o">++;</span> <span class="c1">// 없애는 블록 카운트</span>
                    <span class="c1">// drop</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">i</span><span class="o">;</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">;</span><span class="n">k</span><span class="o">--){</span>
                        <span class="n">map</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">map</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">];</span> <span class="c1">// 내 위치(빈 블록)은 바로 위에 값으로 대체</span>
                        <span class="n">map</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="sc">'0'</span><span class="o">;</span> <span class="c1">// 새로 채워지는 블록은 '0'으로 표시</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201117_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
DFS로 구현해야하나 했는데 아니었음</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">map에서 2x2가 있는지 찾는다</span></strong>
    <ul>
      <li><strong>checkMap()</strong></li>
      <li>flag를 통해 맵이 변경될 수 있는지 체크한다. false라면 더 이상 맵의 변경은 없으므로 while문을 탈출하고 answer을 리턴한다.</li>
      <li>이중for문으로 배열을 탐색한다.</li>
      <li>맵이 변경을 반복하면 맵에는 빈 블록이 있을 수 있다. 이를 ‘0’으로 표현한다. map[i][j]==’0’이면 빈 블록이므로 continue를 통해 패스한다.</li>
      <li>val에 (i, j)의 값을 저장한다. (i, j)를 기준으로 오른쪽, 아래, 대각선 밑이 같은 값(val)을 가지는지 체크한다.</li>
      <li>다 같은 값이라면 2x2를 만족하므로 flag=true로 바꾼다.</li>
      <li>visit배열에 4개의 위치를 true로 바꾸어서 그 위치 값들은 없애야 함을 표시한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">2x2를 없애고 map을 재배열한다</span></strong>
    <ul>
      <li><strong>dropMap()</strong></li>
      <li>이번에는 map 탐색을 열 기준으로 위에서 아래로 훑는다.</li>
      <li>visit[i][j]가 true라면 map[i][j]를 바로 위의 값 map(i-1, j)로 바꿔야 한다는 뜻이다.</li>
      <li>일단 (i, j)를 처리할 것이니까 visit[i][j]=false로 바꾸어서 다음에 checkMap()을 호출했을 때 문제가 되지 않도록 초기화한다.</li>
      <li>또한, 없애야하는 블록이므로 answer++하여 그 개수를 센다.</li>
      <li>for문 인덱스 k를 이용해 블록을 하나씩 떨어트린다.</li>
      <li>k=i부터 시작하여 1까지 간다. (k, j)를 (k-1, j)로 바꿔서 위에 값을 끌어온다(drop).</li>
      <li>(k-1, j)는 ‘0’으로 바꾼다. drop하면서 맨 위에 블록은 빈 블록으로 채우기 때문이다. (k-1, j)가 꼭대기가 아닌 중간값이라도 상관없다. 다음 for문에서 다시 위에 값으로 덮어 씌우기 때문이다.</li>
      <li>최종적으로 drop이 수행되고, 맨 위에는 ‘0’ 빈 블록으로 채워지게 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 프렌즈4블록 (Java) <a href="https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D-Java">https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D-Java</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2018 KAKAO BLIND RECRUITMENT: [1차] 뉴스 클러스터링</title>
	  <link>/blog//algo-prog17677</link>
	  <author></author>
	  <pubDate>2020-11-15T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog17677</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17677">https://programmers.co.kr/learn/courses/30/lessons/17677</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>str를 소문자로 변환한다.</li>
  <li>for문으로 문자열을 두 글자씩 끊어서 ArrayList에 저장한다.</li>
  <li>list1 원소가 list2에 존재하면, 그 원소는 교집합이므로 inter에 넣고, list2에서는 뺀다.</li>
  <li>inter.size()가 교집합 개수이고, list1.size()+list2.size()가 합집합이 된다.</li>
  <li>자카드 유사도를 리턴한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">str1</span><span class="o">,</span> <span class="n">String</span> <span class="n">str2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// 소문자 변환</span>
        <span class="n">str1</span><span class="o">=</span><span class="n">str1</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
        <span class="n">str2</span><span class="o">=</span><span class="n">str2</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
        
        <span class="c1">// 두 글자씩 끊어서 저장</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span><span class="o">=</span><span class="n">splitTwoWord</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span><span class="o">=</span><span class="n">splitTwoWord</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list1</span><span class="o">);</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
        
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">inter</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 교집합</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">s:</span><span class="n">list1</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">list2</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">)){</span> <span class="c1">// 교집합 원소</span>
                <span class="n">inter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
                <span class="n">list2</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="kt">double</span> <span class="n">union</span><span class="o">=</span><span class="n">list1</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="n">list2</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="c1">// 합집합 개수</span>
        <span class="k">if</span><span class="o">(</span><span class="n">union</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="n">answer</span><span class="o">=</span><span class="mi">65536</span><span class="o">;</span> <span class="c1">// division by zero 예외처리</span>
        <span class="k">else</span> <span class="n">answer</span><span class="o">=(</span><span class="kt">int</span><span class="o">)(</span><span class="n">inter</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="n">union</span><span class="o">*</span><span class="mi">65536</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">splitTwoWord</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">){</span>
        <span class="c1">// for문으로 i, i+1을 result에 저장</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="c1">// 둘 다 알파벳인지 체크</span>
            <span class="k">if</span><span class="o">(</span><span class="n">isAlpha</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="n">isAlpha</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)))</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="s">""</span><span class="o">+</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAlpha</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span><span class="o">){</span> <span class="c1">// ch가 알파벳이면 true 리턴</span>
        <span class="k">if</span><span class="o">(</span><span class="sc">'a'</span><span class="o">&lt;=</span><span class="n">ch</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span><span class="o">&lt;=</span><span class="sc">'z'</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201115_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">두 글자씩 끊어서 ArrayList에 저장한다</span></strong>
    <ul>
      <li>대문자, 소문자 차이는 무시하므로 맨 처음에 toLowerCase()로 str를 모두 소문자로 바꾼다.</li>
      <li>splitTwoWord()로 i, i+1이 모두 영문자라면 두 char형을 String으로 합쳐 result에 넣는다.</li>
      <li>영문자인지 체크하는 것은 isAlpha()를 이용한다.</li>
      <li>두 글자씩 끊은 문자열은 중복이 허용되므로 Hash를 이용할 수 없다.</li>
      <li>뒤에서 교집합을 찾는 것이 좀 더 수월하도록 오름차순 정렬하였다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">교집합을 구한다</span></strong>
    <ul>
      <li>list1의 원소가 list2에 존재하는지 contains()로 확인한다.</li>
      <li>존재한다면 그 원소는 교집합 원소가 될 수 있으므로 inter에 넣고, list2에서는 제거한다.</li>
      <li>list2에서 교집합 원소를 빼고 최종적으로 B-A(차집합) 원소들만 남게 할 것이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">자카드 유사도를 구한다</span></strong>
    <ul>
      <li>for문으로 교집합 원소를 구하면, 합집합 개수는 list1.size()+list2.size()이다.</li>
      <li>str1, str2 집합이 공집합인 경우도 체크해야 한다(테스트4).</li>
      <li>테스트4에서 str1, str2은 공집합이 되는데, answer이 65536이 된다는 뜻은 자카드 수가 1이라는 뜻이다. 따라서, union이 0이면 answer은 65536이 되도록 예외 처리한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 뉴스 클러스터링 (Java) <a href="https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%89%B4%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81-Java">https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%89%B4%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81-Java</a></li>
  <li>카카오 신입 공채 1차 코딩 테스트 문제 해설 <a href="https://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/">https://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2017 팁스다운: 예상 대진표</title>
	  <link>/blog//algo-prog12985</link>
	  <author></author>
	  <pubDate>2020-11-14T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog12985</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12985">https://programmers.co.kr/learn/courses/30/lessons/12985</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>x가 짝수라면 다음 라운드에서 x는 x/2 번째가 된다.</li>
  <li>홀수라면 x/2+1가 된다.</li>
  <li>a, b가 같아질 때까지 진행한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">a</span><span class="o">!=</span><span class="n">b</span><span class="o">){</span>
            <span class="n">a</span><span class="o">=</span><span class="n">solve</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
            <span class="n">b</span><span class="o">=</span><span class="n">solve</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="n">answer</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201114_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">a, b가 다음 라운드에서 몇 번째가 되는지 예상한다.</span></strong>
    <ul>
      <li>짝수라면 다음 라운드에서는 x/2, 홀수라면 x/2+1 번째가 된다.</li>
      <li>둘이 같아질 때까지 반복한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

	  ]]></description>
	</item>


</channel>
</rss>
