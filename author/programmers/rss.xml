<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/프로그래머스] 연습문제: 124 나라의 숫자</title>
	  <link>/blog//algo-boj12899</link>
	  <author></author>
	  <pubDate>2020-10-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj12899</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12899">https://programmers.co.kr/learn/courses/30/lessons/12899</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>숫자를 3으로 나누며 나머지에 따라 적절한 숫자를 붙인다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">s</span><span class="o">={</span><span class="s">"4"</span><span class="o">,</span><span class="s">"1"</span><span class="o">,</span><span class="s">"2"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">rest</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="c1">// 나머지</span>
        <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="n">rest</span><span class="o">=</span><span class="n">n</span><span class="o">%</span><span class="mi">3</span><span class="o">;</span>
            <span class="n">n</span><span class="o">/=</span><span class="mi">3</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rest</span><span class="o">==</span><span class="mi">0</span><span class="o">){</span> <span class="c1">// 나머지가 0이면 n--</span>
                <span class="n">n</span><span class="o">-=</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
           <span class="n">sb</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">[</span><span class="n">rest</span><span class="o">]);</span> <span class="c1">// 문자열 맨 앞에 추가</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201021_2.PNG" alt="실행결과" />
🤟 성공 🤟<br />
처음에 중복 순열, 나름 dp로 문제를 풀었으나 효율성에서 죄다 0점을 맞아… 다른 사람의 코드를 참고하였다. 하긴 n이 5억 이하니까 규칙이 있어야만 한다(?).</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">n을 3으로 나머지 연산한다</span></strong>
    <ul>
      <li>n=1일때 124연산 값은 1이다. n%3=1이므로 나머지가 1이 되면 124연산에서 1을 사용함을 알 수 있따. 2도 같은 방식이다.</li>
      <li>n=3이면 나머지가 0인데, 이때 124연산에서는 4를 채택한다. 따라서 배열 인덱스 번호에 맞게 {4,1,2}를 저장하고 코드 수행 나머지에 맞는 인덱스 번호를 찾아 값을 사용하면 된다.</li>
      <li>또한, 나머지가 0이면 다음 계산에서 조금 변경이 필요하다. n=6이면 rest(나머지)=6%3=0이므로 4를 채택하고, n은 2(n/3)로 갱신된다. 이를 다시 나머지 연산하면 2를 채택하므로 틀린다. 2가 아닌 그 전의 값을 가져와야 한다. 따라서 n-=1로 하나 줄여야 한다.</li>
      <li>수행되는 값은 sb의 맨 앞에 계속 붙여야 한다. 따라서 sb.insert() 메소드를 이용한다. 메소드의 첫 번째 파라미터는 붙일 인덱스 위치(우리는 맨 앞에 붙이는 것이니까 0), 다음은 붙일 값이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2017 카카오코드 예선: 카카오프렌즈 컬러링북</title>
	  <link>/blog//algo-prog1829</link>
	  <author></author>
	  <pubDate>2020-10-21T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog1829</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/1829">https://programmers.co.kr/learn/courses/30/lessons/1829</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS로 배열을 순회하며 영역 개수를 센다.</li>
  <li>picture 크기와 같은 int형 visit 배열을 생성하고, 위치를 방문했을 때 picture값을 넣어 중복 탐색을 방지한다.</li>
  <li>영역별로 체크가 끝날 때 마다 max에 영역 개수의 최대값을 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">;</span> <span class="c1">// 방문 체크 배열</span>
    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span> <span class="c1">// 영역별 넓이 저장</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="n">max</span><span class="o">;</span> <span class="c1">// 탐색하고 있는 영역의 넓이, 전체 영역 넓이 중 최대값</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">dotX</span><span class="o">={</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">dotY</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">picture</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        
        <span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
                <span class="c1">// 색깔이 있고 방문하지 않는 곳이면 해당 영역 찾기</span>
                <span class="k">if</span><span class="o">(</span><span class="n">picture</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="mi">0</span><span class="o">){</span>
                    <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
                    <span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">picture</span><span class="o">);</span>
                    <span class="c1">// 영역 탐색 완료 후 max, list에 값 저장</span>
                    <span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>        
        
        <span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">picture</span><span class="o">){</span>
        <span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="n">picture</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span> <span class="c1">// 방문했음을 표시</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span> <span class="c1">// 사방으로 갈 수 있는 좌표 계산</span>
            <span class="kt">int</span> <span class="n">xx</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">dotX</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">yy</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="n">dotY</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(</span><span class="n">xx</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">xx</span><span class="o">&gt;=</span><span class="n">m</span> <span class="o">||</span> <span class="n">yy</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">yy</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span> <span class="c1">// 범위 초과</span>
            <span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]!=</span><span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span> <span class="c1">// 방문한 곳이면 패스</span>
            <span class="k">if</span><span class="o">(</span><span class="n">picture</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]==</span><span class="n">picture</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]){</span> <span class="c1">// 현재 탐색 영역과 색깔이 같다면</span>
                <span class="n">cnt</span><span class="o">++;</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">xx</span><span class="o">,</span> <span class="n">yy</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">picture</span><span class="o">);</span> <span class="c1">// 이동</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201021_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>배열의 영역을 구하는 문제는 주로 DFS를 이용한다.</li>
      <li>picture 값 별로 같은 영역을 구해야 하므로 visit 배열을 int형으로 선언하여, 방문한 곳이면 picture 값(색깔)을 저장한다.</li>
      <li>dotX, dotY 배열을 통해 상하좌우로 이동할 수 있는 좌표를 저장한다.</li>
      <li>for문으로 상하좌우 좌표를 계산하고, 배열 범위와 방문한 곳인지를 체크한다.</li>
      <li>탐색하는 영역의 색깔과 같다면(picture[i][j]), 영역이 늘어났으므로 cnt++하고 재귀 호출을 통해 그 곳으로 이동한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">main에서 picture을 순회하며 색깔이 있고 방문하지 않은 영역을 찾아 dfs를 호출한다</span></strong>
    <ul>
      <li>이중 for문을 통해 picture의 모든 원소를 탐색하지만, visit로 방문 여부를 체크하였기 때문에 같은 곳을 두 번 이상 dfs를 사용하는 경우는 없다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/SWEA] 3135: 홍준이의 사전놀이</title>
	  <link>/blog//algo-swea3135</link>
	  <author></author>
	  <pubDate>2020-09-15T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-swea3135</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV_6pTXqsXUDFAWS&amp;categoryId=AV_6pTXqsXUDFAWS&amp;categoryType=CODE">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV_6pTXqsXUDFAWS&amp;categoryId=AV_6pTXqsXUDFAWS&amp;categoryType=CODE</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>트라이를 이용한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserSolution</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="n">Trie</span><span class="o">[]</span> <span class="n">tries</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">tries</span><span class="o">=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">buffer_size</span><span class="o">,</span> <span class="n">String</span> <span class="n">buf</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">root</span><span class="o">=</span><span class="n">buf</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
        <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">].</span><span class="na">insert</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">query</span><span class="o">(</span><span class="kt">int</span> <span class="n">buffer_size</span><span class="o">,</span> <span class="n">String</span> <span class="n">buf</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">root</span><span class="o">=</span><span class="n">buf</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">tries</span><span class="o">[</span><span class="n">root</span><span class="o">].</span><span class="na">getCnt</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Trie</span><span class="o">{</span>
    <span class="n">Node</span> <span class="n">root</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">root</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">root</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
            <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCnt</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">root</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> 
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">cnt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200915_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Usersolution</span></strong>
    <ul>
      <li>init(): Trie[] 배열을 초기화한다. 인덱스 0번부터 a로 쓸 것이므로 배열 사이즈를 26으로 초기화했다.</li>
      <li>insert(): 문자열 buf의 시작 알파벳 아스키코드를 root에 저장한다. 배열 trie에 해당 알파벳으로 시작한 단어가 없다면, 트라이 객체를 하나 선언한 후, Trie클래스의 insert()를 호출한다.</li>
      <li>query(): buf의 시작 알파벳을 찾아 root에 저장한다. 해당 배열이 null이라면 root로 시작하는 단어가 없어서 객체 선언이 안된것이므로 0을 리턴한다. 아닐 경우, getCnt()로 개수를 받아 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Trie</span></strong>
    <ul>
      <li>Trie(): 생성자이다. 시작 노드(root)를 만든다.</li>
      <li>insert(): node는 트라이 내에서 현재 내 위치이다. word의 문자를 하나씩 체크해 트라이에 저장한다. 현재 node의 자식들(해시맵)에 word.charAt(i)가 있는지 확인한다. 없다면 하나 생성 후, 거기로 내려간다. 현재 삽입한(또는 기존에 존재하는) node까지 단어가 일치하는 것이므로 node.cnt++한다.</li>
      <li>getCnt(): node로 트리를 이동한다. query의 문자를 하나씩 체크하며, 현재 위치 node의 자식 노드들 중 i값이 없다면 query 단어가 없는 것이므로 0을 리턴한다. for문을 종료해야 그곳 node.cnt를 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Node</span></strong>
    <ul>
      <li>children은 node의 자식 노드들을 해시맵으로 저장한다. 중복을 거르고 빠르게 찾을 수 있도록 해시맵을 사용한다.</li>
      <li>cnt는 현재 node까지 일치하는 단어의 개수이다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[JAVA/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 가사 검색 <a href="https://iamheesoo.github.io/blog//algo-prog60060">https://iamheesoo.github.io/blog//algo-prog60060</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/SWEA] 9780: 외계인 침공</title>
	  <link>/blog//algo-swea9780</link>
	  <author></author>
	  <pubDate>2020-09-15T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-swea9780</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AXE0gpIa3dADFAVX">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AXE0gpIa3dADFAVX</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DP를 이용한다.</li>
  <li>시간 제한 때문에 DP를 배열이 아닌 변수를 이용해 문제를 풀어야 한다.</li>
  <li>Scanner 대신 BufferedReader를 사용해 실행 시간을 줄인다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span>
<span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">IOException</span>
	<span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="kt">int</span> <span class="n">T</span><span class="o">;</span>
		<span class="n">T</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">test_case</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">test_case</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="o">;</span> <span class="n">test_case</span><span class="o">++)</span>
		<span class="o">{</span>
			<span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="kt">long</span> <span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">one</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">two</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="n">answer</span><span class="o">=</span><span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">one</span><span class="o">=</span><span class="n">answer</span><span class="o">;</span>
				<span class="n">two</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">one</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
				<span class="n">answer</span><span class="o">=</span><span class="n">two</span><span class="o">;</span><span class="c1">//n==2인 경우를 위함</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
					<span class="kt">long</span> <span class="n">num</span><span class="o">=</span><span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
					<span class="n">answer</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">one</span><span class="o">+</span><span class="n">num</span><span class="o">,</span> <span class="n">two</span><span class="o">);</span>
					<span class="n">one</span><span class="o">=</span><span class="n">two</span><span class="o">;</span>
					<span class="n">two</span><span class="o">=</span><span class="n">answer</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"#"</span><span class="o">+</span><span class="n">test_case</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">answer</span><span class="o">);</span>
		<span class="o">}</span>
        <span class="k">return</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200915_1.PNG" alt="실행결과" />
🤟 성공 🤟<br />
초기에는 DP를 배열로 풀어서 시간 초과가 발생하였다. 이후 런타임 에러는 마지막에 main 마지막에 return을 추가하고, long으로 입력받아야 하는 곳을 수정하고, main에 throws IOException을 추가해서 해결했다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP를 이용한다</span></strong>
    <ul>
      <li>dp[i]=Math.max(dp[i-2]+a[i], dp[i-1]), i번째를 침공할 때 개구리의 최대값이다.</li>
      <li>dp[1]=a[1]: 침공할 곳이 하나밖에 없으므로</li>
      <li>dp[2]=Math.max(a[1], a[2]): 1과 2 중 더 큰 값을 쓴다</li>
      <li>dp[3]=Math.max(a[1]+a[3], a[2]): 1을 침공하면 3, 3은 1을 쓸 수 있고, 아니면 2 하나만 선택할 수도 있다</li>
      <li>dp[4]=Math.max(a[1]+a[3], a[2]+a[4], a[1]+a[4]) <br />
== max(dp[3], max(a[2], a[1])+a[4]) <br />
== max(dp[3], dp[2]+a[4]) <br /></li>
      <li>그런데 이 문제는 배열을 사용하면 시간 초과가 발생한다. 따라서 dp대신 변수 answer, one, two를 사용한다.</li>
      <li>answer은 i일때 값, one은 i-1, two는 i-2 값을 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">실행 시간을 줄인다</span></strong>
    <ul>
      <li>Scanner보다 BufferedReader 속도가 더 빠르므로 이를 사용한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[SWEA] 9780 외계인 침공 <a href="https://octorbirth.tistory.com/393">https://octorbirth.tistory.com/393</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2019 KAKAO BLIND RECRUITMENT : 길 찾기 게임</title>
	  <link>/blog//algo-prog42892</link>
	  <author></author>
	  <pubDate>2020-09-13T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42892</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42892">https://programmers.co.kr/learn/courses/30/lessons/42892</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>x, y, value를 가지는 Node로 바꾸어 배열에 저장한 후, y 기준으로 내림차순 정렬한다. y가 같다면 x가 더 작은 것이 앞으로 온다.</li>
  <li>Node의 left, right를 이용하여 트리를 만든다.</li>
  <li>전위 순회와 후위 순회를 진행한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nodeinfo</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="n">nodeinfo</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nodeinfo</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">nodeinfo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">],</span> <span class="n">nodeinfo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;(){</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Node</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Node</span> <span class="n">o2</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">y</span><span class="o">&lt;</span><span class="n">o2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">y</span><span class="o">==</span><span class="n">o2</span><span class="o">.</span><span class="na">y</span><span class="o">){</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">x</span><span class="o">&lt;</span><span class="n">o2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                    <span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
		<span class="n">Node</span> <span class="n">root</span><span class="o">=</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">insert</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="n">preorder</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">answer</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">result</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
		<span class="n">postorder</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">answer</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">Node</span> <span class="n">root</span><span class="o">,</span> <span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">x</span><span class="o">&gt;</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">insert</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">node</span><span class="o">);</span>
			<span class="k">else</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">=</span><span class="n">node</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">insert</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">node</span><span class="o">);</span>
			<span class="k">else</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">=</span><span class="n">node</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">preorder</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">preorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">preorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postorder</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">postorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">postorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
    <span class="n">Node</span> <span class="n">left</span><span class="o">;</span>
    <span class="n">Node</span> <span class="n">right</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">y</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">=</span><span class="n">v</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">left</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">right</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200913_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Node 클래스를 만든 후 배열에 넣어 정렬한다</span></strong>
    <ul>
      <li>x, y는 각 좌표, value는 노드 값이다.</li>
      <li>left, right를 통해 자식 노드와 연결한다.</li>
      <li>Comparator을 이용하여 정렬한다.</li>
      <li>중위 순회한 값 순서대로 저장되도록, y의 값이 클 수록 앞으로 온다. y가 같다면 x가 작은 것이 앞으로 온다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">트리를 만든다</span></strong>
    <ul>
      <li>insert()를 통해 트리를 만든다. root는 현재 내 위치이고, node는 새로 삽입할 값이다.</li>
      <li>현재 root보다 node의 x가 작다면 재귀를 통해 root의 left로 간다. 반대라면 right로 간다.</li>
      <li>가야할 곳이 null이라면 그 곳에 node를 넣는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">전위순회와 후위순회를 하여 결과를 저장한다</span></strong>
    <ul>
      <li>전위 순회는 preorder에서, 후위 순회는 postorder에서 한다.</li>
      <li>결과를 result에 저장하기 위해 ArrayList를 파라미터로 계속 넘겨준다.</li>
      <li>result에 값이 들어오면 answer에 넣는다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>2019 카카오 블라인드 코딩테스트 (프로그래멋, Java, 길 찾기 게임) <a href="https://eoghks0521.tistory.com/entry/2019-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Java-%EA%B8%B8-%EC%B0%BE%EA%B8%B0-%EA%B2%8C%EC%9E%84">https://eoghks0521.tistory.com/entry/2019-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%B8%94%EB%9D%BC%EC%9D%B8%EB%93%9C-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Java-%EA%B8%B8-%EC%B0%BE%EA%B8%B0-%EA%B2%8C%EC%9E%84</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2019 KAKAO BLIND RECRUITMENT : 후보키</title>
	  <link>/blog//algo-prog42890</link>
	  <author></author>
	  <pubDate>2020-09-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42890</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42890">https://programmers.co.kr/learn/courses/30/lessons/42890</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>비트마스킹을 이용하여 애트리뷰트를 선택하는 조합을 모두 구한다.</li>
  <li>AND 연산을 이용하여 최소성을 검사한다.</li>
  <li>유일성을 검사하기 위해 레코드별로 선택한 애트리뷰트의 값을 str에 연결하고, 해시맵을 통해 중복을 확인한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[][]</span> <span class="n">relation</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">col</span><span class="o">=</span><span class="n">relation</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">col</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">isMinimal</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">result</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">isUnique</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">relation</span><span class="o">))</span> <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isUnique</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span><span class="o">[][]</span> <span class="n">relation</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="nl">record:</span><span class="n">relation</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">record</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// record에서 애트리뷰트 선택 조합</span>
				<span class="k">if</span><span class="o">((</span><span class="n">key</span> <span class="o">&amp;</span> <span class="o">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">))</span> <span class="o">!=</span><span class="mi">0</span> <span class="o">)</span> <span class="n">str</span><span class="o">+=</span><span class="n">record</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="k">else</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">str</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMinimal</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">item:</span><span class="n">list</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">((</span><span class="n">item</span><span class="o">&amp;</span><span class="n">key</span><span class="o">)==</span><span class="n">item</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200910_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">비트마스킹을 이용하여 애트리뷰트를 선택할 수 있는 조합을 구한다</span></strong>
    <ul>
      <li>각 애트리뷰트는 선택하거나 하지 않을 두 가지 경우가 있으므로 가능한 경우의 수는 2^n-1이다(아무것도 선택하지 않는 것은 제외).</li>
      <li>왼쪽 시프트 연산을 이용하여 조합을 만들고 체크한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">최소성을 검사한다</span></strong>
    <ul>
      <li>isMinimal()에서 진행한다.</li>
      <li>파라미터 list는 후보키들이 들어있다.</li>
      <li>만약 애트리뷰트 A,B가 후보키라면 A,B,C는 불가능하다. 즉, key에 후보키로 이루어진 값이 있는지 확인해야 한다.</li>
      <li>이것은 각 자리수별로 AND연산을 하여 후보키와 같은 값이 나오는지 확인하면 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">유효성을 검사한다</span></strong>
    <ul>
      <li>record마다 애트리뷰트 값 들을 찾아 str에 저장하고, 해시맵을 이용하여 중복되는 것이 하나라도 있으면 false를 리턴한다.</li>
      <li>i는 애트리뷰트 0번째 인덱스부터 끝까지 순회한다.</li>
      <li><code class="highlighter-rouge">1&lt;&lt;i</code>를 이용하여 애트리뷰트를 선택한다. 1, 10, 100, …와 같은 값을 가지므로 1인 곳이 현재 선택된 애트리뷰트다.</li>
      <li>현재 체크하고 있는 애트리뷰트 i가 key에 포함되어 있는 것이라면 str에 추가한다.</li>
      <li>str 생성이 끝나면 map을 확인하여 중복을 체크한다. 중복되는 것이 있다면 뒤의 경우는 볼 필요도 없으므로 false를 리턴한다.</li>
      <li>없다면 다음 중복 체크를 위해 put한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">result에 후보키를 저장한다</span></strong>
    <ul>
      <li>두 메소드를 모두 통과하였다면 result에 저장한다.</li>
      <li>이후 isMinimal()에서 다시 사용하며, result 사이즈가 총 후보키의 개수와 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 후보키 (Java) <a href="https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%9B%84%EB%B3%B4%ED%82%A4-Java">https://velog.io/@hyeon930/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%9B%84%EB%B3%B4%ED%82%A4-Java</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 연습문제: 2xn 타일링</title>
	  <link>/blog//algo-prog12900</link>
	  <author></author>
	  <pubDate>2020-09-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog12900</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/12900">https://programmers.co.kr/learn/courses/30/lessons/12900</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>n이 60,000이하의 자연수이기 때문에 DFS로 모든 경우를 체크할 수는 없다.</li>
  <li>DP를 이용해 점화식을 구해 문제를 해결한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">==</span><span class="mi">1</span> <span class="o">||</span> <span class="n">n</span><span class="o">==</span><span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">mod</span><span class="o">=</span><span class="mi">1000000007</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">dp</span><span class="o">[</span><span class="mi">2</span><span class="o">]=</span><span class="mi">2</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">])%</span><span class="n">mod</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]%</span><span class="n">mod</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200904_2.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP를 이용한다</span></strong>
    <ul>
      <li>타일은 <code class="highlighter-rouge">dp[i]=dp[i-1]+dp[i-2]</code>을 만족한다.</li>
      <li>이때 더할 때 mod로 나눠 int형 범위를 초과하지 않게 하고, 계산 속도를 줄인다(숫자가 커질수록 계산하는데 시간이 많이 걸린다).</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 해시: 베스트앨범</title>
	  <link>/blog//algo-prog42579</link>
	  <author></author>
	  <pubDate>2020-09-04T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42579</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42579">https://programmers.co.kr/learn/courses/30/lessons/42579</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>노래를 Music형으로 배열에 저장한다.</li>
  <li>해시맵을 이용해 장르별 노래 재생 횟수를 구한 후, 재생 횟수에 따라 내림차순 정렬한다.</li>
  <li>가장 많이 재생된 장르부터 각 장르별 많이 재생된 두 곡의 인덱스를 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">genres</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">plays</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Music</span><span class="o">[]</span> <span class="n">music</span><span class="o">=</span><span class="n">setMusic</span><span class="o">(</span><span class="n">genres</span><span class="o">,</span> <span class="n">plays</span><span class="o">);</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">sortGenres</span><span class="o">=</span><span class="n">getGenres</span><span class="o">(</span><span class="n">genres</span><span class="o">,</span> <span class="n">plays</span><span class="o">);</span>
		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">sg:</span><span class="n">sortGenres</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;</span> <span class="n">temp</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
			<span class="k">for</span><span class="o">(</span><span class="n">Music</span> <span class="nl">m:</span><span class="n">music</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">genres</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">sg</span><span class="o">))</span> <span class="o">{</span>
					<span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">temp</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">idx</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="n">Music</span><span class="o">[]</span> <span class="nf">setMusic</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">genres</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">plays</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="n">genres</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		<span class="n">Music</span><span class="o">[]</span> <span class="n">musics</span><span class="o">=</span><span class="k">new</span> <span class="n">Music</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> 
			<span class="n">musics</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="k">new</span> <span class="n">Music</span><span class="o">(</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">,</span> <span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		
		<span class="k">return</span> <span class="n">musics</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getGenres</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">genres</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">plays</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="n">genres</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">key</span><span class="o">=</span><span class="n">genres</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="kt">int</span> <span class="n">value</span><span class="o">=</span><span class="n">plays</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">)+</span><span class="n">value</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">tree</span><span class="o">=</span><span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
		<span class="k">for</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="nl">entry:</span><span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">tree</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="n">String</span><span class="o">[]</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">tree</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
		<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nl">entry:</span><span class="n">tree</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">result</span><span class="o">;</span>
	<span class="o">}</span>
	
	
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Music</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Music</span><span class="o">&gt;{</span>
	<span class="n">String</span> <span class="n">genres</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">times</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Music</span><span class="o">(</span><span class="n">String</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">genres</span><span class="o">=</span><span class="n">g</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">times</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Music</span><span class="o">(</span><span class="n">String</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">genres</span><span class="o">=</span><span class="n">g</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">idx</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">times</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Music</span> <span class="n">m1</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">times</span><span class="o">&lt;</span><span class="n">m1</span><span class="o">.</span><span class="na">times</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">times</span><span class="o">==</span><span class="n">m1</span><span class="o">.</span><span class="na">times</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200904_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">genres와 plays를 이용해 Music형으로 노래를 저장한다</span></strong>
    <ul>
      <li>setMusic() 메소드로 구현하였다.</li>
      <li>Music 클래스를 선언한다. genres는 장르, idx는 고유 인덱스 번호, times는 재생 횟수이다.</li>
      <li>생성자는 파라미터를 두 개 가지는 것과 세 개 가지는 것이 있다. 첫 번째는 장르별 가장 많이 재생된 것을 구할 때 사용하기 위함이고, 두 번째는 노래 한 곡을 저장하는 생성자이다. compareTo()는 Music형 클래스를 정렬할 때 재생 횟수에 따라 내림차순 정렬한다.</li>
      <li>setMusic()에서 i번째 노래를 Music형으로 객체를 생성해 배열에 저장한 후 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">가장 많이 재생된 장르순을 구한다</span></strong>
    <ul>
      <li>해시맵을 통해 장르별 총 재생 횟수를 구한다. getOrDefault()를 통해 key에 대해 기존 value가 없으면 0을 주어 현재 value를 더한다.</li>
      <li>해시맵으로 장르별 총 재생 횟수를 구하면, TreeMap을 이용해 재생 횟수 기준 내림차순 정렬한다. 해시맵에서는 정렬이 불가하기 때문에 TreeMap을 사용하며, key 기준으로 정렬하기 때문에 해시맵에서 TreeMap으로 값을 전달 및 저장할 때 key와 value 순서를 바꾼다. key는 중복되면 안되는데, 문제 조건에서 장르별 총 재생 횟수는 중복되지 않는다고 했으므로 데이터가 손실되지 않는다. 내림차순 정렬을 위해 Collections.reverseOrder()을 이용한다.</li>
      <li>TreeMap에 해시맵 값을 넣으면 재생 횟수 내림차순으로 정렬되고, 하나씩 빼서 String[]에 장르를 저장, 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">장르별 가장 많이 재생한 노래를 두 개 저장한다</span></strong>
    <ul>
      <li>ArrayList<Integer> list에 장르 순서대로 인덱스를 저장한다.</Integer></li>
      <li>정렬된 장르 sortGenres[]에서 순서대로 장르를 뽑고, music[]을 모두 체크하며 특정 장르를 모두 뽑아 temp에 저장한 후, Collections.sort()로 재생 횟수 기준 내림차순 정렬한다. temp에서 정렬된 기준으로 인덱스를 최대 2개 뽑아 list에 저장한다.</li>
      <li>list는 Integer형이고, 리턴은 int형 배열이므로 형변환하여 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2019 KAKAO BLIND RECRUITMENT: 오픈채팅방</title>
	  <link>/blog//algo-prog42888</link>
	  <author></author>
	  <pubDate>2020-08-19T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog42888</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42888">https://programmers.co.kr/learn/courses/30/lessons/42888</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>record를 한 번 읽으면서 HashMap에 유저 아이디와 닉네임을 저장한다.</li>
  <li>record를 다시 읽으면서 change가 아니면 result 조건에 맞게 answer에 저장한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">record</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">str:</span><span class="n">record</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Enter"</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">names</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">array</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
				<span class="n">size</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Leave"</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">size</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Change"</span><span class="o">)){</span>
				<span class="n">names</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">array</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">String</span><span class="o">[]</span> <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">str:</span> <span class="n">record</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Change"</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Enter"</span><span class="o">))</span> 
				<span class="n">answer</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="n">names</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">])+</span><span class="s">"님이 들어왔습니다."</span><span class="o">;</span>			
			<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"Leave"</span><span class="o">))</span> 
				<span class="n">answer</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="n">names</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">])+</span><span class="s">"님이 나갔습니다."</span><span class="o">;</span>
			
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200819_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">HashMap에 유저 아이디와 닉네임을 저장한다</span></strong>
    <ul>
      <li>HashMap에 저장하면 탐색시간이 빠르고, 중복되는 key는 저장되지 않으므로 해당 문제에 적합하다.</li>
      <li>“Enter”이면 해당 아이디와 닉네임을 해쉬맵에 저장하고, “Leave”면 패스, “Change”면 아이디에 대한 닉네임을 변경한다.</li>
      <li>record의 문자열은 띄워쓰기를 기준으로 단어, 아이디, 닉네임이 들어오므로 split(“ “)으로 문자열을 쪼갠 후 사용한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">다시 record를 읽으면서 answer에 메시지를 저장한다</span></strong>
    <ul>
      <li>“Change”일 때에는 메시지가 없으므로 패스한다.</li>
      <li>“Enter”, “Leave”인 경우에 해쉬맵에서 아이디에 따른 닉네임을 찾아 조건에 맞게 메시지를 answer에 저장한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>


	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/프로그래머스] 2020 KAKAO BLIND RECRUITMENT: 가사 검색</title>
	  <link>/blog//algo-prog60060</link>
	  <author></author>
	  <pubDate>2020-08-16T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-prog60060</guid>
	  <description><![CDATA[
	     <h2 id="-문제"><span style="color:navy">👀 문제</span></h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/60060">https://programmers.co.kr/learn/courses/30/lessons/60060</a></p>

<h2 id="-도전"><span style="color:navy">👊 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>자료구조 트라이(Trie)를 이용하여 문제를 해결한다.</li>
  <li>word를 처음부터 저장하는 트라이 하나와, 뒤에서부터 저장하는 트라이 하나를 만든다.</li>
  <li>query가 ?로 시작하면 뒤에서부터 저장한 트라이를 탐색해 일치하는 단어의 개수를 리턴하고, ?로 끝나면 처음부터 저장한 트라이를 탐색한다.</li>
</ol>

<h3 id="2-구현">2. 구현</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="cm">/**
 *
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">queries</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Trie</span><span class="o">[]</span> <span class="n">tries</span><span class="o">=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">[</span><span class="mi">100001</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">word:</span><span class="n">words</span><span class="o">)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]=</span><span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
			<span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">].</span><span class="na">insert</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span>
			<span class="k">if</span><span class="o">(</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">]==</span><span class="kc">null</span><span class="o">)</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">else</span> <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">tries</span><span class="o">[</span><span class="n">len</span><span class="o">].</span><span class="na">getCount</span><span class="o">(</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Trie</span><span class="o">{</span>
	<span class="n">Node</span> <span class="n">front</span><span class="o">,</span> <span class="n">back</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">back</span><span class="o">=</span><span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">insertFront</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
		<span class="n">insertBack</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertFront</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">front</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertBack</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">back</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">c</span><span class="o">-&gt;</span><span class="k">new</span> <span class="n">Node</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">return</span> <span class="n">getCountFromBack</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
		<span class="k">else</span> <span class="k">return</span> <span class="nf">getCountFromFront</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getCountFromFront</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">front</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getCountFromBack</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">back</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">query</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">'?'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">query</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">count</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">children</span><span class="o">=</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200816_1.PNG" alt="실행결과" />
🤟 성공 🤟</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Node 클래스를 만든다</span></strong>
    <ul>
      <li>Node는 트라이에 사용된다.</li>
      <li>하나의 노드는 자식을 가지며, 이때 자식은 영문자 a~z중 하나로 탐색 시간을 줄이기 위해 HashMap을 사용한다.</li>
      <li>루트에서 현재 노드까지의 깊이를 count에 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Trie 클래스를 만든다</span></strong>
    <ul>
      <li><img src="./assets/images/200816_2.PNG" alt="실행결과" /></li>
      <li>트라이는 word를 처음부터 저장하는 것 하나(front)와, 뒤에서부터 저장하는 것(back) 하나를 둔다.</li>
      <li>query가 “?”로 시작하면 back을 탐색하면 되고, “?”로 끝나면 front를 탐색한다.</li>
      <li>따라서, insert()가 호출되었을 때, front와 back에 모두 word를 삽입한다.</li>
      <li>insertFront(): 시작 루트가 front이므로 node를 front로 초기화한다. 현재 노드까지 일치하는 문자열이 하나 더 생긴 것이므로 node.count++한다. word의 문자를 하나씩 확인하며 해당 문자가 front에 해당 노드의 children인 HashMap에 들어가 있지 않다면(computeIfAbsent) key는 word.charAt(i), value는 new Node()를 만든 후, 해당 node로 이동한다.</li>
      <li>getCount(): query가 ?로 시작하면 뒤에서부터 탐색하고, 아니면 앞에서부터 탐색한다.</li>
      <li>getCountFromFront(): query에 물음표가 뒤에 있는 경우이다. 따라서 query의 문자를 하나씩 확인하며, 물음표가 나온 경우 지금까지의 노드 개수를 리턴한다. 또는, 현재 query의 문자가 존재하지 않을 경우 0을 리턴한다.</li>
      <li>solution(): tries의 인덱스는 query의 길이를 뜻한다. 예를 들어 query 길이가 5인 문자들은 모두 tries[5]에서 저장된다. query의 길이는 100,000이하이므로 배열의 길이는 100,001이어야 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="-해결-완료"><span style="color:navy">👏 해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[프로그래머스] 2020 KAKAO BLIND RECRUITMENT 가사 검색 (Java) <a href="https://leveloper.tistory.com/99">https://leveloper.tistory.com/99</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
