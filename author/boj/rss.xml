<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 부등호</title>
	  <link>/blog//algo-boj2529</link>
	  <author></author>
	  <pubDate>2020-06-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2529</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2529">https://www.acmicpc.net/problem/2529</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS와 visit[]를 이용하여 숫자를 중복시키지 않으면서 부등호 조건에 맞는 숫자를 생성하여 ArrayList에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">k</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">now</span><span class="o">,</span> <span class="n">String</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">idx</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">now</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
					<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">num</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">now</span><span class="o">&gt;=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
					<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">num</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">));</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200630_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용하여 부등호 조건에 맞는 숫자를 생성한다</span></strong>
    <ul>
      <li>부등호를 저장할 array, 중복 숫자를 거르기 위한 visit 배열을 글로벌 선언한다.</li>
      <li>dfs()를 통해 숫자를 생성하고, list에 저장한다.</li>
      <li>dfs는 시작점(첫 번째 숫자)에 따라 모두 체크해줘야하므로 for문을 돌린다. now에 시작점 i, num 자리에도 i를 넘겨 현재까지 i가 만들어졌음을 보내준다.</li>
      <li>이때 숫자는 0부터 차례대로 오름차순으로 생성되기 때문에 list에도 오름차순으로 저장된다. 따라서 list의 마지막에는 max값이, 처음에는 min값이 저장된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">dfs() 메소드를 만든다</span></strong>
    <ul>
      <li>파라미터 idx는 부등호 배열 array를 순회하는 인덱스이자, 순회가 끝나면 idx==k이므로 종료 조건이 된다. idx==k까지 살아있다면 k+1길이의 숫자 생성 완료된 것이므로 list에 저장후 종료한다.</li>
      <li>now는 이전에 선택된 숫자이다. 부등호 체크를 위해 파라미터로 넘겨준다.</li>
      <li>num은 현재까지 만들어진 숫자이다.</li>
      <li>for문을 통해 0~9순회하며 visit를 통해 방문하지 않은 숫자라면 부등호 조건을 체크하고, 맞다면 방문 체크(true)로 변경 후 재귀호출로 다음을 만든다. 이때 다음 부등호를 체크해야하므로 idx+1, 현재 선택된 숫자 i, i를 덧붙인 num+i를 파라미터로 넘긴다.</li>
      <li>dfs()호출이 끝난 후 다시 원래 복귀로 돌아왔다면, 다음 사용을 위해 현재 visit[i]=false 처리해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 2529번 부등호 :: 마이구미 <a href="https://mygumi.tistory.com/279">https://mygumi.tistory.com/279</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 수 이어 쓰기 1</title>
	  <link>/blog//algo-boj1748</link>
	  <author></author>
	  <pubDate>2020-06-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1748</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1748">https://www.acmicpc.net/problem/1748</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1부터 N까지 모두 체크하기에는 시간초과가 발생할 수 있다.</li>
  <li>자릿수별로 값을 곱해 길이를 계산한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">String</span> <span class="n">num</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">length</span><span class="o">=</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> 
			<span class="n">cnt</span><span class="o">+=</span><span class="mi">9</span><span class="o">*</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)*</span><span class="n">i</span><span class="o">;</span>
		
		<span class="n">cnt</span><span class="o">+=(</span><span class="n">n</span><span class="o">-</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">)+</span><span class="mi">1</span><span class="o">)*</span><span class="n">length</span><span class="o">;</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200630_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">숫자 n을 String형으로 받아 길이를 먼저 확인한다</span></strong>
    <ul>
      <li>숫자 n을 int형이 아닌 String으로 먼저 받아 자릿수(길이)가 얼만지 먼저 확인해 length에 저장한다.</li>
      <li>이후 다음 사용을 위해 다시 int형으로 형변환하여 n에 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">n 이전의 자릿수까지의 길이를 계산한다</span></strong>
    <ul>
      <li>for문 i를 이용하여 길이 length-1까지의 길이를 계산한다.</li>
    </ul>
  </li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center">i 자릿수</th>
      <th style="text-align: center">갯수</th>
      <th style="text-align: center">길이</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1~9</td>
      <td style="text-align: center">9</td>
      <td style="text-align: center">9*1</td>
    </tr>
    <tr>
      <td style="text-align: center">10~99</td>
      <td style="text-align: center">90</td>
      <td style="text-align: center">90*2</td>
    </tr>
    <tr>
      <td style="text-align: center">100~999</td>
      <td style="text-align: center">900</td>
      <td style="text-align: center">900*3</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>따라서 i자리 숫자까지의 새로운 수는 <code class="highlighter-rouge">9*10^(i자릿수-1)*자릿수길이</code>로 나타낼 수 있다.</li>
</ul>

<ol>
  <li><strong><span style="color:navy">마지막 자릿수에서 n까지의 길이를 구한다</span></strong>
    <ul>
      <li>마지막 자릿수는 모두 다 사용하는 것이 아니기 때문에 for문밖에서 계산한다.</li>
      <li>n=55라면, 마지막 두자릿수 계산은 (55-10+1)*2로 이루어져야한다.</li>
      <li>이를 식으로 나타내면 (n-10^(length-1)+1)*length와 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>#백준_1748 수 이어 쓰기 1 - Java 자바 <a href="https://ukyonge.tistory.com/104">https://ukyonge.tistory.com/104</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 리모컨</title>
	  <link>/blog//algo-boj1107</link>
	  <author></author>
	  <pubDate>2020-06-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1107</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1107">https://www.acmicpc.net/problem/1107</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>n의 범위가 주어졌기 때문에 brute force로 모든 경우를 확인하여 최솟값을 출력한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">checkNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">length</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">else</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">while</span><span class="o">(</span><span class="n">num</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">num</span><span class="o">%</span><span class="mi">10</span><span class="o">))</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="n">length</span><span class="o">++;</span>
				<span class="n">num</span><span class="o">/=</span><span class="mi">10</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">length</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
		
		<span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">100</span><span class="o">);</span><span class="c1">//100에서 n까지 +/-만으로 이동하는 방법</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1000000</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="n">checkNum</span><span class="o">(</span><span class="n">i</span><span class="o">);</span><span class="c1">//i를 버튼으로 만들 수 있는지 체크</span>
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">!=</span><span class="mi">0</span><span class="o">)</span>
				<span class="n">min</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">)+</span><span class="n">cnt</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
		
		
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200630_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">채널 n에 도달하는 방법을 생각해본다</span></strong>
    <ul>
      <li>숫자 버튼으로 바로 n을 만들 수 있는 경우(방법 1)</li>
      <li>+/-만을 이용하여 n에 도달하는 경우(방법 2)</li>
      <li>위 두 가지를 모두 이용하는 경우(방법 3)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Brute Force로 모든 경우를 탐색한다</span></strong>
    <ul>
      <li>버튼이 고장난 m개의 숫자를 ArrayList에 저장한다. 배열에도 저장할 수 있지만, 고장난 버튼의 유무를 체크해야하므로 배열보다는 ArrayList의 contains()를 쓰는 것이 더 편리하다.</li>
      <li>min에 방법 2를 저장한다. 시작점이 100이므로 n-100이다. 이때 n&gt;=100이라면 n-100이지만 n&lt;100이면 음수가 발생하므로 Math.abs()로 절댓값 처리해준다.</li>
      <li>for문을 돌려 숫자 버튼으로 만들 수 있는 모든 채널을 생성한다. 이때 n은 0~500000이지만, n&gt;i인 경우와 n&lt; i인 경우 두 개를 생각해야하므로 n의 두 배를 한다.</li>
      <li>checkNum()을 통해 고장난 버튼을 확인하여 버튼을 만들 수 있는 지 확인한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">checkNum()으로 채널 num 생성이 가능한지 확인한다</span></strong>
    <ul>
      <li>나머지 연산을 이용하여 숫자를 하나씩 쪼개어 해당 숫자 버튼이 고장나진 않았는지 확인한다.</li>
      <li>이때 채널이 0일 경우, 0은 나머지 연산이 불가능하므로 따로 빼서 처리해준다.</li>
      <li>num의 숫자들 중 하나라도 고장난 버튼이 있다면, 만들 수 없으므로 0을 리턴하고, 아닌 경우 버튼 생성을 위해 필요한 클릭 횟수(length)를 리턴한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">채널 i생성이 가능하다면 방법2와 방법1 또는 3중 최솟값을 택한다</span></strong>
    <ul>
      <li>현재 min은 방법2의 답을 가지고 있고, 나머지 1 또는 3중 작은 방법을 택한다.</li>
      <li>cnt는 채널 i로 방법1의 횟수이고, Math.abs(n-i)는 방법3을 체크하는 것이다.</li>
      <li>i==n이라면 Math.abs(n-i)=0이 되어 확인할 필요가 없지만(방법1),</li>
      <li>아닐 경우, 채널 i로 숫자 버튼을 조작해 이동하는 횟수 cnt, i에서 n까지 +/-을 이용하여 움직이는 횟수를 더한 값이 된다(방법3).</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>BruteForceSearch 백준 알고리즘 자바 1107 ‘리모컨’ 문제풀이 <a href="https://geehye.github.io/baekjoon-1107/#">https://geehye.github.io/baekjoon-1107/#</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 카잉 달력</title>
	  <link>/blog//algo-boj6064</link>
	  <author></author>
	  <pubDate>2020-06-30T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj6064</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/6064">https://www.acmicpc.net/problem/6064</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>일반적인 방법으로는 시간 제한이 걸리므로 x를 맞춘 후 y를 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="nf">gcd</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="k">while</span><span class="o">(</span><span class="n">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">t</span><span class="o">--;</span>
			<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			
			<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">yy</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">lcm</span><span class="o">=</span><span class="n">m</span><span class="o">*</span><span class="n">n</span><span class="o">/</span><span class="n">gcd</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">ty</span><span class="o">=</span><span class="n">yy</span><span class="o">%</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="nl">n:</span><span class="n">yy</span><span class="o">%</span><span class="n">n</span><span class="o">;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">ty</span><span class="o">==</span><span class="n">y</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
				<span class="n">yy</span><span class="o">=</span><span class="n">ty</span><span class="o">+</span><span class="n">m</span><span class="o">;</span>
				<span class="n">cnt</span><span class="o">+=</span><span class="n">m</span><span class="o">;</span>
			<span class="o">}</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="n">lcm</span><span class="o">)</span> 
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"-1"</span><span class="o">);</span>
			<span class="k">else</span> 
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200630_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">x를 맞춘 후 y를 생각한다</span></strong>
    <ul>
      <li>x가 되기 위해 x번이 필요하므로 해를 카운트하는 cnt는 x부터 시작한다.</li>
      <li>x의 값이 바뀌면 안되기 때문에 값을 m씩 키우며 확인한다. 따라서 yy에 m을 더해야하고, y값은 n이상 넘어가면 안되기 때문에 나머지 연산으로 체크한다.</li>
      <li>ty를 두어 y와 같아지는 때를 체크한다. ty==y라면 for문을 탈출, 아니라면 yy에 새 값을 갱신해주고 cnt도 갱신한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">최소공배수를 이용하여 마지막 해를 넘어가지 않게 한다</span></strong>
    <ul>
      <li>문제에서 &lt;10:12&gt;는 마지막 60번째 해라고 설명하였다. 따라서 61번째는 없으므로 cnt가 m, n의 최소공배수를 벗어난다면 유효하지 않은 표현이므로 -1을 출력하도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 6064번 카잉 달력 :: 마이구미 <a href="https://mygumi.tistory.com/325">https://mygumi.tistory.com/325</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 합분해</title>
	  <link>/blog//algo-boj2225</link>
	  <author></author>
	  <pubDate>2020-06-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2225</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2225">https://www.acmicpc.net/problem/2225</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DP를 이용하여 규칙을 찾아낸다.</li>
  <li>dp[k][n]으로 생각하여 k개를 사용해 n을 만드는 경우의 수를 배열에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">j</span><span class="o">;</span><span class="n">l</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">l</span><span class="o">];</span>
					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]%=</span><span class="mi">1000000000</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">n</span><span class="o">]);</span>
	<span class="o">}</span>

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200627_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP 규칙을 찾아낸다</span></strong>
    <ul>
      <li>dp[k][n]으로 두고, k개를 더해 n을 만드는 경우의 수를 저장한다.</li>
      <li>n을 만들기 위해 더하는 마지막 수를 l이라고 할 때, 앞의 값들은 k-1개를 이용하여 합 n-l을 만드는 것과 같으므로 dp[k-1][n-l]이다.</li>
      <li>따라서 n-l=0이 될 때 까지의 합들을 모두 구해 더하면 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 2225번 합분해 [DP] :: 마이구미 <a href="https://mygumi.tistory.com/135">https://mygumi.tistory.com/135</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 제곱수의 합</title>
	  <link>/blog//algo-boj1699</link>
	  <author></author>
	  <pubDate>2020-06-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1699</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1699">https://www.acmicpc.net/problem/1699</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DP를 이용하여 규칙을 찾아낸다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="n">neimport</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">*</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">*</span><span class="n">j</span><span class="o">]+</span><span class="mi">1</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]);</span>
	<span class="o">}</span>

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200627_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP 규칙을 찾아낸다</span></strong></li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center">i</th>
      <th style="text-align: center">dp[i]</th>
      <th style="text-align: center">ㅁ</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">1+1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">2^2</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2^2+1</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">2^2+1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">2^2+1+1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">2^3</td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2^3+1</td>
    </tr>
    <tr>
      <td style="text-align: center">10</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">2^3+1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">11</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">2^3+1+1+1</td>
    </tr>
    <tr>
      <td style="text-align: center">12</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">2^3+1+1+1+1</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>자연수 i의 제곱수 합을 찾기 위해 j를 이용하여 1부터 j까지의 제곱수를 이용하여 값을 구한다.</li>
</ul>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>ynamic Programming 백준 알고리즘 자바 1699 ‘제곱수의 합’ 문제풀이 <a href="https://geehye.github.io/baekjoon-1699/#">https://geehye.github.io/baekjoon-1699/#</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 가장 긴 증가하는 부분 수열 4</title>
	  <link>/blog//algo-boj14002</link>
	  <author></author>
	  <pubDate>2020-06-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14002</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14002">https://www.acmicpc.net/problem/14002</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>증가하는 수열을 구하되, 그 부분 수열을 출력해야하므로 탐색이 끝난 dp를 역으로 조회하며 해당 수열들을 찾아 스택에 저장한 후 pop하여 출력한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">length</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
				
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span>
					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="n">length</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">length</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">length</span><span class="o">);</span>
		
		<span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">length</span><span class="o">;</span>
		<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="n">temp</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
				<span class="n">temp</span><span class="o">--;</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">temp</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">while</span><span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">()+</span><span class="s">" "</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200627_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶<br />
부분 수열을 출력하기 위해 앞에서부터 순회했더니 틀렸다. 2, 2 1을 넣으면 부분 수열이 2가 출력된다(1이 출력되어야 함).</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">증가하는 부분 수열을 찾는다</span></strong>
    <ul>
      <li>숫자가 증가하고(array[i]&gt;array[j]), 길이 조건을 만족할 때(array[j]&lt; array[i]+1) dp[i]=dp[j]+array[i]를 저장한다.</li>
      <li>이때 길이도 출력해야하므로 length에 저장해둔다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">증가하는 부분 수열을 출력한다</span></strong>
    <ul>
      <li>dp를 역순회하며 temp(length)를 하나씩 줄여가며 맞는 array[i]를 스택에 저장한다. 역순회므로 그냥 출력할 경우 큰 값부터 출력하게 되므로 스택에 넣어 거꾸로 출력되도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준 14002: JAVA] 가장 긴 증가하는 부분 수열 4/ 동적 프로그래밍 + 역추적 <a href="https://dragon-h.tistory.com/34">https://dragon-h.tistory.com/34</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 가장 긴 감소하는 부분 수열</title>
	  <link>/blog//algo-boj11722</link>
	  <author></author>
	  <pubDate>2020-06-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11722</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11722">https://www.acmicpc.net/problem/11722</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>감소하는 부분 수열을 구해야하므로 이전보다 더 작은 숫자를 찾았고, dp 길이를 갱신할 수 있는 곳을 찾아 구한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
				
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span>
					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
		
	<span class="o">}</span>

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200627_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP 규칙을 찾아낸다</span></strong>
    <ul>
      <li>감소하는 부분수열(array[j]&gt;array[i])중, 부분 수열이 증가하는 것이라면(dp[i]&lt; dp[j]+1) dp[i]=dp[j]+1을 저장한다.</li>
      <li>길이를 리턴해야하므로 dp[i]중 가장 큰 값을 리턴한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 가장 큰 증가 부분 수열</title>
	  <link>/blog//algo-boj11055</link>
	  <author></author>
	  <pubDate>2020-06-27T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11055</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11055">https://www.acmicpc.net/problem/11055</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>합의 최댓값을 구해야하므로 dp에 array[i]+d[j]를 더해주는 방식으로 진행한다.</li>
  <li>현재 array[i]가 이전 원소 array[j]보다 크고, dp[i]보다 dp[j]에 array[i]를 더한 게 더 크다면, dp[i]를 해당 값으로 갱신한다.</li>
  <li>max값을 구해야하므로 max를 두어 dp[i]중 최댓값을 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
				
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]&lt;</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="o">}</span>
			<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
		
	<span class="o">}</span>

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200627_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP 규칙을 찾아낸다</span></strong>
    <ul>
      <li>증가하는 부분수열(array[j]&lt; array[i])중, dp[i]&lt; 이전까지의 합(dp[j])+array[i]이라면, dp[i]=dp[j]+array[i].</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준] 11055 - 가장 큰 증가 부분 수열 <a href="https://m.blog.naver.com/occidere/220793914361">https://m.blog.naver.com/occidere/220793914361</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-기초 | 다이나믹 프로그래밍: 연속합 2</title>
	  <link>/blog//algo-boj13398</link>
	  <author></author>
	  <pubDate>2020-06-26T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj13398</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/16194">https://www.acmicpc.net/problem/16194</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>카드 i개가 들어있는 카드팩을 살 경우의 min값을 dp에 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">dp</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
		<span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> 
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span>
				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">]);</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200626_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP 규칙을 찾아낸다</span></strong>
    <ul>
      <li>이전 문제와 다른 점은 최솟값을 구해야한다는 것이다.</li>
      <li>dp를 MAX_VALUE로 초기화 한 다음 Math.min으로 최솟값을 구하면 된다.</li>
      <li>이때 주의할 점은 dp[0]=0으로 두어 오버플로우가 발생하지 않도록 해야한다는 것이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[BOJ 13398] 연속합 2 <a href="https://ladun.tistory.com/50">https://ladun.tistory.com/50</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
