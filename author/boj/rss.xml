<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>(◍•ᴗ•◍)</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (4)</title>
	  <link>/blog//algo-boj15652</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15652</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15652">https://www.acmicpc.net/problem/15652</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열이 없도록, 하지만 수열안에서는 숫자가 중복되어도 되므로 visit는 필요없다.</li>
  <li>시간 제한에 유의하여 Scanner 대신 BufferedReader, BufferedWriter를 이용한다.</li>
  <li>수열안에서 숫자는 앞에보다 같거나 큰 값이 나와야하므로 조건을 추가한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">bw</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">!=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">-</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">i</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		
		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>visit[]를 사용하지 않음으로써 같은 숫자도 다시 한 번 방문할 수 있게 한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">시간 제한에 유의하여 BufferedReader, BufferedWriter를 이용한다.</span></strong>
    <ul>
      <li>이때 bw.flush()로 버퍼의 값을 제대로 출력할 수 있게 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">수열은 비내림차순이어야 한다.</span></strong>
    <ul>
      <li>따라서 DFS()안의 for문에서 현재 array에 넣으려는 i의 값이 앞의 값보다 작다면 continue로 패스하도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15652] N과 M(4) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/39">https://fbtmdwhd33.tistory.com/39</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (3)</title>
	  <link>/blog//algo-boj15651</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15651</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15651">https://www.acmicpc.net/problem/15651</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열이 없도록, 하지만 수열안에서는 숫자가 중복되어도 되므로 visit는 필요없다.</li>
  <li>시간 제한에 유의하여 Scanner 대신 BufferedReader, BufferedWriter를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">bw</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		
		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>visit[]를 사용하지 않음으로써 같은 숫자도 다시 한 번 방문할 수 있게 한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">시간 제한에 유의하여 BufferedReader, BufferedWriter를 이용한다.</span></strong>
    <ul>
      <li>이때 bw.flush()로 버퍼의 값을 제대로 출력할 수 있게 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15651] N과 M(3) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/38">https://fbtmdwhd33.tistory.com/38</a></li>
  <li>백준 N과M(3) 15651 java <a href="https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM3-15651-java">https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM3-15651-java</a></li>
  <li>백준 15651 <a href="https://info-tech.netlify.com/posts/%EB%B0%B1%EC%A4%80-15651/">https://info-tech.netlify.com/posts/%EB%B0%B1%EC%A4%80-15651/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (2)</title>
	  <link>/blog//algo-boj15650</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15650</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15650">https://www.acmicpc.net/problem/15650</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 중복 없이 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
  <li>중복되는 수열을 여러 번 출력하면 안되고, 오름차순 정렬해야하므로 다음 출력할 자리의 숫자는 이전에 출력한 자리 숫자보다 크도록 하면 된다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>중복을 제외하기 위해 visit[]를 이용하여 이미 사용한(방문한) 숫자는 true로 저장한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
      <li>재귀가 종료되면 해당 깊이에서의 계산이 끝났고, 다음 사용을 위해 visit[]를 false로 바꾸어 이후에 다시 방문 가능하도록 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS()의 for문 범위를 조정하여 중복없는 오름차순을 구현한다.</span></strong>
    <ul>
      <li>1 2를 출력하고 2 1을 출력하기 전에 1 2가 출력되었다는 것을 확안히가보다는, 다음에 출력할 자리의 숫자는 이전에 출력할 자리 숫자보다 크도록 조정하면 된다.</li>
      <li>따라서 마지막으로 넣은 숫자 i 다음 값을 파라미터로 넘기면서 재귀를 호출하면, 그 수부터 순열을 만들면 중복이 없는 오름차순을 출력할 수 있다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 N과 M(2) 15650 java <a href="https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM2-15650-java">https://jsp-dev.tistory.com/entry/%EB%B0%B1%EC%A4%80-N%EA%B3%BCM2-15650-java</a></li>
  <li>[백준,BOJ 15649] N과 M(2) (JAVA 구현) (N과M) <a href="https://fbtmdwhd33.tistory.com/37">https://fbtmdwhd33.tistory.com/37</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N과 M (1)</title>
	  <link>/blog//algo-boj15649</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj15649</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/15649">https://www.acmicpc.net/problem/15649</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>1~n까지의 수 중에 중복 없이 m개를 고른 수열을 출력해야하므로 dfs를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">m</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">array</span><span class="o">[</span><span class="n">cnt</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>순열을 구하는 문제이므로 DFS를 이용한다.</li>
      <li>중복을 제외하기 위해 visit[]를 이용하여 이미 사용한(방문한) 숫자는 true로 저장한다.</li>
      <li>출력할 숫자들을 저장하기 위해 array[]를 이용한다.</li>
      <li>1부터 n까지 확인하면서 방문했다면 다음 숫자로 이동, 아니라면 방문했음을 나타내는 true를 저장한 후, array[]에 해당 숫자를 저장한다.</li>
      <li>이후 다시 재귀호출하되, 숫자가 cnt+1개 사용되었으므로 이에 유의하여 파라미터를 넘겨준다.</li>
      <li>사용 갯수 cnt가 m과 같아지면 저장된 array의 값들을 출력한 후, return을 통해 함수를 종료하고 재귀호출되었던 곳으로 돌아온다. 이 과정을 통해 깊이 우선 탐색(DFS)이 가능하게 된다.</li>
      <li>재귀가 종료되면 해당 깊이에서의 계산이 끝났고, 다음 사용을 위해 visit[]를 false로 바꾸어 이후에 다시 방문 가능하도록 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 15649] N과 M(1) (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/36">https://fbtmdwhd33.tistory.com/36</a></li>
  <li>[JAVA] 백준 알고리즘 15649번 문제풀이 (N과M) <a href="https://choseongho93.tistory.com/155">https://choseongho93.tistory.com/155</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 백트래킹: N-Queen</title>
	  <link>/blog//algo-boj9663</link>
	  <author></author>
	  <pubDate>2020-03-10T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj9663</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/9663">https://www.acmicpc.net/problem/9663</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>체스판 위에 퀸의 위치를 저장할 이차원배열 visit를 생성한다.</li>
  <li>DFS를 이용하여 모든 경우의 수를 찾되, 퀸의 조건에 맞게 앞 뒤 좌우 대각선에 퀸이 존재할 경우 탐색을 종료한다.</li>
  <li>퀸을 놓을 수 있는 방법의 수를 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">answer</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span> <span class="n">visit</span><span class="o">[][];</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">==</span><span class="n">n</span><span class="o">){</span>
			<span class="n">answer</span><span class="o">++;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">check</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">i</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">y</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//행</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">x</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//열</span>
            <span class="c1">//오른쪽 아래로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//왼쪽 위로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//왼쪽 아래로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">-</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="c1">//오른쪽 위로 가는 대각선</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">-</span><span class="n">i</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
		<span class="n">answer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200310_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다.</span></strong>
    <ul>
      <li>퀸을 놓을 수 있는 곳은 true로 바꾸고 퀸을 놓는다.</li>
      <li>퀸을 놓기 전에, check()를 통해 놓을 수 있는 곳인지 체크한다.</li>
      <li>한 행, 열에는 하나의 퀸만 놓을 수 있다.</li>
      <li>말을 놓은 후에는 다음 행에서 놓을 수 있는 위치를 찾기 위해 재귀를 호출한다. 이때 파라미터는 다음 행인 x+1이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">check()에서 해당 위치에 퀸을 놓을 수 있는지 확인한다.</span></strong>
    <ul>
      <li>파라미터로 받은 (x,y)를 기준으로 같은 행, 열, 대각선에 true로 표시되어 퀸이 존재하는 곳이 있다면 false를 리턴하여 (x,y)에는 퀸을 놓을 수 없다고 알려준다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>백준 9663번 N-Queen :: 마이구미 <a href="https://mygumi.tistory.com/199">https://mygumi.tistory.com/199</a></li>
  <li>[백준] 9663번 N-Queen <a href="https://whereisusb.tistory.com/142">https://whereisusb.tistory.com/142</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 정렬: 통계학</title>
	  <link>/blog//algo-boj2108</link>
	  <author></author>
	  <pubDate>2020-03-09T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2108</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2108">https://www.acmicpc.net/problem/2108</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>산술평균은 소수점 이하 첫째 자리에서 반올림하여 출력한다.</li>
  <li>입력받은 숫자를 배열에 넣고 오름차순 정렬하여 중앙값을 출력한다.</li>
  <li>ArrayList를 이용하여 가장 많이 나타나는 값들을 저장한 후, 두개이상이라면 두 번째로 작은 값을 출력한다.</li>
  <li>범위는 정렬된 배열의 마지막 원소와 첫 번째 원소의 차이를 출력한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">number</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">cntArray</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">8001</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;;</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">x</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="n">number</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">x</span><span class="o">;</span>
			<span class="n">sum</span><span class="o">+=</span><span class="n">x</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">&lt;=</span><span class="mi">0</span><span class="o">){</span>
				<span class="n">cntArray</span><span class="o">[-</span><span class="n">x</span><span class="o">]++;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">cntArray</span><span class="o">[-</span><span class="n">x</span><span class="o">]&gt;</span><span class="n">max</span><span class="o">)</span>
					<span class="n">max</span><span class="o">=</span><span class="n">cntArray</span><span class="o">[-</span><span class="n">x</span><span class="o">];</span>
			<span class="o">}</span>
			<span class="k">else</span><span class="o">{</span>
				<span class="n">cntArray</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="mi">4000</span><span class="o">]++;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">cntArray</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="mi">4000</span><span class="o">]&gt;</span><span class="n">max</span><span class="o">)</span>
					<span class="n">max</span><span class="o">=</span><span class="n">cntArray</span><span class="o">[</span><span class="n">x</span><span class="o">+</span><span class="mi">4000</span><span class="o">];</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">sum</span><span class="o">/</span><span class="n">n</span><span class="o">));</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">number</span><span class="o">[</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">]);</span>
		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">8001</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">max</span><span class="o">==</span><span class="n">cntArray</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
				<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4001</span><span class="o">)</span>
					<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(-</span><span class="n">i</span><span class="o">);</span>
				<span class="k">else</span>
					<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">4000</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">1</span><span class="o">)</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
		<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">1</span><span class="o">){</span>
			<span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">number</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]-</span><span class="n">number</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
	<span class="o">}</span>
	
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200309_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">산술평균</span></strong>
    <ul>
      <li>숫자를 입력받을 때 sum에 값을 저장하여 총합을 구한 후, n으로 나누되 앞에 sum 또는 n을 double로 형변환하여 결과값이 소수점을 가지도록 한다.</li>
      <li>Math.round()를 통해 소수점 첫째 자리에서 반올림한 값을 출력한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">중앙값</span></strong>
    <ul>
      <li>입력받은 수들을 배열에 저장하여 Arrays.sort()로 오름차순 정렬한 뒤, n/2로 중앙값을 출력한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">최빈값</span></strong>
    <ul>
      <li>처음 숫자를 입력받아 배열에 저장할 때, 가장 빈도가 높은 갯수가 얼마인지 max에 저장한다.</li>
      <li>이를 가지고 8001배열을 순회하며 max와 같은 빈도를 가지고 있는 수를 ArrayList에 저장한다.</li>
      <li>8001배열은 0은 그대로 0, 1~4000까지는 음수가 사용하고, 그 이상은 양수가 사용한다.</li>
      <li>ArrayList를 사용하는 이유는, 빈도수가 max인 숫자가 몇 개인지 알 수 없기 때문에 배열을 만들 수 없기 때문이다.</li>
      <li>ArrayList에 값이 하나라면 해당 값을 출력하고, 두 개 이상이라면 두 번째로 작은 값을 출력해야하므로 Collections.sort()를 통해 오름차순 정렬한 후 1번째 인덱스의 값을 출력한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">범위</span></strong>
    <ul>
      <li>정렬된 배열 number의 첫 번째 인덱스 값이 최솟값, 마지막 인덱스가 최댓값이므로 이를 이용하여 범위를 구한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 브루트 포스: 영화감독 숌</title>
	  <link>/blog//algo-boj1436</link>
	  <author></author>
	  <pubDate>2020-03-09T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1436</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1436">https://www.acmicpc.net/problem/1436</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>666부터 카운트하며 “666”이 포함된 숫자의 갯수를 센다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">num</span><span class="o">=</span><span class="mi">666</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="s">"666"</span><span class="o">)){</span>
				<span class="n">cnt</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">n</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
			<span class="n">num</span><span class="o">++;</span>
		<span class="o">}</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>### 3. 결과
<img src="./assets/images/200309_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">666부터 조건을 비교하며 카운트한다.</span></strong>
    <ul>
      <li>666부터 카운트하며 “666”이 포함되었는지 확인하기위해 String형으로 변환 후 contains()로 확인한다.</li>
      <li>“666”이 들어가있다면 cnt++하고, cnt==n이 되는 경우에 while문을 탈출하여 출력한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 정렬: 좌표 정렬하기 2</title>
	  <link>/blog//algo-boj11651</link>
	  <author></author>
	  <pubDate>2020-03-09T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11651</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11651">https://www.acmicpc.net/problem/11651</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>x, y좌표값을 가지는 Dot클래스를 선언한다.</li>
  <li>Dot형 배열을 선언하여 값을 넣은 후, Array.sort()과 Comparator를 이용하여 y 우선 오름차순 정렬, 같다면 x 오름차순 정렬한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Dot</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Dot</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">j</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Dot</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">Dot</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="k">new</span> <span class="n">Dot</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Dot</span><span class="o">&gt;(){</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Dot</span> <span class="n">d1</span><span class="o">,</span> <span class="n">Dot</span> <span class="n">d2</span><span class="o">){</span>
				<span class="k">if</span><span class="o">(</span><span class="n">d1</span><span class="o">.</span><span class="na">y</span><span class="o">==</span><span class="n">d2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span>
					<span class="k">return</span> <span class="n">d1</span><span class="o">.</span><span class="na">x</span><span class="o">-</span><span class="n">d2</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
				<span class="k">else</span>
					<span class="k">return</span> <span class="n">d1</span><span class="o">.</span><span class="na">y</span><span class="o">-</span><span class="n">d2</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">});</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">x</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">y</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200309_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Dot형 클래스를 선언한다.</span></strong>
    <ul>
      <li>Dot형 배열을 선언하여 n개의 점을 입력받아 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Arrays.sort(), Comparator을 이용하여 조건에 맞게 정렬한다.</span></strong>
    <ul>
      <li>y의 값이 같다면 x를 기준으로 오름차순 정렬하고, 다르다면 y를 기준으로 오름차순 정렬한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 정렬: 좌표 정렬하기</title>
	  <link>/blog//algo-boj11650</link>
	  <author></author>
	  <pubDate>2020-03-09T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11650</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11650">https://www.acmicpc.net/problem/11650</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>x, y좌표값을 가지는 Dot클래스를 선언한다.</li>
  <li>Dot형 배열을 선언하여 값을 넣은 후, Array.sort()과 Comparator를 이용하여 x 우선 오름차순 정렬, 같다면 y 오름차순 정렬한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Dot</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Dot</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">i</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">j</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Dot</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="n">Dot</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="k">new</span> <span class="n">Dot</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Dot</span><span class="o">&gt;(){</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Dot</span> <span class="n">d1</span><span class="o">,</span> <span class="n">Dot</span> <span class="n">d2</span><span class="o">){</span>
				<span class="k">if</span><span class="o">(</span><span class="n">d1</span><span class="o">.</span><span class="na">x</span><span class="o">==</span><span class="n">d2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span>
					<span class="k">return</span> <span class="n">d1</span><span class="o">.</span><span class="na">y</span><span class="o">-</span><span class="n">d2</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
				<span class="k">else</span>
					<span class="k">return</span> <span class="n">d1</span><span class="o">.</span><span class="na">x</span><span class="o">-</span><span class="n">d2</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">});</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">x</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">y</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200309_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Dot형 클래스를 선언한다.</span></strong>
    <ul>
      <li>Dot형 배열을 선언하여 n개의 점을 입력받아 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Arrays.sort(), Comparator을 이용하여 조건에 맞게 정렬한다.</span></strong>
    <ul>
      <li>x의 값이 같다면 y를 기준으로 오름차순 정렬하고, 다르다면 x를 기준으로 오름차순 정렬한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 정렬: 나이순 정렬</title>
	  <link>/blog//algo-boj10814</link>
	  <author></author>
	  <pubDate>2020-03-09T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj10814</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/10814">https://www.acmicpc.net/problem/10814</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h2 id="풀이-방법-1">풀이 방법 1</h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>age, name을 가지는 Person클래스를 선언한다.</li>
  <li>Arrays.sort()와 Comparator을 이용하여 나이순 정렬한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="cm">/**
 * 
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Person</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	<span class="n">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">n</span><span class="o">){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">=</span><span class="n">a</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">input</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">Person</span><span class="o">[]</span> <span class="n">people</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">people</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">input</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;(){</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Person</span> <span class="n">p2</span><span class="o">){</span>
					<span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">age</span><span class="o">-</span><span class="n">p2</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">});</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">people</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">age</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">people</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">name</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200309_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">Person클래스를 선언한다.</span></strong>
    <ul>
      <li>나이 age, 이름 name을 가지는 Person 클래스를 선언한다.</li>
      <li>Person형 배열을 선언하여 n개의 회원 정보를 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">Arrays.sort(), Comparator을 이용하여 조건에 맞게 정렬한다.</span></strong>
    <ul>
      <li>나이순으로 정렬한다.</li>
      <li>나이가 같다면 입력받은 순서대로 출력해야한다. 이 경우 p1.age-p2.age는 0이 되어 정렬이 이루어지지 않으므로 입력받은대로 저장되어 조건에 만족하게 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>


</channel>
</rss>
