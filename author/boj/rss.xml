<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>iamheesoo.github.io/blog/</title>
   
   <link>http://localhost:4000</link>
   <description>PS & 개발 기록</description>
   <language>utf-8</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[JAVA/백준] 11728번: 배열 합치기</title>
	  <link>/blog//algo-boj11728</link>
	  <author></author>
	  <pubDate>2020-10-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11728</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11728">https://www.acmicpc.net/problem/11728</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>시간 제한이 있으므로, BufferedReader와 BufferedWriter를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
		<span class="n">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

		<span class="n">String</span><span class="o">[]</span> <span class="n">input</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 첫 번째 개행 읽기</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="n">m</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">;</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
		
		<span class="n">String</span><span class="o">[]</span> <span class="n">arrayA</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 두 번째 줄 읽기</span>
		<span class="n">String</span><span class="o">[]</span> <span class="n">arrayB</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 세 번째 줄 읽기</span>
		
		<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 배열 A 넣기</span>
			<span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">arrayA</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 배열 B 넣기</span>
			<span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">arrayB</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">result</span><span class="o">);</span> <span class="c1">// 오름차순 정렬</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">r:</span><span class="n">result</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">r</span><span class="o">)+</span><span class="s">" "</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
    
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201007_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">BufferedReader를 이용하여 input을 읽은 후 오름차순 정렬한다</span></strong>
    <ul>
      <li>BufferedReader는 버퍼에 input값을 저장해두었다가, 버퍼가 가득차거나 개행 문자가 나타나면 버퍼의 내용을 한 번에 전달하므로 실행 속도가 빠르다.</li>
      <li>br.readLine()을 통해 input을 한 줄 읽는다.</li>
      <li>첫 번째 줄은 n과 m이므로, 읽은 값을 스페이스 기준으로 나눈다. 0번째 인덱스에는 n, 1번째에는 m이다.</li>
      <li>두 배열을 합쳐야 하므로 길이가 n+m인 배열을 선언한다.</li>
      <li>두 번째 줄 input은 배열 A의 원소들이다. for문에서 변수 iㄹ르 통해 배열 A를 순회하고, idx변수를 밖에서 선언하여 resul 배열을 움직이며 A 값을 저장한다. B도 마찬가지이다.</li>
      <li>result에 A, B를 넣은 후 Arrays.sort()로 오름차순 정렬한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">BufferedWriter를 이용하여 출력한다</span></strong>
    <ul>
      <li>BufferedWriter 역시 버퍼를 이용하기 때문에 성능이 좋다.</li>
      <li>정렬된 result 배열의 원소를 하나씩 뽑아 bw에 적는다.</li>
      <li>write()는 말그대로 버퍼에 적는 것이기 때문에, flush(), close()를 통해 버퍼를 출력한 후 스트림을 닫아야 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[Java 자바 입출력] BufferedReader/BufferedWriter <a href="https://jhnyang.tistory.com/92">https://jhnyang.tistory.com/92</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 11437번: LCA</title>
	  <link>/blog//algo-boj11437</link>
	  <author></author>
	  <pubDate>2020-10-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj11437</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/11437">https://www.acmicpc.net/problem/11437</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>dp[i]: i번째 문자까지 만들 수 있는 암호의 경우의 수(인덱스는 1부터 시작)</li>
  <li>i번째가 0인 경우 앞 문자가 1 또는 2라면 가능하고, 아니라면 잘못된 암호이므로 0을 리턴한다.</li>
  <li>앞 문자를 체크하여 경우의 수를 센다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">depth</span><span class="o">,</span> <span class="n">parent</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="c1">// 트리 생성</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span>
		<span class="o">}</span>		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 나와 연결된 노드를 저장</span>
			<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
			<span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="c1">// 깊이, 부모 찾기</span>
		<span class="n">depth</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">parent</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">dfs</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
		
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">));</span> <span class="c1">// 공통 부모 찾기</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span><span class="c1">// node: 방문 노드, cnt: 현재 깊이</span>
    	<span class="n">depth</span><span class="o">[</span><span class="n">node</span><span class="o">]=</span><span class="n">cnt</span><span class="o">;</span>
    	
    	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">child:</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">node</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// node와 연결된 것들 중에</span>
    		<span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">child</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 깊이 계산이 안 된 곳은 자식 노드이므로</span>
    			<span class="n">dfs</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
    			<span class="n">parent</span><span class="o">[</span><span class="n">child</span><span class="o">]=</span><span class="n">node</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 같은 층으로 만들기</span>
    	<span class="k">while</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">a</span><span class="o">]&gt;</span><span class="n">depth</span><span class="o">[</span><span class="n">b</span><span class="o">])</span> <span class="o">{</span> <span class="c1">// a가 더 밑에 있다면</span>
    		<span class="n">a</span><span class="o">=</span><span class="n">parent</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
    	<span class="o">}</span>
    	<span class="k">while</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">a</span><span class="o">]&lt;</span><span class="n">depth</span><span class="o">[</span><span class="n">b</span><span class="o">])</span> <span class="o">{</span> <span class="c1">//b가 더 밑에 있다면</span>
    		<span class="n">b</span><span class="o">=</span><span class="n">parent</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
    	<span class="o">}</span>
    	
        <span class="c1">// 같은 층인데 같지 않다면(부모가 다르다면)</span>
    	<span class="k">while</span><span class="o">(</span><span class="n">a</span><span class="o">!=</span><span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 같은 부모를 찾을 때 까지 반복</span>
    		<span class="n">a</span><span class="o">=</span><span class="n">parent</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
    		<span class="n">b</span><span class="o">=</span><span class="n">parent</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
    	<span class="o">}</span>
    	
    	<span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201007_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">LCA</span></strong>
    <ul>
      <li>LCA(Lowest Common Ancestor): 가장 가까운 공통 조상을 찾는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">ArrayList를 이용하여 트리를 만든다</span></strong>
    <ul>
      <li>BST가 아니므로 자식 노드가 몇 개가 될 지 모른다. 따라서 ArrayList를 이용해야 한다.</li>
      <li>서로 연결된 노드들을 ArrayList에 저장한다. list.get(1)은 노드 1와 연결되어 있는 노드들이 저장된다.</li>
      <li>자식 노드들만 저장하는 것이 아니라, 나와 연결된 노드를 저장한다.</li>
      <li>노드는 1부터 시작하므로 ArrayList&lt;&gt;는 총 n+1개를 만들고, list.get(0)은 사용하지 않는다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">깊이, 부모를 계산한다</span></strong>
    <ul>
      <li>depth[i]는 i 노드의 깊이가, parent[i]는 i의 부모 값이 저장된다.</li>
      <li>DFS를 이용하여 깊이를 계산한다. depth, parent[] 배열을 이용하여 값을 저장한다.</li>
      <li>dfs()는 깊이 계산이 되지 않은 곳만 넣는다. depth[i]==0인 곳이 계산 안 된 곳이며, i의 자식노드이다. 따라서 재귀 호출을 통해 자식 노드로 이동하며, cnt+1을 통해 깊이를 계산한다.</li>
      <li>자식 노드의 경우 parent는 node가 되므로 이를 저장한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">깊이를 같게 만든 후, 가장 가까운 공통 조상을 찾는다</span></strong>
    <ul>
      <li>solve()를 통해 깊이를 같게 만든 후 가장 가까운 공통 조상을 찾는다.</li>
      <li>a와 b의 depth를 확인한다. 다를 수가 있으므로 더 깊은 곳을 한 칸씩 위로 올라가며 기준으로 같게 만든다.</li>
      <li>첫 번째 while문은 a가 더 깊은 경우로, a=parent[a]하며 올라간다.</li>
      <li>두 번째 while문은 b가 더 깊은 경우다.</li>
      <li>a와 b의 깊이 같아지면 세 번째 while문의 조건을 확인한다. 깊이가 같고 a==b이면 공통 조상을 가리키고 있는 것이다. a!=b라면 깊이는 같지만 공통 조상이 아니므로 같이 한 칸씩 위로 올라가며 공통 조상을 찾을 때 까지 반복한다.</li>
      <li>공통 조상 a를 리턴한다(b도 가능).</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[BOJ] 백준 11437번 LCA 자바 풀이 <a href="https://hoho325.tistory.com/103">https://hoho325.tistory.com/103</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 2011번: 암호코드</title>
	  <link>/blog//algo-boj2011</link>
	  <author></author>
	  <pubDate>2020-10-07T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2011</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2011">https://www.acmicpc.net/problem/2011</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>dp[i]: i번째 문자까지 만들 수 있는 암호의 경우의 수(인덱스는 1부터 시작)</li>
  <li>i번째가 0인 경우 앞 문자가 1 또는 2라면 가능하고, 아니라면 잘못된 암호이므로 0을 리턴한다.</li>
  <li>앞 문자를 체크하여 경우의 수를 센다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">String</span> <span class="n">s</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
		<span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)==</span><span class="sc">'0'</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 시작이 0이면 잘못된 암호</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="kt">long</span><span class="o">[]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="mi">1</span><span class="o">];</span>
		<span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">char</span> <span class="n">ch</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 현재 체크하는 문자</span>
			<span class="kt">char</span> <span class="n">prev</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span> <span class="c1">// 앞 문자</span>
			<span class="k">if</span><span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">'0'</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">prev</span><span class="o">==</span><span class="sc">'1'</span> <span class="o">||</span> <span class="n">prev</span><span class="o">==</span><span class="sc">'2'</span><span class="o">)</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">]%</span><span class="mi">1000000</span><span class="o">;</span> 
				 <span class="c1">// 현재 문자 0을 앞과 연결할 수 없다면 잘못된 문자열이므로 종료</span>
				<span class="k">else</span> <span class="k">break</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="c1">// 앞 문자가 0이면 경우의 수 변화 없음</span>
				<span class="k">if</span><span class="o">(</span><span class="n">prev</span><span class="o">==</span><span class="sc">'0'</span><span class="o">)</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]%</span><span class="mi">1000000</span><span class="o">;</span>
				<span class="k">else</span> <span class="o">{</span> <span class="c1">// 앞 문자와 연결할 수 있는지 체크</span>
				 	<span class="c1">// 앞 문자와 연결했을 때 숫자를 int형으로 출력</span>
					<span class="kt">int</span> <span class="n">temp</span><span class="o">=(</span><span class="n">prev</span><span class="o">-</span><span class="sc">'0'</span><span class="o">)*</span><span class="mi">10</span><span class="o">+(</span><span class="n">ch</span><span class="o">-</span><span class="sc">'0'</span><span class="o">);</span>
					<span class="c1">// 암호 코드안에 들어오면 경우의 수 갱신</span>
					<span class="k">if</span><span class="o">(</span><span class="mi">1</span><span class="o">&lt;=</span><span class="n">temp</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="o">&lt;=</span><span class="mi">26</span><span class="o">)</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">])%</span><span class="mi">1000000</span><span class="o">;</span>
					<span class="k">else</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]%</span><span class="mi">1000000</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()]%</span><span class="mi">1000000</span><span class="o">);</span>
		
	<span class="o">}</span>
	
    
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/201007_2.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DP를 이용한다</span></strong>
    <ul>
      <li>dp에는 인덱스 1부터 사용한다.</li>
      <li>dp[i]: input의 i-1번째 문자까지의 암호 해석 경우의 수.</li>
      <li>암호 길이가 5000 이하이므로 DFS로는 풀 수 없다. 처음부터 하나씩 문자를 체크하며 경우의 수를 따지는 방법으로 문제를 해결할 수 있다. 따라서 DP를 이용한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">예시: 25114</span></strong>
    <ul>
      <li>dp[1]=1 (2)</li>
      <li>dp[2]=2 (2 5, 25)</li>
      <li>dp[3]=2 (2 5 1, 25 1)</li>
      <li>dp[4]=4 (2 5 1 1, 25 1 1, 25 11, 2 5 11)</li>
      <li>dp[5]=6 (2 5 1 1 4, 25 1 1 4, 25 1 14, 25 11 4, 2 5 11 4, 2 5 1 14)</li>
      <li>여기서 dp[i]=dp[i-2]+dp[i-1]을 알 수 있다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">0인 경우를 생각한다</span></strong>
    <ul>
      <li>시작이 0이면 잘못된 경우이므로 0을 출력한다.</li>
      <li>중간에 0이 나오면 prev(i-1, 앞 문자)를 체크한다. prev가 1 또는 2라면 prev에 0을 붙이면 된다.</li>
      <li></li>
      <li>예시: 1203</li>
      <li>dp[1]=1</li>
      <li>dp[2]=2</li>
      <li>dp[3]=1</li>
      <li>dp[4]=1</li>
      <li>여기서 dp[3]은 1이 되어야 한다. dp[2]까지는 (1 2, 12)였지만 3번째가 0으로 (1 20)만 가능하다. 따라서 dp[i]는 dp[i-1]이 아닌 dp[i-2]를 가져온다.</li>
      <li></li>
      <li>prev가 1, 2가 아니라면 잘못된 문자이므로 break.</li>
      <li>prev가 0이면 새로운 경우의 수를 만들 수 없으므로 dp[i]=dp[i-1] (ex. 1230, 1091)</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">1000000으로 나눈다</span></strong>
    <ul>
      <li>문제 조건에서 1000000으로 나눈 나머지를 출력하라고 했으므로 dp[i]를 받을 때 마다 해당 값으로 나눈다.</li>
      <li>사실 dp[i]가 갱신되는 (dp[i]=dp[i-2]+dp[i-1])에서만 해줘도 된다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 다리 놓기</title>
	  <link>/blog//algo-boj1010</link>
	  <author></author>
	  <pubDate>2020-09-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1010</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1010">https://www.acmicpc.net/problem/1010</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DP를 이용해 mCn을 계산한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">T</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">t</span><span class="o">&lt;</span><span class="n">T</span><span class="o">;</span><span class="n">t</span><span class="o">++)</span> <span class="o">{</span>
        	<span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        	<span class="kt">int</span> <span class="n">M</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        	
        	<span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">30</span><span class="o">][</span><span class="mi">30</span><span class="o">];</span>
        	<span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">M</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        			<span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="o">)</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        			<span class="k">else</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
        		<span class="o">}</span>
        	<span class="o">}</span>
        	
        	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">M</span><span class="o">][</span><span class="n">N</span><span class="o">]);</span>
        <span class="o">}</span>
	<span class="o">}</span>
	

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200922_6.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">mCn을 DP를 이용해 계산한다</span></strong>
    <ul>
      <li>서쪽이 N, 동쪽이 M으로 N에서 M으로 가는 경우의 수는 mCn과 같다.</li>
      <li>따라서 DP를 이용해 mCn을 계산한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] 조합</title>
	  <link>/blog//algo-boj2407</link>
	  <author></author>
	  <pubDate>2020-09-22T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2407</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2407">https://www.acmicpc.net/problem/2407</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DP를 이용해 nCr을 계산한다.</li>
  <li>long 형태를 초과하므로 BigInteger를 이용한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Scanner</span> <span class="n">sc</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="n">BigInteger</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="n">BigInteger</span><span class="o">[</span><span class="mi">101</span><span class="o">][</span><span class="mi">101</span><span class="o">];</span>
		
		<span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]=</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">100</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="o">)</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
				<span class="k">else</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">]);</span>
	<span class="o">}</span>
	

<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200922_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">nCr을 DP를 이용해 계산한다</span></strong>
    <ul>
      <li>C(n,r)=C(n-1,r)+C(n-1,r-1)</li>
      <li>dp[0][0]=dp[1][0]=dp[1][1]=0으로 초기화하고, i는 2부터 100까지, j는 i보다 더 클 수는 없으므로 j&lt;=i인 범위를 구한다.</li>
      <li>j==0이거나 i==j인 경우에는 1이다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">BigInteger형을 사용한다</span></strong>
    <ul>
      <li>n=100, m=49이면 long형을 초과한다. 따라서 자바에서 가장 큰 BigInteger형을 사용해야한다.</li>
      <li>BigInteger에 숫자 1을 넣기 위해서는 BigInteger.ONE을 사용해야 한다.</li>
      <li>덧셈 역시 +가 아닌, add()메소드를 사용한다. a+b는 a.add(b)와 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 가르침</title>
	  <link>/blog//algo-boj1062</link>
	  <author></author>
	  <pubDate>2020-07-14T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1062</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1062">https://www.acmicpc.net/problem/1062</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="0-문제-요약">0. 문제 요약</h3>
<ul>
  <li>학생들이 읽을 수 있는지 확인할 단어 n개, 선생님이 가르칠 글자 k개.</li>
  <li>k는 최소 5이상(antic, 시작과 끝 단어 규칙)이어야 한다. 왜냐하면 antic도 가르치지 않는다면 읽을 수 있는 단어가 없기 때문이다.</li>
  <li>DFS로 읽을 수 있는 k-5개의 알파벳을 선택해 모든 경우의 수를 따진 후, 그것에 따라 n개의 단어는 몇 개 읽을 수 있는지 체크한다.</li>
  <li>모든 경우의 수 중 읽을 수 있는 단어 최댓값을 리턴한다.</li>
</ul>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>시작과 끝의 “anta”, “tica”는 지우고 단어들을 저장한다.</li>
  <li>boolean[] alpha로 antic는 true로 고정시켜놓고, DFS로 k-5개의 알파벳을 선택이 완료되면 n개의 단어 중 읽을 수 있는 개수를 체크한다.</li>
  <li>Math.max로 이 중 최댓값을 저장한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span><span class="n">k</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">alpha</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">word</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span><span class="c1">//k개 선택끝났으니까 읽을 수 있는 단어들 체크</span>
			<span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">String</span> <span class="n">wordi</span><span class="o">=</span><span class="n">word</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="kt">boolean</span> <span class="n">flag</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">wordi</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="k">if</span><span class="o">(!</span><span class="n">alpha</span><span class="o">[</span><span class="n">wordi</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)-</span><span class="sc">'a'</span><span class="o">])</span> <span class="o">{</span>
						<span class="n">flag</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
						<span class="k">break</span><span class="o">;</span>
					<span class="o">}</span>
				<span class="o">}</span>
				<span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="n">temp</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">26</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//k개 선택해야함</span>
			<span class="k">if</span><span class="o">(</span><span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
			<span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">alpha</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">k</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()-</span><span class="mi">5</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
		<span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">k</span><span class="o">==</span><span class="mi">21</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">word</span><span class="o">=</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">temp</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="n">word</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">temp</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="n">temp</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">4</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'a'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'c'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'i'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'n'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		<span class="n">alpha</span><span class="o">[</span><span class="sc">'t'</span><span class="o">-</span><span class="sc">'a'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200712_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶<br />
flag를 사용하지 않고 다른 방식을 이용했더니 틀렸다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">k 크기를 먼저 체크한다</span></strong>
    <ul>
      <li>k는 가르칠 알파벳 수로, 무조건 5보다 커야한다. 왜냐하면 antic는 꼭 가르쳐야하기 때문에, 이보다 작으면 모순이다.</li>
      <li>따라서 처음 입력받을때, 필수 antic를 제외한 새로 배울 알파벳 개수를 저장하기 위해 k=k-5한다.</li>
      <li>k==21은 사실 k=26을 입력받은 것이므로, 이것은 모든 알파벳을 가르친다는 뜻이다. 따라서 어떤 단어가 입력되어도 다 읽을 수 있으므로 n을 리턴하여 입력받은 단어 n개를 모두 읽을 수 있다고 출력한다.</li>
      <li>위 조건에서 걸러지지 않는다면, DFS로 모든 경우의 수를 따진다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS로 k개의 읽을 수 있는 알파벳의 모든 경우의 수를 따진다</span></strong>
    <ul>
      <li>DFS로 a~z까지 모두 체크하며 알파벳 k개를 선택한다. 이때 antic는 k개 선택에서 당연히 제외된다. 왜냐하면 새로 배우는 알파벳이 아니기 때문이다.</li>
      <li>antic 제외 k개 선택이 끝났으면 n개의 단어를 체크하며 읽을 수 있는지 확인한다.</li>
      <li>단어 word의 알파벳을 하나씩 체크하며 배우지 않은 알파벳이라면 flag=false후 break로 탈출하여 해당 word는 카운트하지 않도록 한다.</li>
      <li><img src="./assets/images/200714_2.PNG" alt="실행결과" /> 
처음에는 word의 알파벳 체크를 위해 위와 같이 처음 보는 알파벳이면 break로 탈출하여 다음 word로 넘어가고, break문에 걸리지 않았다는 뜻은 word의 알파벳이 모두 아는 것이므로 마지막 알파벳까지 확인을 마쳤다면 temp++하도록 짰는데, 여기서 오류가 발생했다. “antatica”인 경우 main의 substring에 의해 word에 ““로 저장되고, 이 경우 for문의 j조건에 만족하지 않아 temp++되지 않는다. 읽을 수 있는 단어임에도 불구하고 말이다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[Algorithm] 백준 1062 가르침 java <a href="https://velog.io/@leeinae/Algorithm-%EB%B0%B1%EC%A4%80-1062-%EA%B0%80%EB%A5%B4%EC%B9%A8-java">https://velog.io/@leeinae/Algorithm-%EB%B0%B1%EC%A4%80-1062-%EA%B0%80%EB%A5%B4%EC%B9%A8-java</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 종이 조각</title>
	  <link>/blog//algo-boj14391</link>
	  <author></author>
	  <pubDate>2020-07-12T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj14391</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/14391">https://www.acmicpc.net/problem/14391</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용하여 모든 경우를 다 해본다.</li>
  <li>visit한 곳은 가로로 숫자를 만들고, 아니라면 세로 숫자로 만든다.</li>
  <li>모든 경우의 수 중 가장 큰 값을 리턴한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visit</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span><span class="c1">//탐색 끝</span>
			<span class="n">sum</span><span class="o">();</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">y</span><span class="o">&gt;=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span><span class="c1">//한 행 체크 끝났으므로 다음 행 이동</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span><span class="c1">//가로 숫자로 사용</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span><span class="c1">//세로 숫자로 사용</span>
		<span class="n">dfs</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//가로 숫자 계산</span>
			<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">temp</span><span class="o">*=</span><span class="mi">10</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">+=</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="o">{</span>
					<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//세로 숫자 계산</span>
			<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">temp</span><span class="o">*=</span><span class="mi">10</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">+=</span><span class="n">map</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="k">else</span> <span class="o">{</span>
					<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
					<span class="n">temp</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="n">result</span><span class="o">+=</span><span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="n">visit</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)-</span><span class="sc">'0'</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200712_1.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>n, m이 최대 4이므로 모든 경우를 다 확인해도 시간 초과가 발생하지 않는다.</li>
      <li>dfs에서 재귀로 모든 원소를 다 탐색한다.</li>
      <li>한 행에서의 체크가 모두 끝났다면 다음 행으로 넘기고, 마지막 행까지 체크가 끝났다면 sum()을 호출하여 숫자 계산을 한다.</li>
      <li>visit[i][j]가 true라면 그 숫자는 가로 숫자로 사용한다는 뜻이고, false라면 세로로 사용한다는 뜻이다. 따라서 true와 false일 때 둘 다 dfs()를 불러 모든 경우를 확인해야 한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">숫자를 계산한다</span></strong>
    <ul>
      <li>가로 숫자와 세로 숫자를 따로 계산해준다.</li>
      <li>가로 숫자는 행을 기준으로 가로(true)인 곳을 찾아 누적한다.</li>
      <li>이때 숫자의 자리수를 생각해야하므로, 이전까지의 합 temp에 *10하여 자리를 한 단계 올린 뒤, 현재 값을 더한다.</li>
      <li>현재 숫자가 지금 계산하는 조건(가로/세로)이 아니라면, 여기서 이전까지의 숫자들이 끝나는 것이므로 result에 누적한 후, 다음 숫자를 위해 0으로 초기화한다.</li>
      <li>j탐색이 모두 끝나면 한 행이 끝난 것이므로 지금까지의 temp를 result에 저장한다. 어짜피 위의 else문에서 저장했다고 하더라도, temp=0으로 다시 초기화되었으므로 이 코드를 실행한들 0이 더해지므로 큰 상관이 없다.</li>
      <li>세로는 열을 기준으로 체크하며, 기본적인 틀은 가로와 같다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준] 14391번 종이 조각 <a href="https://whereisusb.tistory.com/230">https://whereisusb.tistory.com/230</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 스도쿠</title>
	  <link>/blog//algo-boj2580</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2580</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2580">https://www.acmicpc.net/problem/2580</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>dfs로 빈칸에 숫자를 지정해준 뒤, 열, 행, 3*3행렬에서 조건이 만족하는지 확인한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
	<span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">idx</span><span class="o">==</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="s">" "</span><span class="o">);</span>
				<span class="o">}</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
			<span class="o">}</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">Node</span> <span class="n">node</span><span class="o">=</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">idx</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">]=</span><span class="n">i</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">checkRow</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">checkColumn</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">checkBox</span><span class="o">(</span><span class="n">node</span><span class="o">))</span>
				<span class="n">dfs</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="mi">9</span><span class="o">)</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">]=</span><span class="mi">0</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkRow</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">y</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">i</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkColumn</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">x</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">y</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkBox</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">node</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">x</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">y</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">a</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="o">+</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">b</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">b</span><span class="o">+</span><span class="mi">3</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">==</span><span class="n">y</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
				<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">][</span><span class="mi">9</span><span class="o">];</span>
		<span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">9</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span> 
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
				<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_3.PNG" alt="실행결과" />
성공٩(˘◊˘)۶<br />
빈칸에 만족하는 숫자가 없을 때의 예외처리를 해주지 않아서 실패했었다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">빈칸 위치를 ArrayList에 저장한다</span></strong>
    <ul>
      <li>scan해서 받아오는 과정에서 0은 해당 위치를 AraryList에 저장한다.</li>
      <li>x, y좌표를 저장하기 위해 Node클래스를 선언하여 이용한다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>빈칸에 for문을 통해 1~9중 하나를 부여한다.</li>
      <li>해당 위치에 넣은 숫자가 행, 열, 박스에서 조건을 만족하는지 확인한다.</li>
      <li>만족한다면, dfs(idx+1)로 재귀를 호출하여 다음 빈칸을 확인한다.</li>
      <li>만족하지 않는다면 다음 숫자를 넣어 계속 확인한다.</li>
      <li>9까지 확인하였는데도 만족하지 않는다면, 0으로 다시 리셋한다. 이 경우 어짜피 ArrayList의 마지막 인덱스까지 확인하지 못하게 되므로 정답에서 자연스럽게 제외된다.</li>
    </ul>
  </li>
  <li><strong><span style="color:navy">행, 열, 박스 조건을 확인한다</span></strong>
    <ul>
      <li>checkRow()로 현재 행에서 중복되는 숫자는 없는지 확인한다.</li>
      <li>checkColumn()은 현재 열에서 중복되는 숫자가 없는지 확인한다.</li>
      <li>checkBox()는 3*3행렬에서 확인한다. 이때 i, j의 시작점을 계산해야하는데, 시작점은 0, 3, 6으로 3의 배수이므로 3의 배수로 만들기 위해 /3 *3을 해준다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

<h3 id="참고">참고</h3>
<ul>
  <li>[백준,BOJ 2580] 스도쿠 (JAVA 구현) <a href="https://fbtmdwhd33.tistory.com/41">https://fbtmdwhd33.tistory.com/41</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 수들의 합 2</title>
	  <link>/blog//algo-boj2003</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj2003</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/2003">https://www.acmicpc.net/problem/2003</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>0부터 n-1을 시작점으로 하여 j개 더했을 때 m이 되는 개수를 센다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
			<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		
		<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">sum</span><span class="o">+=</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
				<span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">==</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">cnt</span><span class="o">++;</span>
					<span class="k">break</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_4.PNG" alt="실행결과" />
성공٩(˘◊˘)۶</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">i번째 수부터 j번째 수까지의 합을 구한다</span></strong>
    <ul>
      <li>i는 0부터 n-1까지 모든 경우를 다 확인한다.</li>
      <li>i부터 j까지의 합이 m과 같다면 cnt++하고 다음 i 확인을 위해 break로 for j를 탈출한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA/백준] SW 역량 테스트 준비-연습 | 브루트 포스: 알파벳</title>
	  <link>/blog//algo-boj1987</link>
	  <author></author>
	  <pubDate>2020-07-11T09:00:00+09:00</pubDate>
	  <guid>/blog//algo-boj1987</guid>
	  <description><![CDATA[
	     <h2 id="문제"><span style="color:navy">문제</span></h2>
<p><a href="https://www.acmicpc.net/problem/1987">https://www.acmicpc.net/problem/1987</a></p>

<h2 id="-ᐛ-و-도전"><span style="color:navy">( ᐛ )و 도전</span></h2>

<h3 id="1-설계">1. 설계</h3>
<ol>
  <li>DFS를 이용하여 경로를 탐색하고, 중복 알파벳이 있으면 탈출한다.</li>
</ol>

<h3 id="2-구현-성공-코드">2. 구현 (성공 코드)</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="cm">/**
 * @author HEESOO
 *
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span><span class="n">c</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">char</span> <span class="n">map</span><span class="o">[][];</span>
	<span class="kd">static</span> <span class="kt">boolean</span> <span class="n">alpha</span><span class="o">[];</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dotX</span><span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dotY</span><span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">alpha</span><span class="o">[</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">xx</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">dotX</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="kt">int</span> <span class="n">yy</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="n">dotY</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="k">if</span><span class="o">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="n">xx</span><span class="o">||</span><span class="n">xx</span><span class="o">&gt;=</span><span class="n">r</span> <span class="o">||</span> <span class="mi">0</span><span class="o">&gt;</span><span class="n">yy</span><span class="o">||</span><span class="n">yy</span><span class="o">&gt;=</span><span class="n">c</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">next</span><span class="o">=</span><span class="n">map</span><span class="o">[</span><span class="n">xx</span><span class="o">][</span><span class="n">yy</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">;</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">alpha</span><span class="o">[</span><span class="n">next</span><span class="o">])</span> <span class="n">dfs</span><span class="o">(</span><span class="n">xx</span><span class="o">,</span> <span class="n">yy</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">max</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span>
		<span class="n">alpha</span><span class="o">[</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]-</span><span class="sc">'A'</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="n">Scanner</span> <span class="n">scan</span><span class="o">=</span><span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">r</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">c</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">];</span>
		<span class="n">alpha</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">r</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">c</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></pre></td></tr></tbody></table></code></pre></figure>

<h3 id="3-결과">3. 결과</h3>
<p><img src="./assets/images/200711_5.PNG" alt="실행결과" />
성공٩(˘◊˘)۶<br />
사실 실패도 찾아본 반례 예시들이 다 돌아가서 뭐가 틀렸었던건지 아직도 잘 모르겠다. max값 갱신과 visit false처리 위치를 for문 밖으로 빼주었더니 성공하였다.</p>

<h3 id="4-설명">4. 설명</h3>
<ol>
  <li><strong><span style="color:navy">DFS를 이용한다</span></strong>
    <ul>
      <li>상하좌우로 움직여 이동할 수 있는 최대 칸을 구해야하므로 DFS를 이용한다.</li>
      <li>map에 알파벳을 char형으로 저장하고, alpha를 통해 방문한 위치의 알파벳을 true로 저장하여 중복을 체크한다.</li>
      <li>xx, yy는 상하좌우로 움직일 수 있는 위치를 나타내며 map의 인덱스 범위를 벗어나지 않는다면 alpha를 통해 새 알파벳이라면 재귀 호출로 그곳으로 이동한다.</li>
      <li>for문에서 상하좌우로 더이상 움직일 수 없다면(인덱스를 벗어나거나 새로운 알파벳이 아닌 경우), for문을 탈출하여 지금까지의 cnt를 Math.max로 최댓값을 저장한다. 그리고 다음 사용을 위해 alpha[x][y]=false 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="해결-완료"><span style="color:navy">해결 완료!</span></h2>

	  ]]></description>
	</item>


</channel>
</rss>
